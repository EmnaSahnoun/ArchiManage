{
    "sourceFile": "src/models/Task.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1741171259169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741171879953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,28 @@\n const mongoose = require(\"mongoose\");\r\n \r\n const TaskStatus = Object.freeze({\r\n-  PENDING: \"PENDING\",\r\n-  IN_PROGRESS: \"IN_PROGRESS\",\r\n-  COMPLETED: \"COMPLETED\",\r\n-  CANCELLED: \"CANCELLED\",\r\n+    PENDING: \"PENDING\",\r\n+    IN_PROGRESS: \"IN_PROGRESS\",\r\n+    COMPLETED: \"COMPLETED\",\r\n+    CANCELED: \"CANCELED\",\r\n });\r\n \r\n const TaskPriority = Object.freeze({\r\n-  LOW: \"LOW\",\r\n-  MEDIUM: \"MEDIUM\",\r\n-  HIGH: \"HIGH\",\r\n-  CRITICAL: \"CRITICAL\",\r\n+    LOW: \"LOW\",\r\n+    MEDIUM: \"MEDIUM\",\r\n+    HIGH: \"HIGH\",\r\n+    CRITICAL: \"CRITICAL\",\r\n });\r\n \r\n const taskSchema = new mongoose.Schema({\r\n-  name: { type: String, required: true },\r\n-  description: String,\r\n-  startDate: Date,\r\n-  endDate: Date,\r\n-  status: { type: String, enum: Object.values(TaskStatus), default: \"PENDING\" },\r\n-  priority: { type: String, enum: Object.values(TaskPriority), default: \"MEDIUM\" },\r\n-  phase: { type: mongoose.Schema.Types.ObjectId, ref: \"Phase\" },\r\n-  subTasks: [{ type: mongoose.Schema.Types.ObjectId, ref: \"Task\" }],\r\n+    name: { type: String, required: true },\r\n+    description: { type: String },\r\n+    startDate: { type: Date, required: true },\r\n+    endDate: { type: Date },\r\n+    status: { type: String, enum: Object.values(TaskStatus), default: \"PENDING\" },\r\n+    priority: { type: String, enum: Object.values(TaskPriority), default: \"MEDIUM\" },\r\n+    phase: { type: mongoose.Schema.Types.ObjectId, ref: \"Phase\", required: true },\r\n+    subTasks: [{ type: mongoose.Schema.Types.ObjectId, ref: \"Task\" }],\r\n });\r\n \r\n-Object.assign(taskSchema.statics, { TaskStatus, TaskPriority });\r\n-\r\n module.exports = mongoose.model(\"Task\", taskSchema);\r\n"
                },
                {
                    "date": 1741697588423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,7 +22,9 @@\n     status: { type: String, enum: Object.values(TaskStatus), default: \"PENDING\" },\r\n     priority: { type: String, enum: Object.values(TaskPriority), default: \"MEDIUM\" },\r\n     phase: { type: mongoose.Schema.Types.ObjectId, ref: \"Phase\", required: true },\r\n     subTasks: [{ type: mongoose.Schema.Types.ObjectId, ref: \"Task\" }],\r\n+    subTasks: [{ type: mongoose.Schema.Types.ObjectId, ref: \"Task\" }]\r\n+\r\n });\r\n \r\n module.exports = mongoose.model(\"Task\", taskSchema);\r\n"
                },
                {
                    "date": 1741698752727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,10 +21,7 @@\n     endDate: { type: Date },\r\n     status: { type: String, enum: Object.values(TaskStatus), default: \"PENDING\" },\r\n     priority: { type: String, enum: Object.values(TaskPriority), default: \"MEDIUM\" },\r\n     phase: { type: mongoose.Schema.Types.ObjectId, ref: \"Phase\", required: true },\r\n-    subTasks: [{ type: mongoose.Schema.Types.ObjectId, ref: \"Task\" }],\r\n-    subTasks: [{ type: mongoose.Schema.Types.ObjectId, ref: \"Task\" }]\r\n+    subTasks: [{ type: mongoose.Schema.Types.ObjectId, ref: \"Task\" }]});\r\n \r\n-});\r\n-\r\n module.exports = mongoose.model(\"Task\", taskSchema);\r\n"
                }
            ],
            "date": 1741171259169,
            "name": "Commit-0",
            "content": "const mongoose = require(\"mongoose\");\r\n\r\nconst TaskStatus = Object.freeze({\r\n  PENDING: \"PENDING\",\r\n  IN_PROGRESS: \"IN_PROGRESS\",\r\n  COMPLETED: \"COMPLETED\",\r\n  CANCELLED: \"CANCELLED\",\r\n});\r\n\r\nconst TaskPriority = Object.freeze({\r\n  LOW: \"LOW\",\r\n  MEDIUM: \"MEDIUM\",\r\n  HIGH: \"HIGH\",\r\n  CRITICAL: \"CRITICAL\",\r\n});\r\n\r\nconst taskSchema = new mongoose.Schema({\r\n  name: { type: String, required: true },\r\n  description: String,\r\n  startDate: Date,\r\n  endDate: Date,\r\n  status: { type: String, enum: Object.values(TaskStatus), default: \"PENDING\" },\r\n  priority: { type: String, enum: Object.values(TaskPriority), default: \"MEDIUM\" },\r\n  phase: { type: mongoose.Schema.Types.ObjectId, ref: \"Phase\" },\r\n  subTasks: [{ type: mongoose.Schema.Types.ObjectId, ref: \"Task\" }],\r\n});\r\n\r\nObject.assign(taskSchema.statics, { TaskStatus, TaskPriority });\r\n\r\nmodule.exports = mongoose.model(\"Task\", taskSchema);\r\n"
        }
    ]
}