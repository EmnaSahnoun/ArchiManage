{
    "sourceFile": "src/controllers/companyController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 34,
            "patches": [
                {
                    "date": 1741091756103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741091829243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const Company = require('../models/company.model');\r\n+const Company = require('../models/company');\r\n const UserCompany = require('../models/userCompany.model');\r\n \r\n exports.createCompany = async (req, res) => {\r\n     try {\r\n"
                },
                {
                    "date": 1741091834442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const Company = require('../models/company');\r\n+const Company = require('../models/compan');\r\n const UserCompany = require('../models/userCompany.model');\r\n \r\n exports.createCompany = async (req, res) => {\r\n     try {\r\n"
                },
                {
                    "date": 1741091841401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-const Company = require('../models/compan');\r\n-const UserCompany = require('../models/userCompany.model');\r\n+const Company = require('../models/Company');\r\n+const UserCompany = require('../models/userCompany');\r\n \r\n exports.createCompany = async (req, res) => {\r\n     try {\r\n         const { name } = req.body;\r\n"
                },
                {
                    "date": 1741094837800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,89 @@\n const Company = require('../models/Company');\r\n-const UserCompany = require('../models/userCompany');\r\n \r\n-exports.createCompany = async (req, res) => {\r\n-    try {\r\n-        const { name } = req.body;\r\n-        const company = new Company({ name });\r\n-        await company.save();\r\n-        res.status(201).json(company);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: error.message });\r\n+// ðŸ”¹ CrÃ©er une nouvelle entreprise\r\n+const createCompany = async (req, res) => {\r\n+  try {\r\n+    const { name, address, email, phone, password } = req.body;\r\n+\r\n+    // VÃ©rifier si l'entreprise existe dÃ©jÃ \r\n+    const existingCompany = await Company.findOne({ email });\r\n+    if (existingCompany) {\r\n+      return res.status(400).json({ message: 'Une entreprise avec cet email existe dÃ©jÃ .' });\r\n     }\r\n+\r\n+    const newCompany = new Company({ name, address, email, phone, password });\r\n+    await newCompany.save();\r\n+\r\n+    res.status(201).json(newCompany);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n };\r\n \r\n-exports.assignUserToCompany = async (req, res) => {\r\n-    try {\r\n-        const { userId, companyId } = req.body;\r\n-        const userCompany = new UserCompany({ userId, companyId });\r\n-        await userCompany.save();\r\n-        res.status(201).json(userCompany);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: error.message });\r\n+// ðŸ”¹ RÃ©cupÃ©rer toutes les entreprises\r\n+const getCompanies = async (req, res) => {\r\n+  try {\r\n+    const companies = await Company.find();\r\n+    res.status(200).json(companies);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n+// ðŸ”¹ RÃ©cupÃ©rer une entreprise par ID\r\n+const getCompanyById = async (req, res) => {\r\n+  try {\r\n+    const company = await Company.findById(req.params.id);\r\n+    if (!company) {\r\n+      return res.status(404).json({ message: \"Entreprise non trouvÃ©e\" });\r\n     }\r\n+    res.status(200).json(company);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n };\r\n \r\n-exports.getCompanies = async (req, res) => {\r\n-    try {\r\n-        const companies = await Company.find();\r\n-        res.status(200).json(companies);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: error.message });\r\n+// ðŸ”¹ Mettre Ã  jour une entreprise\r\n+const updateCompany = async (req, res) => {\r\n+  try {\r\n+    const company = await Company.findById(req.params.id);\r\n+    if (!company) {\r\n+      return res.status(404).json({ message: \"Entreprise non trouvÃ©e\" });\r\n     }\r\n+\r\n+    const { name, address, email, phone, password } = req.body;\r\n+    company.name = name || company.name;\r\n+    company.address = address || company.address;\r\n+    company.email = email || company.email;\r\n+    company.phone = phone || company.phone;\r\n+    company.password = password || company.password;\r\n+\r\n+    await company.save();\r\n+    res.status(200).json(company);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n };\r\n+\r\n+// ðŸ”¹ Supprimer une entreprise\r\n+const deleteCompany = async (req, res) => {\r\n+  try {\r\n+    const company = await Company.findById(req.params.id);\r\n+    if (!company) {\r\n+      return res.status(404).json({ message: \"Entreprise non trouvÃ©e\" });\r\n+    }\r\n+\r\n+    await company.deleteOne();\r\n+    res.status(200).json({ message: \"Entreprise supprimÃ©e avec succÃ¨s\" });\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n+module.exports = {\r\n+  createCompany,\r\n+  getCompanies,\r\n+  getCompanyById,\r\n+  updateCompany,\r\n+  deleteCompany\r\n+};\r\n"
                },
                {
                    "date": 1741094854211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n const Company = require('../models/Company');\r\n \r\n-// ðŸ”¹ CrÃ©er une nouvelle entreprise\r\n const createCompany = async (req, res) => {\r\n   try {\r\n     const { name, address, email, phone, password } = req.body;\r\n \r\n"
                },
                {
                    "date": 1741094860747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,8 @@\n     res.status(500).json({ message: error.message });\r\n   }\r\n };\r\n \r\n-// ðŸ”¹ RÃ©cupÃ©rer toutes les entreprises\r\n const getCompanies = async (req, res) => {\r\n   try {\r\n     const companies = await Company.find();\r\n     res.status(200).json(companies);\r\n"
                },
                {
                    "date": 1741094868754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,8 @@\n     res.status(500).json({ message: error.message });\r\n   }\r\n };\r\n \r\n-// ðŸ”¹ RÃ©cupÃ©rer une entreprise par ID\r\n const getCompanyById = async (req, res) => {\r\n   try {\r\n     const company = await Company.findById(req.params.id);\r\n     if (!company) {\r\n@@ -40,9 +39,8 @@\n     res.status(500).json({ message: error.message });\r\n   }\r\n };\r\n \r\n-// ðŸ”¹ Mettre Ã  jour une entreprise\r\n const updateCompany = async (req, res) => {\r\n   try {\r\n     const company = await Company.findById(req.params.id);\r\n     if (!company) {\r\n"
                },
                {
                    "date": 1741094875916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,8 @@\n     res.status(500).json({ message: error.message });\r\n   }\r\n };\r\n \r\n-// ðŸ”¹ Supprimer une entreprise\r\n const deleteCompany = async (req, res) => {\r\n   try {\r\n     const company = await Company.findById(req.params.id);\r\n     if (!company) {\r\n"
                },
                {
                    "date": 1741095178297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,8 @@\n     const existingCompany = await Company.findOne({ email });\r\n     if (existingCompany) {\r\n       return res.status(400).json({ message: 'Une entreprise avec cet email existe dÃ©jÃ .' });\r\n     }\r\n-\r\n     const newCompany = new Company({ name, address, email, phone, password });\r\n     await newCompany.save();\r\n \r\n     res.status(201).json(newCompany);\r\n"
                },
                {
                    "date": 1741095190512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n     const existingCompany = await Company.findOne({ email });\r\n     if (existingCompany) {\r\n       return res.status(400).json({ message: 'Une entreprise avec cet email existe dÃ©jÃ .' });\r\n     }\r\n+\r\n     const newCompany = new Company({ name, address, email, phone, password });\r\n     await newCompany.save();\r\n \r\n     res.status(201).json(newCompany);\r\n"
                },
                {
                    "date": 1741095211988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n };\r\n \r\n const getCompanies = async (req, res) => {\r\n   try {\r\n-    const companies = await Company.find();\r\n+    const companies = await Company\r\n     res.status(200).json(companies);\r\n   } catch (error) {\r\n     res.status(500).json({ message: error.message });\r\n   }\r\n"
                },
                {
                    "date": 1741095220228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n };\r\n \r\n const getCompanies = async (req, res) => {\r\n   try {\r\n-    const companies = await Company\r\n+    const companies = await Company.f\r\n     res.status(200).json(companies);\r\n   } catch (error) {\r\n     res.status(500).json({ message: error.message });\r\n   }\r\n"
                },
                {
                    "date": 1741096724867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n };\r\n \r\n const getCompanies = async (req, res) => {\r\n   try {\r\n-    const companies = await Company.f\r\n+    const companies = await Company.find();\r\n     res.status(200).json(companies);\r\n   } catch (error) {\r\n     res.status(500).json({ message: error.message });\r\n   }\r\n@@ -40,28 +40,30 @@\n   }\r\n };\r\n \r\n const updateCompany = async (req, res) => {\r\n-  try {\r\n-    const company = await Company.findById(req.params.id);\r\n-    if (!company) {\r\n-      return res.status(404).json({ message: \"Entreprise non trouvÃ©e\" });\r\n+    const { id } = req.params; // RÃ©cupÃ¨re l'id de l'entreprise Ã  partir des paramÃ¨tres d'URL\r\n+    const { name, address, email, password, phone, createdAt } = req.body; // RÃ©cupÃ¨re les nouvelles donnÃ©es\r\n+  \r\n+    try {\r\n+      // Rechercher l'entreprise par son ID et la mettre Ã  jour\r\n+      const company = await Company.findByIdAndUpdate(\r\n+        id, \r\n+        { name, address, email, password, phone, createdAt },\r\n+        { new: true } // Retourne le document mis Ã  jour\r\n+      );\r\n+  \r\n+      if (!company) {\r\n+        return res.status(404).json({ message: 'Company not found' });\r\n+      }\r\n+  \r\n+      return res.status(200).json(company);\r\n+    } catch (error) {\r\n+      console.error(error.message);\r\n+      return res.status(500).json({ message: 'Server Error' });\r\n     }\r\n+  };\r\n \r\n-    const { name, address, email, phone, password } = req.body;\r\n-    company.name = name || company.name;\r\n-    company.address = address || company.address;\r\n-    company.email = email || company.email;\r\n-    company.phone = phone || company.phone;\r\n-    company.password = password || company.password;\r\n-\r\n-    await company.save();\r\n-    res.status(200).json(company);\r\n-  } catch (error) {\r\n-    res.status(500).json({ message: error.message });\r\n-  }\r\n-};\r\n-\r\n const deleteCompany = async (req, res) => {\r\n   try {\r\n     const company = await Company.findById(req.params.id);\r\n     if (!company) {\r\n"
                },
                {
                    "date": 1741096733081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n   }\r\n };\r\n \r\n const updateCompany = async (req, res) => {\r\n-    const { id } = req.params; // RÃ©cupÃ¨re l'id de l'entreprise Ã  partir des paramÃ¨tres d'URL\r\n+    const { id } = req.params; \r\n     const { name, address, email, password, phone, createdAt } = req.body; // RÃ©cupÃ¨re les nouvelles donnÃ©es\r\n   \r\n     try {\r\n       // Rechercher l'entreprise par son ID et la mettre Ã  jour\r\n"
                },
                {
                    "date": 1741164930436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,17 @@\n-const Company = require('../models/Company');\r\n+const Company = require(\"../models/Company\");\r\n \r\n const createCompany = async (req, res) => {\r\n   try {\r\n-    const { name, address, email, phone, password } = req.body;\r\n+    const { name, address, email, phone } = req.body;\r\n+    const ownerId = req.user.sub; // RÃ©cupÃ©ration de l'ID utilisateur Keycloak\r\n \r\n-    // VÃ©rifier si l'entreprise existe dÃ©jÃ \r\n     const existingCompany = await Company.findOne({ email });\r\n     if (existingCompany) {\r\n-      return res.status(400).json({ message: 'Une entreprise avec cet email existe dÃ©jÃ .' });\r\n+      return res.status(400).json({ message: \"Entreprise dÃ©jÃ  existante.\" });\r\n     }\r\n \r\n-    const newCompany = new Company({ name, address, email, phone, password });\r\n+    const newCompany = new Company({ name, address, email, phone, ownerId });\r\n     await newCompany.save();\r\n \r\n     res.status(201).json(newCompany);\r\n   } catch (error) {\r\n@@ -40,37 +40,48 @@\n   }\r\n };\r\n \r\n const updateCompany = async (req, res) => {\r\n-    const { id } = req.params; \r\n-    const { name, address, email, password, phone, createdAt } = req.body; // RÃ©cupÃ¨re les nouvelles donnÃ©es\r\n-  \r\n-    try {\r\n-      // Rechercher l'entreprise par son ID et la mettre Ã  jour\r\n-      const company = await Company.findByIdAndUpdate(\r\n-        id, \r\n-        { name, address, email, password, phone, createdAt },\r\n-        { new: true } // Retourne le document mis Ã  jour\r\n-      );\r\n-  \r\n-      if (!company) {\r\n-        return res.status(404).json({ message: 'Company not found' });\r\n-      }\r\n-  \r\n-      return res.status(200).json(company);\r\n-    } catch (error) {\r\n-      console.error(error.message);\r\n-      return res.status(500).json({ message: 'Server Error' });\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const { name, address, email, phone } = req.body;\r\n+    const ownerId = req.user.sub;\r\n+\r\n+    const company = await Company.findById(id);\r\n+    if (!company) {\r\n+      return res.status(404).json({ message: \"Entreprise non trouvÃ©e\" });\r\n     }\r\n-  };\r\n \r\n+    if (company.ownerId !== ownerId) {\r\n+      return res.status(403).json({ message: \"AccÃ¨s refusÃ©.\" });\r\n+    }\r\n+\r\n+    company.name = name || company.name;\r\n+    company.address = address || company.address;\r\n+    company.email = email || company.email;\r\n+    company.phone = phone || company.phone;\r\n+\r\n+    await company.save();\r\n+    res.status(200).json(company);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n const deleteCompany = async (req, res) => {\r\n   try {\r\n-    const company = await Company.findById(req.params.id);\r\n+    const { id } = req.params;\r\n+    const ownerId = req.user.sub;\r\n+\r\n+    const company = await Company.findById(id);\r\n     if (!company) {\r\n       return res.status(404).json({ message: \"Entreprise non trouvÃ©e\" });\r\n     }\r\n \r\n+    if (company.ownerId !== ownerId) {\r\n+      return res.status(403).json({ message: \"AccÃ¨s refusÃ©.\" });\r\n+    }\r\n+\r\n     await company.deleteOne();\r\n     res.status(200).json({ message: \"Entreprise supprimÃ©e avec succÃ¨s\" });\r\n   } catch (error) {\r\n     res.status(500).json({ message: error.message });\r\n"
                },
                {
                    "date": 1742124762124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n const createCompany = async (req, res) => {\r\n   try {\r\n     const { name, address, email, phone } = req.body;\r\n-    const ownerId = req.user.sub; // RÃ©cupÃ©ration de l'ID utilisateur Keycloak\r\n+    const ownerId = req.kauth.grant.access_token.content.sub; // âœ… Fix Keycloak\r\n \r\n     const existingCompany = await Company.findOne({ email });\r\n     if (existingCompany) {\r\n       return res.status(400).json({ message: \"Entreprise dÃ©jÃ  existante.\" });\r\n@@ -18,8 +18,9 @@\n     res.status(500).json({ message: error.message });\r\n   }\r\n };\r\n \r\n+\r\n const getCompanies = async (req, res) => {\r\n   try {\r\n     const companies = await Company.find();\r\n     res.status(200).json(companies);\r\n"
                },
                {
                    "date": 1742124769117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n const createCompany = async (req, res) => {\r\n   try {\r\n     const { name, address, email, phone } = req.body;\r\n-    const ownerId = req.kauth.grant.access_token.content.sub; // âœ… Fix Keycloak\r\n+    const ownerId = req.kauth.grant.access_token.content.sub; \r\n \r\n     const existingCompany = await Company.findOne({ email });\r\n     if (existingCompany) {\r\n       return res.status(400).json({ message: \"Entreprise dÃ©jÃ  existante.\" });\r\n"
                },
                {
                    "date": 1742141223626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n const createCompany = async (req, res) => {\r\n   try {\r\n     const { name, address, email, phone } = req.body;\r\n-    const ownerId = req.kauth.grant.access_token.content.sub; \r\n+    const ownerId = req.kauth.grant.access_token.content.sub; // âœ… Fix Keycloak\r\n \r\n     const existingCompany = await Company.findOne({ email });\r\n     if (existingCompany) {\r\n       return res.status(400).json({ message: \"Entreprise dÃ©jÃ  existante.\" });\r\n"
                },
                {
                    "date": 1742142369551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n const createCompany = async (req, res) => {\r\n   try {\r\n     const { name, address, email, phone } = req.body;\r\n-    const ownerId = req.kauth.grant.access_token.content.sub; // âœ… Fix Keycloak\r\n+    const ownerId = req.user.sub; // RÃ©cupÃ©ration de l'ID utilisateur Keycloak\r\n \r\n     const existingCompany = await Company.findOne({ email });\r\n     if (existingCompany) {\r\n       return res.status(400).json({ message: \"Entreprise dÃ©jÃ  existante.\" });\r\n@@ -18,9 +18,8 @@\n     res.status(500).json({ message: error.message });\r\n   }\r\n };\r\n \r\n-\r\n const getCompanies = async (req, res) => {\r\n   try {\r\n     const companies = await Company.find();\r\n     res.status(200).json(companies);\r\n@@ -87,9 +86,26 @@\n   } catch (error) {\r\n     res.status(500).json({ message: error.message });\r\n   }\r\n };\r\n+const createCompany = async (req, res) => {\r\n+  try {\r\n+    const { name, address, email, phone } = req.body;\r\n+    const ownerId = req.user.sub; // RÃ©cupÃ©ration de l'ID utilisateur Keycloak\r\n \r\n+    const existingCompany = await Company.findOne({ email });\r\n+    if (existingCompany) {\r\n+      return res.status(400).json({ message: \"Entreprise dÃ©jÃ  existante.\" });\r\n+    }\r\n+\r\n+    const newCompany = new Company({ name, address, email, phone, ownerId });\r\n+    await newCompany.save();\r\n+\r\n+    res.status(201).json(newCompany);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n module.exports = {\r\n   createCompany,\r\n   getCompanies,\r\n   getCompanyById,\r\n"
                },
                {
                    "date": 1742142379891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n   } catch (error) {\r\n     res.status(500).json({ message: error.message });\r\n   }\r\n };\r\n-const createCompany = async (req, res) => {\r\n+const getUsers = async (req, res) => {\r\n   try {\r\n     const { name, address, email, phone } = req.body;\r\n     const ownerId = req.user.sub; // RÃ©cupÃ©ration de l'ID utilisateur Keycloak\r\n \r\n"
                },
                {
                    "date": 1742142403367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,23 +88,13 @@\n   }\r\n };\r\n const getUsers = async (req, res) => {\r\n   try {\r\n-    const { name, address, email, phone } = req.body;\r\n-    const ownerId = req.user.sub; // RÃ©cupÃ©ration de l'ID utilisateur Keycloak\r\n-\r\n-    const existingCompany = await Company.findOne({ email });\r\n-    if (existingCompany) {\r\n-      return res.status(400).json({ message: \"Entreprise dÃ©jÃ  existante.\" });\r\n-    }\r\n-\r\n-    const newCompany = new Company({ name, address, email, phone, ownerId });\r\n-    await newCompany.save();\r\n-\r\n-    res.status(201).json(newCompany);\r\n-  } catch (error) {\r\n-    res.status(500).json({ message: error.message });\r\n-  }\r\n+    const users = await axios.get(\"http://localhost:8080/admin/realms/Architect-Agency/users\");\r\n+    res.json(users.data);\r\n+} catch (err) {\r\n+    res.status(500).json({ error: err.message });\r\n+}\r\n };\r\n module.exports = {\r\n   createCompany,\r\n   getCompanies,\r\n"
                },
                {
                    "date": 1742142409765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n   }\r\n };\r\n const getUsers = async (req, res) => {\r\n   try {\r\n-    const users = await axios.get(\"http://localhost:8080/admin/realms/Architect-Agency/users\");\r\n+    const users = await axios.get(\"https://localhost:8080/admin/realms/Architect-Agency/users\");\r\n     res.json(users.data);\r\n } catch (err) {\r\n     res.status(500).json({ error: err.message });\r\n }\r\n"
                },
                {
                    "date": 1742142435688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n   }\r\n };\r\n const getUsers = async (req, res) => {\r\n   try {\r\n-    const users = await axios.get(\"https://localhost:8080/admin/realms/Architect-Agency/users\");\r\n+    const users = await axios.get(\"https://localhost:8443/admin/realms/ArchiManage/users\");\r\n     res.json(users.data);\r\n } catch (err) {\r\n     res.status(500).json({ error: err.message });\r\n }\r\n"
                },
                {
                    "date": 1742142446648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,6 +99,7 @@\n   createCompany,\r\n   getCompanies,\r\n   getCompanyById,\r\n   updateCompany,\r\n-  deleteCompany\r\n+  deleteCompany,\r\n+  \r\n };\r\n"
                },
                {
                    "date": 1742513598137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n const Company = require(\"../models/Company\");\r\n-\r\n+const axios = require(\"axios\");\r\n const createCompany = async (req, res) => {\r\n   try {\r\n     const { name, address, email, phone } = req.body;\r\n     const ownerId = req.user.sub; // RÃ©cupÃ©ration de l'ID utilisateur Keycloak\r\n@@ -100,6 +100,6 @@\n   getCompanies,\r\n   getCompanyById,\r\n   updateCompany,\r\n   deleteCompany,\r\n-  \r\n+  getUsers\r\n };\r\n"
                },
                {
                    "date": 1742513613539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,9 @@\n const axios = require(\"axios\");\r\n const createCompany = async (req, res) => {\r\n   try {\r\n     const { name, address, email, phone } = req.body;\r\n-    const ownerId = req.user.sub; // RÃ©cupÃ©ration de l'ID utilisateur Keycloak\r\n-\r\n+    const ownerId = req.user.sub; \r\n     const existingCompany = await Company.findOne({ email });\r\n     if (existingCompany) {\r\n       return res.status(400).json({ message: \"Entreprise dÃ©jÃ  existante.\" });\r\n     }\r\n"
                },
                {
                    "date": 1742513636874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n \r\n     const newCompany = new Company({ name, address, email, phone, ownerId });\r\n     await newCompany.save();\r\n \r\n+    \r\n     res.status(201).json(newCompany);\r\n   } catch (error) {\r\n     res.status(500).json({ message: error.message });\r\n   }\r\n"
                },
                {
                    "date": 1742513658176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,17 @@\n \r\n     const newCompany = new Company({ name, address, email, phone, ownerId });\r\n     await newCompany.save();\r\n \r\n-    \r\n+    await axios.post(\r\n+      `${process.env.KEYCLOAK_URL}/admin/realms/ArchiManage/groups`,\r\n+      { name: newCompany._id.toString() },\r\n+      {\r\n+        headers: {\r\n+          Authorization: `Bearer ${req.headers.authorization.split(\" \")[1]}`,\r\n+        },\r\n+      }\r\n+    );\r\n     res.status(201).json(newCompany);\r\n   } catch (error) {\r\n     res.status(500).json({ message: error.message });\r\n   }\r\n"
                },
                {
                    "date": 1742514021248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,14 +11,14 @@\n \r\n     const newCompany = new Company({ name, address, email, phone, ownerId });\r\n     await newCompany.save();\r\n \r\n-    await axios.post(\r\n+    const keycloakGroup = await axios.post(\r\n       `${process.env.KEYCLOAK_URL}/admin/realms/ArchiManage/groups`,\r\n-      { name: newCompany._id.toString() },\r\n+      { name },\r\n       {\r\n         headers: {\r\n-          Authorization: `Bearer ${req.headers.authorization.split(\" \")[1]}`,\r\n+          Authorization: `Bearer ${req.user.access_token}`, // Token admin Keycloak\r\n         },\r\n       }\r\n     );\r\n     res.status(201).json(newCompany);\r\n"
                },
                {
                    "date": 1742514034209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,17 +11,9 @@\n \r\n     const newCompany = new Company({ name, address, email, phone, ownerId });\r\n     await newCompany.save();\r\n \r\n-    const keycloakGroup = await axios.post(\r\n-      `${process.env.KEYCLOAK_URL}/admin/realms/ArchiManage/groups`,\r\n-      { name },\r\n-      {\r\n-        headers: {\r\n-          Authorization: `Bearer ${req.user.access_token}`, // Token admin Keycloak\r\n-        },\r\n-      }\r\n-    );\r\n+    \r\n     res.status(201).json(newCompany);\r\n   } catch (error) {\r\n     res.status(500).json({ message: error.message });\r\n   }\r\n"
                },
                {
                    "date": 1742514050756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,18 @@\n     const existingCompany = await Company.findOne({ email });\r\n     if (existingCompany) {\r\n       return res.status(400).json({ message: \"Entreprise dÃ©jÃ  existante.\" });\r\n     }\r\n-\r\n+    const keycloakGroup = await axios.post(\r\n+      `${process.env.KEYCLOAK_URL}/admin/realms/ArchiManage/groups`,\r\n+      { name },\r\n+      {\r\n+        headers: {\r\n+          Authorization: `Bearer ${req.user.access_token}`, // Token admin Keycloak\r\n+        },\r\n+      }\r\n+    );\r\n+    \r\n     const newCompany = new Company({ name, address, email, phone, ownerId });\r\n     await newCompany.save();\r\n \r\n     \r\n"
                },
                {
                    "date": 1742514057318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,12 +16,17 @@\n           Authorization: `Bearer ${req.user.access_token}`, // Token admin Keycloak\r\n         },\r\n       }\r\n     );\r\n-    \r\n-    const newCompany = new Company({ name, address, email, phone, ownerId });\r\n-    await newCompany.save();\r\n \r\n+    const newCompany = new Company({\r\n+      name,\r\n+      address,\r\n+      email,\r\n+      phone,\r\n+      keycloakGroupId: keycloakGroup.data.id, // Stocker l'ID du groupe\r\n+    });await newCompany.save();\r\n+\r\n     \r\n     res.status(201).json(newCompany);\r\n   } catch (error) {\r\n     res.status(500).json({ message: error.message });\r\n"
                },
                {
                    "date": 1742514086694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,37 @@\n } catch (err) {\r\n     res.status(500).json({ error: err.message });\r\n }\r\n };\r\n+const addUserToCompany = async (req, res) => {\r\n+  try {\r\n+    const { companyId } = req.params;\r\n+    const { userId, name, email, phone } = req.body;\r\n \r\n+    const company = await Company.findById(companyId);\r\n+    if (!company) {\r\n+      return res.status(404).json({ message: \"Entreprise non trouvÃ©e\" });\r\n+    }\r\n+\r\n+    // Ajouter l'utilisateur au groupe Keycloak\r\n+    await axios.put(\r\n+      `${process.env.KEYCLOAK_URL}/admin/realms/ArchiManage/users/${userId}/groups/${company.keycloakGroupId}`,\r\n+      {},\r\n+      {\r\n+        headers: {\r\n+          Authorization: `Bearer ${req.user.access_token}`, // Token admin Keycloak\r\n+        },\r\n+      }\r\n+    );\r\n+\r\n+    company.users.push({ userId, name, email, phone });\r\n+    await company.save();\r\n+\r\n+    res.status(200).json(company);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n module.exports = {\r\n   createCompany,\r\n   getCompanies,\r\n   getCompanyById,\r\n"
                },
                {
                    "date": 1743068341203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,243 @@\n+const Company = require(\"../models/Company\");\r\n+const axios = require(\"axios\");\r\n+const keycloakConfig = require(\"../config/keycloak\");\r\n+const bcrypt = require('bcrypt');\r\n+const saltRounds = 10;\r\n+const { protect, requireRole } = require(\"../middlewares/authmiddleware\");\r\n+const createCompany = async (req, res) => {\r\n+  try {\r\n+    // Validation Ã©tendue\r\n+    const { name, address, email, phone, password } = req.body;\r\n+    const requiredFields = { name, address, email, phone, password };\r\n+    \r\n+    for (const [field, value] of Object.entries(requiredFields)) {\r\n+      if (!value) {\r\n+        return res.status(400).json({ error: `Le champ ${field} est requis` });\r\n+      }\r\n+    }\r\n+\r\n+    // VÃ©rification format email\r\n+    if (!/^\\S+@\\S+\\.\\S+$/.test(email)) {\r\n+      return res.status(400).json({ error: \"Format d'email invalide\" });\r\n+    }\r\n+\r\n+    // Hash du mot de passe\r\n+    const hashedPassword = await bcrypt.hash(password, saltRounds);\r\n+\r\n+    // CrÃ©ation du groupe dans Keycloak\r\n+    const adminToken = await getAdminToken();\r\n+    const groupResponse = await axios.post(\r\n+      `${keycloakConfig.authServerUrl}/admin/realms/${keycloakConfig.realm}/groups`,\r\n+      { name },\r\n+      {\r\n+        headers: {\r\n+          Authorization: `Bearer ${adminToken}`,\r\n+          'Content-Type': 'application/json'\r\n+        }\r\n+      }\r\n+    );\r\n+\r\n+    // CrÃ©ation en DB\r\n+    const company = new Company({\r\n+      name,\r\n+      address,\r\n+      email,\r\n+      phone,\r\n+      password: hashedPassword,\r\n+      keycloakGroupId: groupResponse.data.id\r\n+    });\r\n+\r\n+    await company.save();\r\n+    return res.status(201).json({\r\n+      _id: company._id,\r\n+      name: company.name,\r\n+      email: company.email,\r\n+      keycloakGroupId: company.keycloakGroupId\r\n+      \r\n+    });\r\n+\r\n+  } catch (err) {\r\n+    // Gestion des erreurs \r\n+    if (err.code === 11000) {\r\n+      return res.status(409).json({ \r\n+        error: \"Conflit\",\r\n+        message: \"Une entreprise avec ce nom ou cet email existe dÃ©jÃ \"\r\n+      });\r\n+    }\r\n+    if (err.response?.status === 409) {\r\n+      return res.status(409).json({ \r\n+        error: \"Conflit Keycloak\", \r\n+        message: \"Un groupe avec ce nom existe dÃ©jÃ  dans Keycloak\" \r\n+      });\r\n+    }\r\n+    \r\n+    console.error('Erreur crÃ©ation company:', err);\r\n+    res.status(500).json({ \r\n+      error: \"Erreur serveur\",\r\n+      message: \"Une erreur est survenue lors de la crÃ©ation de l'entreprise\"\r\n+    });\r\n+  }\r\n+};\r\n+\r\n+// Fonction pour obtenir le token admin\r\n+async function getAdminToken() {\r\n+  try {\r\n+    const response = await axios.post(\r\n+      `${keycloakConfig.authServerUrl}/realms/master/protocol/openid-connect/token`,\r\n+      new URLSearchParams({\r\n+        username: keycloakConfig.adminUser,\r\n+        password: keycloakConfig.adminPassword,\r\n+        client_id: 'admin-cli',\r\n+        grant_type: 'password'\r\n+      }),\r\n+      {\r\n+        headers: {\r\n+          'Content-Type': 'application/x-www-form-urlencoded'\r\n+        }\r\n+      }\r\n+    );\r\n+    return response.data.access_token;\r\n+  } catch (err) {\r\n+    console.error('Erreur lors de la rÃ©cupÃ©ration du token admin:', err.response?.data || err.message);\r\n+    throw new Error('Impossible de rÃ©cupÃ©rer le token admin Keycloak');\r\n+  }\r\n+}\r\n+\r\n+\r\n+\r\n+const getCompanies = async (req, res) => {\r\n+  try {\r\n+      let companies;\r\n+      \r\n+      if (req.user.roles.includes('ADMIN')) {\r\n+          // Les admins voient toutes les entreprises\r\n+          companies = await Company.find();\r\n+      } else {\r\n+          // Les autres utilisateurs ne voient que les entreprises de leurs groupes\r\n+          const userGroups = req.user.groups || [];\r\n+          companies = await Company.find({ \r\n+              keycloakGroupId: { $in: userGroups } \r\n+          });\r\n+      }\r\n+      \r\n+      res.status(200).json(companies);\r\n+  } catch (error) {\r\n+      res.status(500).json({ \r\n+          error: \"Erreur lors de la rÃ©cupÃ©ration des entreprises\",\r\n+          details: error.message \r\n+      });\r\n+  }\r\n+};\r\n+\r\n+const getCompanyById = async (req, res) => {\r\n+  try {\r\n+    const company = await Company.findById(req.params.id);\r\n+    if (!company) {\r\n+      return res.status(404).json({ message: \"Entreprise non trouvÃ©e\" });\r\n+    }\r\n+    res.status(200).json(company);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n+const updateCompany = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const { name, address, email, phone } = req.body;\r\n+    const ownerId = req.user.sub;\r\n+\r\n+    const company = await Company.findById(id);\r\n+    if (!company) {\r\n+      return res.status(404).json({ message: \"Entreprise non trouvÃ©e\" });\r\n+    }\r\n+\r\n+    if (company.ownerId !== ownerId) {\r\n+      return res.status(403).json({ message: \"AccÃ¨s refusÃ©.\" });\r\n+    }\r\n+\r\n+    company.name = name || company.name;\r\n+    company.address = address || company.address;\r\n+    company.email = email || company.email;\r\n+    company.phone = phone || company.phone;\r\n+\r\n+    await company.save();\r\n+    res.status(200).json(company);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n+const deleteCompany = async (req, res) => {\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const ownerId = req.user.sub;\r\n+\r\n+    const company = await Company.findById(id);\r\n+    if (!company) {\r\n+      return res.status(404).json({ message: \"Entreprise non trouvÃ©e\" });\r\n+    }\r\n+\r\n+    if (company.ownerId !== ownerId) {\r\n+      return res.status(403).json({ message: \"AccÃ¨s refusÃ©.\" });\r\n+    }\r\n+\r\n+    await company.deleteOne();\r\n+    res.status(200).json({ message: \"Entreprise supprimÃ©e avec succÃ¨s\" });\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+const getUsers = async (req, res) => {\r\n+  try {\r\n+    const users = await axios.get(`${keycloakConfig.authServerUrl}/admin/realms/${keycloakConfig.realm}/users`,\r\n+            {\r\n+                headers: {\r\n+                    Authorization: `Bearer ${await getAdminToken()}`\r\n+                }\r\n+            }\r\n+\r\n+    );\r\n+    res.json(users.data);\r\n+} catch (err) {\r\n+    res.status(500).json({ error: err.message });\r\n+}\r\n+};\r\n+const addUserToCompany = async (req, res) => {\r\n+  try {\r\n+    const { companyId } = req.params;\r\n+    const { userId, name, email, phone } = req.body;\r\n+\r\n+    const company = await Company.findById(companyId);\r\n+    if (!company) {\r\n+      return res.status(404).json({ message: \"Entreprise non trouvÃ©e\" });\r\n+    }\r\n+\r\n+    // Ajouter l'utilisateur au groupe Keycloak\r\n+    await axios.put(\r\n+      `${process.env.KEYCLOAK_URL}/admin/realms/ArchiManage/users/${userId}/groups/${company.keycloakGroupId}`,\r\n+      {},\r\n+      {\r\n+        headers: {\r\n+          Authorization: `Bearer ${req.user.access_token}`, // Token admin Keycloak\r\n+        },\r\n+      }\r\n+    );\r\n+\r\n+    company.users.push({ userId, name, email, phone });\r\n+    await company.save();\r\n+\r\n+    res.status(200).json(company);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+module.exports = {\r\n+  createCompany,\r\n+  getCompanies,\r\n+  getCompanyById,\r\n+  updateCompany,\r\n+  deleteCompany,\r\n+  getUsers,\r\n+  addUserToCompany\r\n+};\r\n"
                }
            ],
            "date": 1741091756103,
            "name": "Commit-0",
            "content": "const Company = require('../models/company.model');\r\nconst UserCompany = require('../models/userCompany.model');\r\n\r\nexports.createCompany = async (req, res) => {\r\n    try {\r\n        const { name } = req.body;\r\n        const company = new Company({ name });\r\n        await company.save();\r\n        res.status(201).json(company);\r\n    } catch (error) {\r\n        res.status(500).json({ message: error.message });\r\n    }\r\n};\r\n\r\nexports.assignUserToCompany = async (req, res) => {\r\n    try {\r\n        const { userId, companyId } = req.body;\r\n        const userCompany = new UserCompany({ userId, companyId });\r\n        await userCompany.save();\r\n        res.status(201).json(userCompany);\r\n    } catch (error) {\r\n        res.status(500).json({ message: error.message });\r\n    }\r\n};\r\n\r\nexports.getCompanies = async (req, res) => {\r\n    try {\r\n        const companies = await Company.find();\r\n        res.status(200).json(companies);\r\n    } catch (error) {\r\n        res.status(500).json({ message: error.message });\r\n    }\r\n};\r\n"
        }
    ]
}