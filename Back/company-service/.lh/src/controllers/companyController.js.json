{
    "sourceFile": "src/controllers/companyController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1741091756103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741091829243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const Company = require('../models/company.model');\r\n+const Company = require('../models/company');\r\n const UserCompany = require('../models/userCompany.model');\r\n \r\n exports.createCompany = async (req, res) => {\r\n     try {\r\n"
                },
                {
                    "date": 1741091834442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const Company = require('../models/company');\r\n+const Company = require('../models/compan');\r\n const UserCompany = require('../models/userCompany.model');\r\n \r\n exports.createCompany = async (req, res) => {\r\n     try {\r\n"
                },
                {
                    "date": 1741091841401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-const Company = require('../models/compan');\r\n-const UserCompany = require('../models/userCompany.model');\r\n+const Company = require('../models/Company');\r\n+const UserCompany = require('../models/userCompany');\r\n \r\n exports.createCompany = async (req, res) => {\r\n     try {\r\n         const { name } = req.body;\r\n"
                },
                {
                    "date": 1741094837800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,89 @@\n const Company = require('../models/Company');\r\n-const UserCompany = require('../models/userCompany');\r\n \r\n-exports.createCompany = async (req, res) => {\r\n-    try {\r\n-        const { name } = req.body;\r\n-        const company = new Company({ name });\r\n-        await company.save();\r\n-        res.status(201).json(company);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: error.message });\r\n+// ðŸ”¹ CrÃ©er une nouvelle entreprise\r\n+const createCompany = async (req, res) => {\r\n+  try {\r\n+    const { name, address, email, phone, password } = req.body;\r\n+\r\n+    // VÃ©rifier si l'entreprise existe dÃ©jÃ \r\n+    const existingCompany = await Company.findOne({ email });\r\n+    if (existingCompany) {\r\n+      return res.status(400).json({ message: 'Une entreprise avec cet email existe dÃ©jÃ .' });\r\n     }\r\n+\r\n+    const newCompany = new Company({ name, address, email, phone, password });\r\n+    await newCompany.save();\r\n+\r\n+    res.status(201).json(newCompany);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n };\r\n \r\n-exports.assignUserToCompany = async (req, res) => {\r\n-    try {\r\n-        const { userId, companyId } = req.body;\r\n-        const userCompany = new UserCompany({ userId, companyId });\r\n-        await userCompany.save();\r\n-        res.status(201).json(userCompany);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: error.message });\r\n+// ðŸ”¹ RÃ©cupÃ©rer toutes les entreprises\r\n+const getCompanies = async (req, res) => {\r\n+  try {\r\n+    const companies = await Company.find();\r\n+    res.status(200).json(companies);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n+// ðŸ”¹ RÃ©cupÃ©rer une entreprise par ID\r\n+const getCompanyById = async (req, res) => {\r\n+  try {\r\n+    const company = await Company.findById(req.params.id);\r\n+    if (!company) {\r\n+      return res.status(404).json({ message: \"Entreprise non trouvÃ©e\" });\r\n     }\r\n+    res.status(200).json(company);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n };\r\n \r\n-exports.getCompanies = async (req, res) => {\r\n-    try {\r\n-        const companies = await Company.find();\r\n-        res.status(200).json(companies);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: error.message });\r\n+// ðŸ”¹ Mettre Ã  jour une entreprise\r\n+const updateCompany = async (req, res) => {\r\n+  try {\r\n+    const company = await Company.findById(req.params.id);\r\n+    if (!company) {\r\n+      return res.status(404).json({ message: \"Entreprise non trouvÃ©e\" });\r\n     }\r\n+\r\n+    const { name, address, email, phone, password } = req.body;\r\n+    company.name = name || company.name;\r\n+    company.address = address || company.address;\r\n+    company.email = email || company.email;\r\n+    company.phone = phone || company.phone;\r\n+    company.password = password || company.password;\r\n+\r\n+    await company.save();\r\n+    res.status(200).json(company);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n };\r\n+\r\n+// ðŸ”¹ Supprimer une entreprise\r\n+const deleteCompany = async (req, res) => {\r\n+  try {\r\n+    const company = await Company.findById(req.params.id);\r\n+    if (!company) {\r\n+      return res.status(404).json({ message: \"Entreprise non trouvÃ©e\" });\r\n+    }\r\n+\r\n+    await company.deleteOne();\r\n+    res.status(200).json({ message: \"Entreprise supprimÃ©e avec succÃ¨s\" });\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n+module.exports = {\r\n+  createCompany,\r\n+  getCompanies,\r\n+  getCompanyById,\r\n+  updateCompany,\r\n+  deleteCompany\r\n+};\r\n"
                },
                {
                    "date": 1741094854211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n const Company = require('../models/Company');\r\n \r\n-// ðŸ”¹ CrÃ©er une nouvelle entreprise\r\n const createCompany = async (req, res) => {\r\n   try {\r\n     const { name, address, email, phone, password } = req.body;\r\n \r\n"
                },
                {
                    "date": 1741094860747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,8 @@\n     res.status(500).json({ message: error.message });\r\n   }\r\n };\r\n \r\n-// ðŸ”¹ RÃ©cupÃ©rer toutes les entreprises\r\n const getCompanies = async (req, res) => {\r\n   try {\r\n     const companies = await Company.find();\r\n     res.status(200).json(companies);\r\n"
                },
                {
                    "date": 1741094868754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,8 @@\n     res.status(500).json({ message: error.message });\r\n   }\r\n };\r\n \r\n-// ðŸ”¹ RÃ©cupÃ©rer une entreprise par ID\r\n const getCompanyById = async (req, res) => {\r\n   try {\r\n     const company = await Company.findById(req.params.id);\r\n     if (!company) {\r\n@@ -40,9 +39,8 @@\n     res.status(500).json({ message: error.message });\r\n   }\r\n };\r\n \r\n-// ðŸ”¹ Mettre Ã  jour une entreprise\r\n const updateCompany = async (req, res) => {\r\n   try {\r\n     const company = await Company.findById(req.params.id);\r\n     if (!company) {\r\n"
                },
                {
                    "date": 1741094875916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,8 @@\n     res.status(500).json({ message: error.message });\r\n   }\r\n };\r\n \r\n-// ðŸ”¹ Supprimer une entreprise\r\n const deleteCompany = async (req, res) => {\r\n   try {\r\n     const company = await Company.findById(req.params.id);\r\n     if (!company) {\r\n"
                },
                {
                    "date": 1741095178297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,8 @@\n     const existingCompany = await Company.findOne({ email });\r\n     if (existingCompany) {\r\n       return res.status(400).json({ message: 'Une entreprise avec cet email existe dÃ©jÃ .' });\r\n     }\r\n-\r\n     const newCompany = new Company({ name, address, email, phone, password });\r\n     await newCompany.save();\r\n \r\n     res.status(201).json(newCompany);\r\n"
                },
                {
                    "date": 1741095190512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n     const existingCompany = await Company.findOne({ email });\r\n     if (existingCompany) {\r\n       return res.status(400).json({ message: 'Une entreprise avec cet email existe dÃ©jÃ .' });\r\n     }\r\n+\r\n     const newCompany = new Company({ name, address, email, phone, password });\r\n     await newCompany.save();\r\n \r\n     res.status(201).json(newCompany);\r\n"
                },
                {
                    "date": 1741095211988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n };\r\n \r\n const getCompanies = async (req, res) => {\r\n   try {\r\n-    const companies = await Company.find();\r\n+    const companies = await Company\r\n     res.status(200).json(companies);\r\n   } catch (error) {\r\n     res.status(500).json({ message: error.message });\r\n   }\r\n"
                },
                {
                    "date": 1741095220228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n };\r\n \r\n const getCompanies = async (req, res) => {\r\n   try {\r\n-    const companies = await Company\r\n+    const companies = await Company.f\r\n     res.status(200).json(companies);\r\n   } catch (error) {\r\n     res.status(500).json({ message: error.message });\r\n   }\r\n"
                },
                {
                    "date": 1741096724867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n };\r\n \r\n const getCompanies = async (req, res) => {\r\n   try {\r\n-    const companies = await Company.f\r\n+    const companies = await Company.find();\r\n     res.status(200).json(companies);\r\n   } catch (error) {\r\n     res.status(500).json({ message: error.message });\r\n   }\r\n@@ -40,28 +40,30 @@\n   }\r\n };\r\n \r\n const updateCompany = async (req, res) => {\r\n-  try {\r\n-    const company = await Company.findById(req.params.id);\r\n-    if (!company) {\r\n-      return res.status(404).json({ message: \"Entreprise non trouvÃ©e\" });\r\n+    const { id } = req.params; // RÃ©cupÃ¨re l'id de l'entreprise Ã  partir des paramÃ¨tres d'URL\r\n+    const { name, address, email, password, phone, createdAt } = req.body; // RÃ©cupÃ¨re les nouvelles donnÃ©es\r\n+  \r\n+    try {\r\n+      // Rechercher l'entreprise par son ID et la mettre Ã  jour\r\n+      const company = await Company.findByIdAndUpdate(\r\n+        id, \r\n+        { name, address, email, password, phone, createdAt },\r\n+        { new: true } // Retourne le document mis Ã  jour\r\n+      );\r\n+  \r\n+      if (!company) {\r\n+        return res.status(404).json({ message: 'Company not found' });\r\n+      }\r\n+  \r\n+      return res.status(200).json(company);\r\n+    } catch (error) {\r\n+      console.error(error.message);\r\n+      return res.status(500).json({ message: 'Server Error' });\r\n     }\r\n+  };\r\n \r\n-    const { name, address, email, phone, password } = req.body;\r\n-    company.name = name || company.name;\r\n-    company.address = address || company.address;\r\n-    company.email = email || company.email;\r\n-    company.phone = phone || company.phone;\r\n-    company.password = password || company.password;\r\n-\r\n-    await company.save();\r\n-    res.status(200).json(company);\r\n-  } catch (error) {\r\n-    res.status(500).json({ message: error.message });\r\n-  }\r\n-};\r\n-\r\n const deleteCompany = async (req, res) => {\r\n   try {\r\n     const company = await Company.findById(req.params.id);\r\n     if (!company) {\r\n"
                },
                {
                    "date": 1741096733081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n   }\r\n };\r\n \r\n const updateCompany = async (req, res) => {\r\n-    const { id } = req.params; // RÃ©cupÃ¨re l'id de l'entreprise Ã  partir des paramÃ¨tres d'URL\r\n+    const { id } = req.params; \r\n     const { name, address, email, password, phone, createdAt } = req.body; // RÃ©cupÃ¨re les nouvelles donnÃ©es\r\n   \r\n     try {\r\n       // Rechercher l'entreprise par son ID et la mettre Ã  jour\r\n"
                },
                {
                    "date": 1741164930436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,17 @@\n-const Company = require('../models/Company');\r\n+const Company = require(\"../models/Company\");\r\n \r\n const createCompany = async (req, res) => {\r\n   try {\r\n-    const { name, address, email, phone, password } = req.body;\r\n+    const { name, address, email, phone } = req.body;\r\n+    const ownerId = req.user.sub; // RÃ©cupÃ©ration de l'ID utilisateur Keycloak\r\n \r\n-    // VÃ©rifier si l'entreprise existe dÃ©jÃ \r\n     const existingCompany = await Company.findOne({ email });\r\n     if (existingCompany) {\r\n-      return res.status(400).json({ message: 'Une entreprise avec cet email existe dÃ©jÃ .' });\r\n+      return res.status(400).json({ message: \"Entreprise dÃ©jÃ  existante.\" });\r\n     }\r\n \r\n-    const newCompany = new Company({ name, address, email, phone, password });\r\n+    const newCompany = new Company({ name, address, email, phone, ownerId });\r\n     await newCompany.save();\r\n \r\n     res.status(201).json(newCompany);\r\n   } catch (error) {\r\n@@ -40,37 +40,48 @@\n   }\r\n };\r\n \r\n const updateCompany = async (req, res) => {\r\n-    const { id } = req.params; \r\n-    const { name, address, email, password, phone, createdAt } = req.body; // RÃ©cupÃ¨re les nouvelles donnÃ©es\r\n-  \r\n-    try {\r\n-      // Rechercher l'entreprise par son ID et la mettre Ã  jour\r\n-      const company = await Company.findByIdAndUpdate(\r\n-        id, \r\n-        { name, address, email, password, phone, createdAt },\r\n-        { new: true } // Retourne le document mis Ã  jour\r\n-      );\r\n-  \r\n-      if (!company) {\r\n-        return res.status(404).json({ message: 'Company not found' });\r\n-      }\r\n-  \r\n-      return res.status(200).json(company);\r\n-    } catch (error) {\r\n-      console.error(error.message);\r\n-      return res.status(500).json({ message: 'Server Error' });\r\n+  try {\r\n+    const { id } = req.params;\r\n+    const { name, address, email, phone } = req.body;\r\n+    const ownerId = req.user.sub;\r\n+\r\n+    const company = await Company.findById(id);\r\n+    if (!company) {\r\n+      return res.status(404).json({ message: \"Entreprise non trouvÃ©e\" });\r\n     }\r\n-  };\r\n \r\n+    if (company.ownerId !== ownerId) {\r\n+      return res.status(403).json({ message: \"AccÃ¨s refusÃ©.\" });\r\n+    }\r\n+\r\n+    company.name = name || company.name;\r\n+    company.address = address || company.address;\r\n+    company.email = email || company.email;\r\n+    company.phone = phone || company.phone;\r\n+\r\n+    await company.save();\r\n+    res.status(200).json(company);\r\n+  } catch (error) {\r\n+    res.status(500).json({ message: error.message });\r\n+  }\r\n+};\r\n+\r\n const deleteCompany = async (req, res) => {\r\n   try {\r\n-    const company = await Company.findById(req.params.id);\r\n+    const { id } = req.params;\r\n+    const ownerId = req.user.sub;\r\n+\r\n+    const company = await Company.findById(id);\r\n     if (!company) {\r\n       return res.status(404).json({ message: \"Entreprise non trouvÃ©e\" });\r\n     }\r\n \r\n+    if (company.ownerId !== ownerId) {\r\n+      return res.status(403).json({ message: \"AccÃ¨s refusÃ©.\" });\r\n+    }\r\n+\r\n     await company.deleteOne();\r\n     res.status(200).json({ message: \"Entreprise supprimÃ©e avec succÃ¨s\" });\r\n   } catch (error) {\r\n     res.status(500).json({ message: error.message });\r\n"
                }
            ],
            "date": 1741091756103,
            "name": "Commit-0",
            "content": "const Company = require('../models/company.model');\r\nconst UserCompany = require('../models/userCompany.model');\r\n\r\nexports.createCompany = async (req, res) => {\r\n    try {\r\n        const { name } = req.body;\r\n        const company = new Company({ name });\r\n        await company.save();\r\n        res.status(201).json(company);\r\n    } catch (error) {\r\n        res.status(500).json({ message: error.message });\r\n    }\r\n};\r\n\r\nexports.assignUserToCompany = async (req, res) => {\r\n    try {\r\n        const { userId, companyId } = req.body;\r\n        const userCompany = new UserCompany({ userId, companyId });\r\n        await userCompany.save();\r\n        res.status(201).json(userCompany);\r\n    } catch (error) {\r\n        res.status(500).json({ message: error.message });\r\n    }\r\n};\r\n\r\nexports.getCompanies = async (req, res) => {\r\n    try {\r\n        const companies = await Company.find();\r\n        res.status(200).json(companies);\r\n    } catch (error) {\r\n        res.status(500).json({ message: error.message });\r\n    }\r\n};\r\n"
        }
    ]
}