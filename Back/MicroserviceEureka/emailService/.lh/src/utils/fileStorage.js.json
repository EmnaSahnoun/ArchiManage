{
    "sourceFile": "src/utils/fileStorage.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1748533609306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748533660276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,70 +4,5 @@\n \r\n if (!fs.existsSync(DATA_DIR)) {\r\n   fs.mkdirSync(DATA_DIR, { recursive: true });\r\n }\r\n-// Créer le dossier utilisateur s'il n'existe pas\r\n-const ensureUserDir = (userId) => {\r\n-  const userDir = path.join(DATA_DIR, userId);\r\n-  const draftsDir = path.join(userDir, 'drafts');\r\n-  \r\n-  if (!fs.existsSync(userDir)) {\r\n-    fs.mkdirSync(userDir, { recursive: true });\r\n-    fs.mkdirSync(draftsDir);\r\n-    fs.writeFileSync(path.join(userDir, 'emails.json'), '[]');\r\n-  }\r\n-  \r\n-  return { userDir, draftsDir };\r\n-};\r\n \r\n-// Sauvegarder les emails\r\n-const saveEmails = (userId, emails) => {\r\n-  const { userDir } = ensureUserDir(userId);\r\n-  const filePath = path.join(userDir, 'emails.json');\r\n-  fs.writeFileSync(filePath, JSON.stringify(emails, null, 2));\r\n-};\r\n-\r\n-// Charger les emails\r\n-const loadEmails = (userId) => {\r\n-  const { userDir } = ensureUserDir(userId);\r\n-  const filePath = path.join(userDir, 'emails.json');\r\n-  return JSON.parse(fs.readFileSync(filePath));\r\n-};\r\n-\r\n-// Sauvegarder un brouillon\r\n-const saveDraft = (userId, draftId, draftData) => {\r\n-  const { draftsDir } = ensureUserDir(userId);\r\n-  const filePath = path.join(draftsDir, `${draftId}.json`);\r\n-  fs.writeFileSync(filePath, JSON.stringify(draftData, null, 2));\r\n-};\r\n-\r\n-// Charger un brouillon\r\n-const loadDraft = (userId, draftId) => {\r\n-  const { draftsDir } = ensureUserDir(userId);\r\n-  const filePath = path.join(draftsDir, `${draftId}.json`);\r\n-  return JSON.parse(fs.readFileSync(filePath));\r\n-};\r\n-\r\n-// Supprimer un brouillon\r\n-const deleteDraftFile = (userId, draftId) => {\r\n-  const { draftsDir } = ensureUserDir(userId);\r\n-  const filePath = path.join(draftsDir, `${draftId}.json`);\r\n-  if (fs.existsSync(filePath)) {\r\n-    fs.unlinkSync(filePath);\r\n-  }\r\n-};\r\n-\r\n-// Supprimer un email de la liste\r\n-const deleteEmailFromFile = (userId, emailId) => {\r\n-  const emails = loadEmails(userId);\r\n-  const updatedEmails = emails.filter(email => email.id !== emailId);\r\n-  saveEmails(userId, updatedEmails);\r\n-};\r\n-\r\n-module.exports = {\r\n-  saveEmails,\r\n-  loadEmails,\r\n-  saveDraft,\r\n-  loadDraft,\r\n-  deleteDraftFile,\r\n-  deleteEmailFromFile\r\n-};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748537146193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,4 +5,86 @@\n if (!fs.existsSync(DATA_DIR)) {\r\n   fs.mkdirSync(DATA_DIR, { recursive: true });\r\n }\r\n \r\n+// Helper function to get user directory\r\n+const getUserDir = (userEmail) => {\r\n+  const userDir = path.join(DATA_DIR, userId);\r\n+  if (!fs.existsSync(userDir)) {\r\n+    fs.mkdirSync(userDir, { recursive: true });\r\n+    // Create subdirectories\r\n+    fs.mkdirSync(path.join(userDir, 'drafts'));\r\n+    fs.mkdirSync(path.join(userDir, 'inbox'));\r\n+    fs.mkdirSync(path.join(userDir, 'sent'));\r\n+  }\r\n+  return userDir;\r\n+};\r\n+\r\n+// Save email to appropriate folder\r\n+const saveEmail = (userId, email, folder) => {\r\n+  const userDir = getUserDir(userId);\r\n+  const folderPath = path.join(userDir, folder);\r\n+  \r\n+  if (!fs.existsSync(folderPath)) {\r\n+    fs.mkdirSync(folderPath, { recursive: true });\r\n+  }\r\n+  \r\n+  const filePath = path.join(folderPath, `${email.id}.json`);\r\n+  fs.writeFileSync(filePath, JSON.stringify(email, null, 2));\r\n+};\r\n+\r\n+// Delete email from storage\r\n+const deleteEmail = (userId, emailId, folder) => {\r\n+  const userDir = getUserDir(userId);\r\n+  const filePath = path.join(userDir, folder, `${emailId}.json`);\r\n+  \r\n+  if (fs.existsSync(filePath)) {\r\n+    fs.unlinkSync(filePath);\r\n+    return true;\r\n+  }\r\n+  return false;\r\n+};\r\n+\r\n+// Get all emails from a folder\r\n+const getEmailsFromFolder = (userId, folder) => {\r\n+  const userDir = getUserDir(userId);\r\n+  const folderPath = path.join(userDir, folder);\r\n+  \r\n+  if (!fs.existsSync(folderPath)) {\r\n+    return [];\r\n+  }\r\n+  \r\n+  const files = fs.readdirSync(folderPath);\r\n+  return files\r\n+    .filter(file => file.endsWith('.json'))\r\n+    .map(file => {\r\n+      const content = fs.readFileSync(path.join(folderPath, file), 'utf8');\r\n+      return JSON.parse(content);\r\n+    });\r\n+};\r\n+\r\n+// Get single email by ID from folder\r\n+const getEmailFromFolder = (userId, emailId, folder) => {\r\n+  const userDir = getUserDir(userId);\r\n+  const filePath = path.join(userDir, folder, `${emailId}.json`);\r\n+  \r\n+  if (fs.existsSync(filePath)) {\r\n+    const content = fs.readFileSync(filePath, 'utf8');\r\n+    return JSON.parse(content);\r\n+  }\r\n+  return null;\r\n+};\r\n+\r\n+// Check if email exists in storage\r\n+const emailExists = (userId, emailId, folder) => {\r\n+  const userDir = getUserDir(userId);\r\n+  const filePath = path.join(userDir, folder, `${emailId}.json`);\r\n+  return fs.existsSync(filePath);\r\n+};\r\n+\r\n+module.exports = {\r\n+  saveEmail,\r\n+  deleteEmail,\r\n+  getEmailsFromFolder,\r\n+  getEmailFromFolder,\r\n+  emailExists\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748537168359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,10 @@\n }\r\n \r\n // Helper function to get user directory\r\n const getUserDir = (userEmail) => {\r\n+  const sanitizedEmail = userEmail.replace(/[^a-zA-Z0-9]/g, '_');\r\n+  const userDir = path.join(DATA_DIR, sanitizedEmail);\r\n   const userDir = path.join(DATA_DIR, userId);\r\n   if (!fs.existsSync(userDir)) {\r\n     fs.mkdirSync(userDir, { recursive: true });\r\n     // Create subdirectories\r\n"
                }
            ],
            "date": 1748533609306,
            "name": "Commit-0",
            "content": "const fs = require('fs');\r\nconst path = require('path');\r\nconst DATA_DIR = path.join(__dirname, '../../data/users');\r\n\r\nif (!fs.existsSync(DATA_DIR)) {\r\n  fs.mkdirSync(DATA_DIR, { recursive: true });\r\n}\r\n// Créer le dossier utilisateur s'il n'existe pas\r\nconst ensureUserDir = (userId) => {\r\n  const userDir = path.join(DATA_DIR, userId);\r\n  const draftsDir = path.join(userDir, 'drafts');\r\n  \r\n  if (!fs.existsSync(userDir)) {\r\n    fs.mkdirSync(userDir, { recursive: true });\r\n    fs.mkdirSync(draftsDir);\r\n    fs.writeFileSync(path.join(userDir, 'emails.json'), '[]');\r\n  }\r\n  \r\n  return { userDir, draftsDir };\r\n};\r\n\r\n// Sauvegarder les emails\r\nconst saveEmails = (userId, emails) => {\r\n  const { userDir } = ensureUserDir(userId);\r\n  const filePath = path.join(userDir, 'emails.json');\r\n  fs.writeFileSync(filePath, JSON.stringify(emails, null, 2));\r\n};\r\n\r\n// Charger les emails\r\nconst loadEmails = (userId) => {\r\n  const { userDir } = ensureUserDir(userId);\r\n  const filePath = path.join(userDir, 'emails.json');\r\n  return JSON.parse(fs.readFileSync(filePath));\r\n};\r\n\r\n// Sauvegarder un brouillon\r\nconst saveDraft = (userId, draftId, draftData) => {\r\n  const { draftsDir } = ensureUserDir(userId);\r\n  const filePath = path.join(draftsDir, `${draftId}.json`);\r\n  fs.writeFileSync(filePath, JSON.stringify(draftData, null, 2));\r\n};\r\n\r\n// Charger un brouillon\r\nconst loadDraft = (userId, draftId) => {\r\n  const { draftsDir } = ensureUserDir(userId);\r\n  const filePath = path.join(draftsDir, `${draftId}.json`);\r\n  return JSON.parse(fs.readFileSync(filePath));\r\n};\r\n\r\n// Supprimer un brouillon\r\nconst deleteDraftFile = (userId, draftId) => {\r\n  const { draftsDir } = ensureUserDir(userId);\r\n  const filePath = path.join(draftsDir, `${draftId}.json`);\r\n  if (fs.existsSync(filePath)) {\r\n    fs.unlinkSync(filePath);\r\n  }\r\n};\r\n\r\n// Supprimer un email de la liste\r\nconst deleteEmailFromFile = (userId, emailId) => {\r\n  const emails = loadEmails(userId);\r\n  const updatedEmails = emails.filter(email => email.id !== emailId);\r\n  saveEmails(userId, updatedEmails);\r\n};\r\n\r\nmodule.exports = {\r\n  saveEmails,\r\n  loadEmails,\r\n  saveDraft,\r\n  loadDraft,\r\n  deleteDraftFile,\r\n  deleteEmailFromFile\r\n};"
        }
    ]
}