{
    "sourceFile": "src/services/rabbitmqService.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1749216602075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1749216602075,
            "name": "Commit-0",
            "content": "const amqp = require('amqplib');\r\nconst config = require('../rabbitmq.config');\r\nconst gmailService = require('./gmailService');\r\nconst logger = require('../utils/logger');\r\n\r\nclass RabbitMQService {\r\n  constructor() {\r\n    this.connection = null;\r\n    this.channel = null;\r\n  }\r\n\r\n  async connect() {\r\n    try {\r\n      this.connection = await amqp.connect(config.rabbitmq.url);\r\n      this.channel = await this.connection.createChannel();\r\n      \r\n      await this.channel.assertExchange(\r\n        config.rabbitmq.exchange,\r\n        'topic',\r\n        { durable: true }\r\n      );\r\n\r\n      await this.channel.assertQueue(\r\n        config.rabbitmq.queue,\r\n        { durable: true }\r\n      );\r\n\r\n      await this.channel.bindQueue(\r\n        config.rabbitmq.queue,\r\n        config.rabbitmq.exchange,\r\n        config.rabbitmq.routingKey\r\n      );\r\n\r\n      logger.info('Connected to RabbitMQ and channel created');\r\n    } catch (error) {\r\n      logger.error('Error connecting to RabbitMQ:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async consumeEmailNotifications() {\r\n    try {\r\n      await this.channel.consume(config.rabbitmq.queue, async (message) => {\r\n        if (message !== null) {\r\n          try {\r\n            const notification = JSON.parse(message.content.toString());\r\n            logger.info('Received email notification:', notification);\r\n\r\n            // Envoyer l'email\r\n            await this.sendNotificationEmail(notification);\r\n\r\n            // Ack the message\r\n            this.channel.ack(message);\r\n          } catch (error) {\r\n            logger.error('Error processing message:', error);\r\n            // Nack the message (don't requeue)\r\n            this.channel.nack(message, false, false);\r\n          }\r\n        }\r\n      });\r\n\r\n      logger.info('Started consuming email notifications');\r\n    } catch (error) {\r\n      logger.error('Error setting up consumer:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async sendNotificationEmail(notification) {\r\n    try {\r\n      // Ici vous devrez obtenir le token d'accès pour l'utilisateur\r\n      // Cela dépend de votre système d'authentification\r\n      // Pour cet exemple, je suppose que vous avez un token système\r\n      \r\n      const emailData = {\r\n        from: 'notifications@systeo.tn',\r\n        to: notification.email, // L'email devrait être dans la notification\r\n        subject: `Notification: ${notification.originalNotification.message}`,\r\n        text: this.buildEmailContent(notification.originalNotification),\r\n        userId: notification.userId\r\n      };\r\n\r\n      // Utilisez un token système ou un token utilisateur stocké\r\n      const systemAccessToken = 'your-system-access-token'; // À remplacer par votre méthode d'obtention de token\r\n\r\n      await gmailService.sendEmail(\r\n        systemAccessToken,\r\n        emailData,\r\n        'system' // Ou l'ID utilisateur approprié\r\n      );\r\n\r\n      logger.info(`Email notification sent to ${notification.email}`);\r\n    } catch (error) {\r\n      logger.error('Error sending notification email:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  buildEmailContent(notification) {\r\n    return `\r\n      Bonjour,\r\n\r\n      Vous avez une notification non lue concernant :\r\n      \r\n      Projet: ${notification.projectName}\r\n      Tâche: ${notification.taskName}\r\n      Message: ${notification.message}\r\n      \r\n      Date: ${new Date(notification.commentDate).toLocaleString()}\r\n      \r\n      Connectez-vous à votre application pour plus de détails.\r\n      \r\n      Cordialement,\r\n      Votre équipe Systeo\r\n    `;\r\n  }\r\n\r\n  async close() {\r\n    try {\r\n      if (this.channel) await this.channel.close();\r\n      if (this.connection) await this.connection.close();\r\n      logger.info('RabbitMQ connection closed');\r\n    } catch (error) {\r\n      logger.error('Error closing RabbitMQ connection:', error);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = new RabbitMQService();"
        }
    ]
}