{
    "sourceFile": "src/controllers/authController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1748522538228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748522544400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,10 @@\n     scope: [\r\n       \"https://www.googleapis.com/auth/gmail.send\",\r\n       \"https://www.googleapis.com/auth/gmail.readonly\",\r\n       \"https://www.googleapis.com/auth/gmail.modify\",\r\n-      'https://www.googleapis.com/auth/gmail.modify', // Ajoutez ce scope\r\n-  'https://www.googleapis.com/auth/gmail.compose'\r\n+    // Ajoutez ce scope\r\n+  'https://www.googleapis.com/auth/gmail.compose',\r\n       \"https://mail.google.com/\",\r\n     ],\r\n     prompt: \"consent\", // Force l'affichage de l'écran de consentement\r\n   });\r\n"
                },
                {
                    "date": 1748522551223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,9 @@\n     scope: [\r\n       \"https://www.googleapis.com/auth/gmail.send\",\r\n       \"https://www.googleapis.com/auth/gmail.readonly\",\r\n       \"https://www.googleapis.com/auth/gmail.modify\",\r\n-    // Ajoutez ce scope\r\n-  'https://www.googleapis.com/auth/gmail.compose',\r\n+     'https://www.googleapis.com/auth/gmail.compose',\r\n       \"https://mail.google.com/\",\r\n     ],\r\n     prompt: \"consent\", // Force l'affichage de l'écran de consentement\r\n   });\r\n"
                },
                {
                    "date": 1748523270161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,12 +7,13 @@\n     scope: [\r\n       \"https://www.googleapis.com/auth/gmail.send\",\r\n       \"https://www.googleapis.com/auth/gmail.readonly\",\r\n       \"https://www.googleapis.com/auth/gmail.modify\",\r\n-     'https://www.googleapis.com/auth/gmail.compose',\r\n+      'https://www.googleapis.com/auth/gmail.compose',\r\n       \"https://mail.google.com/\",\r\n     ],\r\n-    prompt: \"consent\", // Force l'affichage de l'écran de consentement\r\n+    prompt: \"consent\",\r\n+  \r\n   });\r\n   res.redirect(url);\r\n };\r\n \r\n"
                },
                {
                    "date": 1748596740220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n       'https://www.googleapis.com/auth/gmail.compose',\r\n       \"https://mail.google.com/\",\r\n     ],\r\n     prompt: \"consent\",\r\n-  \r\n+  include_granted_scopes: \"true\"\r\n   });\r\n   res.redirect(url);\r\n };\r\n \r\n@@ -24,13 +24,14 @@\n     if (!code) {\r\n       return res.status(400).send(\"Code d'autorisation manquant.\");\r\n     }\r\n     const { tokens } = await oAuth2Client.getToken(code);\r\n-    // Il est recommandé de ne pas afficher les tokens directement dans la réponse\r\n-    // mais de les stocker de manière sécurisée côté serveur ou de les renvoyer au client\r\n-    // via un mécanisme sécurisé pour qu'il les stocke (ex: localStorage, sessionStorage).\r\n-    // Pour cet exemple, nous les affichons, mais ce n'est PAS une bonne pratique en production.\r\n-    res.send(`Authentification réussie !<br>\r\n+    res.json({\r\n+      success: true,\r\n+      access_token: tokens.access_token,\r\n+      refresh_token: tokens.refresh_token, // Maintenant vous devriez recevoir ceci\r\n+      expiry_date: tokens.expiry_date\r\n+    });  res.send(`Authentification réussie !<br>\r\n               Access Token: ${tokens.access_token}<br>\r\n               ${tokens.refresh_token ? `Refresh Token: ${tokens.refresh_token}<br>` : ''}\r\n               Expiry Date: ${new Date(tokens.expiry_date).toLocaleString()}`);\r\n \r\n"
                },
                {
                    "date": 1748596749749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,14 +29,15 @@\n       success: true,\r\n       access_token: tokens.access_token,\r\n       refresh_token: tokens.refresh_token, // Maintenant vous devriez recevoir ceci\r\n       expiry_date: tokens.expiry_date\r\n-    });  res.send(`Authentification réussie !<br>\r\n+    });\r\n+     /*  res.send(`Authentification réussie !<br>\r\n               Access Token: ${tokens.access_token}<br>\r\n               ${tokens.refresh_token ? `Refresh Token: ${tokens.refresh_token}<br>` : ''}\r\n               Expiry Date: ${new Date(tokens.expiry_date).toLocaleString()}`);\r\n \r\n-  } catch (error) {\r\n+ */  } catch (error) {\r\n     console.error(\"Erreur lors de l'échange du code d'autorisation:\", error);\r\n     res.status(500).send(\"Erreur d'authentification Google.\");\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1748623321553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,26 +23,24 @@\n     const { code } = req.query;\r\n     if (!code) {\r\n       return res.status(400).send(\"Code d'autorisation manquant.\");\r\n     }\r\n+    \r\n+    // Échange le code contre les tokens\r\n     const { tokens } = await oAuth2Client.getToken(code);\r\n-    res.json({\r\n-      success: true,\r\n-      access_token: tokens.access_token,\r\n-      refresh_token: tokens.refresh_token, // Maintenant vous devriez recevoir ceci\r\n-      expiry_date: tokens.expiry_date\r\n-    });\r\n-     /*  res.send(`Authentification réussie !<br>\r\n-              Access Token: ${tokens.access_token}<br>\r\n-              ${tokens.refresh_token ? `Refresh Token: ${tokens.refresh_token}<br>` : ''}\r\n-              Expiry Date: ${new Date(tokens.expiry_date).toLocaleString()}`);\r\n-\r\n- */  } catch (error) {\r\n-    console.error(\"Erreur lors de l'échange du code d'autorisation:\", error);\r\n-    res.status(500).send(\"Erreur d'authentification Google.\");\r\n+    \r\n+    // IMPORTANT: Renvoyez les tokens au frontend\r\n+    res.redirect(`${process.env.FRONTEND_URL}/auth/google/callback?` + \r\n+      new URLSearchParams({\r\n+        access_token: tokens.access_token,\r\n+        refresh_token: tokens.refresh_token, // Assurez-vous que ce token est bien reçu\r\n+        expiry_date: tokens.expiry_date\r\n+      }));\r\n+  } catch (error) {\r\n+    console.error(\"Erreur lors de l'échange du code:\", error);\r\n+    res.redirect(`${process.env.FRONTEND_URL}/error?message=auth_failed`);\r\n   }\r\n };\r\n-\r\n // Rafraîchir le token d'accès\r\n const refreshToken = async (req, res) => {\r\n   try {\r\n     const { refreshToken } = req.body;\r\n"
                },
                {
                    "date": 1748623332184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n const oAuth2Client = require(\"../config/googleAuth\");\r\n-\r\n+const \r\n // Démarrer le flux d'authentification Google\r\n const googleAuth = (req, res) => {\r\n   const url = oAuth2Client.generateAuthUrl({\r\n     access_type: \"offline\",\r\n"
                },
                {
                    "date": 1748623337327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n const oAuth2Client = require(\"../config/googleAuth\");\r\n-const \r\n+\r\n // Démarrer le flux d'authentification Google\r\n const googleAuth = (req, res) => {\r\n   const url = oAuth2Client.generateAuthUrl({\r\n     access_type: \"offline\",\r\n"
                },
                {
                    "date": 1748623354213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n const oAuth2Client = require(\"../config/googleAuth\");\r\n-\r\n+require(\"dotenv\").config();\r\n // Démarrer le flux d'authentification Google\r\n const googleAuth = (req, res) => {\r\n   const url = oAuth2Client.generateAuthUrl({\r\n     access_type: \"offline\",\r\n"
                },
                {
                    "date": 1748623982713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,15 +27,13 @@\n     \r\n     // Échange le code contre les tokens\r\n     const { tokens } = await oAuth2Client.getToken(code);\r\n     \r\n-    // IMPORTANT: Renvoyez les tokens au frontend\r\n-    res.redirect(`${process.env.FRONTEND_URL}/auth/google/callback?` + \r\n-      new URLSearchParams({\r\n-        access_token: tokens.access_token,\r\n-        refresh_token: tokens.refresh_token, // Assurez-vous que ce token est bien reçu\r\n-        expiry_date: tokens.expiry_date\r\n-      }));\r\n+    res.json({\r\n+  access_token: tokens.access_token,\r\n+  refresh_token: tokens.refresh_token,\r\n+  expiry_date: tokens.expiry_date\r\n+});\r\n   } catch (error) {\r\n     console.error(\"Erreur lors de l'échange du code:\", error);\r\n     res.redirect(`${process.env.FRONTEND_URL}/error?message=auth_failed`);\r\n   }\r\n"
                },
                {
                    "date": 1748623995943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n // Gérer le callback après l'authentification Google\r\n const googleAuthCallback = async (req, res) => {\r\n   try {\r\n     const { code } = req.query;\r\n+    \r\n     if (!code) {\r\n       return res.status(400).send(\"Code d'autorisation manquant.\");\r\n     }\r\n     \r\n"
                },
                {
                    "date": 1748624002294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n // Gérer le callback après l'authentification Google\r\n const googleAuthCallback = async (req, res) => {\r\n   try {\r\n     const { code } = req.query;\r\n-    \r\n+    console.error()\r\n     if (!code) {\r\n       return res.status(400).send(\"Code d'autorisation manquant.\");\r\n     }\r\n     \r\n"
                },
                {
                    "date": 1748624824465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n const oAuth2Client = require(\"../config/googleAuth\");\r\n require(\"dotenv\").config();\r\n+const router = express.Router();\r\n // Démarrer le flux d'authentification Google\r\n const googleAuth = (req, res) => {\r\n   const url = oAuth2Client.generateAuthUrl({\r\n     access_type: \"offline\",\r\n@@ -20,9 +21,9 @@\n // Gérer le callback après l'authentification Google\r\n const googleAuthCallback = async (req, res) => {\r\n   try {\r\n     const { code } = req.query;\r\n-    console.error()\r\n+    console.error(\"Code d'autorisation:\", code);\r\n     if (!code) {\r\n       return res.status(400).send(\"Code d'autorisation manquant.\");\r\n     }\r\n     \r\n"
                },
                {
                    "date": 1748624849557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n const oAuth2Client = require(\"../config/googleAuth\");\r\n require(\"dotenv\").config();\r\n+const express = require('express');\r\n const router = express.Router();\r\n // Démarrer le flux d'authentification Google\r\n const googleAuth = (req, res) => {\r\n   const url = oAuth2Client.generateAuthUrl({\r\n"
                },
                {
                    "date": 1748635960836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n const express = require('express');\r\n const router = express.Router();\r\n // Démarrer le flux d'authentification Google\r\n const googleAuth = (req, res) => {\r\n+  const state = req.query.returnUrl || '/';\r\n   const url = oAuth2Client.generateAuthUrl({\r\n     access_type: \"offline\",\r\n     scope: [\r\n       \"https://www.googleapis.com/auth/gmail.send\",\r\n@@ -13,9 +14,10 @@\n       'https://www.googleapis.com/auth/gmail.compose',\r\n       \"https://mail.google.com/\",\r\n     ],\r\n     prompt: \"consent\",\r\n-  include_granted_scopes: \"true\"\r\n+    include_granted_scopes: true,\r\n+    state: state // Stocker l'URL de retour\r\n   });\r\n   res.redirect(url);\r\n };\r\n \r\n"
                },
                {
                    "date": 1748635982796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,22 +23,25 @@\n \r\n // Gérer le callback après l'authentification Google\r\n const googleAuthCallback = async (req, res) => {\r\n   try {\r\n-    const { code } = req.query;\r\n-    console.error(\"Code d'autorisation:\", code);\r\n+    const { code, state } = req.query;\r\n+    \r\n     if (!code) {\r\n       return res.status(400).send(\"Code d'autorisation manquant.\");\r\n     }\r\n     \r\n-    // Échange le code contre les tokens\r\n     const { tokens } = await oAuth2Client.getToken(code);\r\n+    oAuth2Client.setCredentials(tokens);\r\n     \r\n-    res.json({\r\n-  access_token: tokens.access_token,\r\n-  refresh_token: tokens.refresh_token,\r\n-  expiry_date: tokens.expiry_date\r\n-});\r\n+    // Rediriger vers le frontend avec les tokens\r\n+    const redirectUrl = `${process.env.FRONTEND_URL}/auth/google/callback?` +\r\n+      `access_token=${tokens.access_token}&` +\r\n+      `refresh_token=${tokens.refresh_token}&` +\r\n+      `expires_in=${tokens.expiry_date}&` +\r\n+      `state=${state || '/'}`;\r\n+    \r\n+    res.redirect(redirectUrl);\r\n   } catch (error) {\r\n     console.error(\"Erreur lors de l'échange du code:\", error);\r\n     res.redirect(`${process.env.FRONTEND_URL}/error?message=auth_failed`);\r\n   }\r\n"
                },
                {
                    "date": 1748638560734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,17 +30,18 @@\n       return res.status(400).send(\"Code d'autorisation manquant.\");\r\n     }\r\n     \r\n     const { tokens } = await oAuth2Client.getToken(code);\r\n-    oAuth2Client.setCredentials(tokens);\r\n     \r\n-    // Rediriger vers le frontend avec les tokens\r\n-    const redirectUrl = `${process.env.FRONTEND_URL}/auth/google/callback?` +\r\n+    // Construire l'URL de redirection avec les tokens\r\n+    const frontendUrl = process.env.FRONTEND_URL;\r\n+    const redirectUrl = `${frontendUrl}/auth/google/callback?` +\r\n       `access_token=${tokens.access_token}&` +\r\n       `refresh_token=${tokens.refresh_token}&` +\r\n-      `expires_in=${tokens.expiry_date}&` +\r\n+      `expires_in=${Math.floor((tokens.expiry_date - Date.now()) / 1000)}&` +\r\n       `state=${state || '/'}`;\r\n     \r\n+    console.log(\"Redirection vers:\", redirectUrl); // Pour débogage\r\n     res.redirect(redirectUrl);\r\n   } catch (error) {\r\n     console.error(\"Erreur lors de l'échange du code:\", error);\r\n     res.redirect(`${process.env.FRONTEND_URL}/error?message=auth_failed`);\r\n"
                },
                {
                    "date": 1748649588307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n     const frontendUrl = process.env.FRONTEND_URL;\r\n     const redirectUrl = `${frontendUrl}/auth/google/callback?` +\r\n       `access_token=${tokens.access_token}&` +\r\n       `refresh_token=${tokens.refresh_token}&` +\r\n-      `expires_in=${Math.floor((tokens.expiry_date - Date.now()) / 1000)}&` +\r\n+      `expires_in=${Math.floor((tokens.expires_date - Date.now()) / 1000)}&` +\r\n       `state=${state || '/'}`;\r\n     \r\n     console.log(\"Redirection vers:\", redirectUrl); // Pour débogage\r\n     res.redirect(redirectUrl);\r\n"
                },
                {
                    "date": 1748649594495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n     const frontendUrl = process.env.FRONTEND_URL;\r\n     const redirectUrl = `${frontendUrl}/auth/google/callback?` +\r\n       `access_token=${tokens.access_token}&` +\r\n       `refresh_token=${tokens.refresh_token}&` +\r\n-      `expires_in=${Math.floor((tokens.expires_date - Date.now()) / 1000)}&` +\r\n+      `expires_in=${Math.floor((tokens.expires_in - Date.now()) / 1000)}&` +\r\n       `state=${state || '/'}`;\r\n     \r\n     console.log(\"Redirection vers:\", redirectUrl); // Pour débogage\r\n     res.redirect(redirectUrl);\r\n"
                },
                {
                    "date": 1748649628500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n     const frontendUrl = process.env.FRONTEND_URL;\r\n     const redirectUrl = `${frontendUrl}/auth/google/callback?` +\r\n       `access_token=${tokens.access_token}&` +\r\n       `refresh_token=${tokens.refresh_token}&` +\r\n-      `expires_in=${Math.floor((tokens.expires_in - Date.now()) / 1000)}&` +\r\n+      `expires_in=${tokens.expires_in - Date.now()) / 1000)}&` +\r\n       `state=${state || '/'}`;\r\n     \r\n     console.log(\"Redirection vers:\", redirectUrl); // Pour débogage\r\n     res.redirect(redirectUrl);\r\n"
                },
                {
                    "date": 1748649655862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n     const frontendUrl = process.env.FRONTEND_URL;\r\n     const redirectUrl = `${frontendUrl}/auth/google/callback?` +\r\n       `access_token=${tokens.access_token}&` +\r\n       `refresh_token=${tokens.refresh_token}&` +\r\n-      `expires_in=${tokens.expires_in - Date.now()) / 1000)}&` +\r\n+      `expires_in=${tokens.expires_in}&` +\r\n       `state=${state || '/'}`;\r\n     \r\n     console.log(\"Redirection vers:\", redirectUrl); // Pour débogage\r\n     res.redirect(redirectUrl);\r\n"
                }
            ],
            "date": 1748522538228,
            "name": "Commit-0",
            "content": "const oAuth2Client = require(\"../config/googleAuth\");\r\n\r\n// Démarrer le flux d'authentification Google\r\nconst googleAuth = (req, res) => {\r\n  const url = oAuth2Client.generateAuthUrl({\r\n    access_type: \"offline\",\r\n    scope: [\r\n      \"https://www.googleapis.com/auth/gmail.send\",\r\n      \"https://www.googleapis.com/auth/gmail.readonly\",\r\n      \"https://www.googleapis.com/auth/gmail.modify\",\r\n      'https://www.googleapis.com/auth/gmail.modify', // Ajoutez ce scope\r\n  'https://www.googleapis.com/auth/gmail.compose'\r\n      \"https://mail.google.com/\",\r\n    ],\r\n    prompt: \"consent\", // Force l'affichage de l'écran de consentement\r\n  });\r\n  res.redirect(url);\r\n};\r\n\r\n// Gérer le callback après l'authentification Google\r\nconst googleAuthCallback = async (req, res) => {\r\n  try {\r\n    const { code } = req.query;\r\n    if (!code) {\r\n      return res.status(400).send(\"Code d'autorisation manquant.\");\r\n    }\r\n    const { tokens } = await oAuth2Client.getToken(code);\r\n    // Il est recommandé de ne pas afficher les tokens directement dans la réponse\r\n    // mais de les stocker de manière sécurisée côté serveur ou de les renvoyer au client\r\n    // via un mécanisme sécurisé pour qu'il les stocke (ex: localStorage, sessionStorage).\r\n    // Pour cet exemple, nous les affichons, mais ce n'est PAS une bonne pratique en production.\r\n    res.send(`Authentification réussie !<br>\r\n              Access Token: ${tokens.access_token}<br>\r\n              ${tokens.refresh_token ? `Refresh Token: ${tokens.refresh_token}<br>` : ''}\r\n              Expiry Date: ${new Date(tokens.expiry_date).toLocaleString()}`);\r\n\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de l'échange du code d'autorisation:\", error);\r\n    res.status(500).send(\"Erreur d'authentification Google.\");\r\n  }\r\n};\r\n\r\n// Rafraîchir le token d'accès\r\nconst refreshToken = async (req, res) => {\r\n  try {\r\n    const { refreshToken } = req.body;\r\n    if (!refreshToken) {\r\n      return res.status(400).json({ success: false, error: \"Refresh token requis.\" });\r\n    }\r\n\r\n    // Créer une nouvelle instance ou cloner pour éviter les effets de bord\r\n    const tempClient = new google.auth.OAuth2(\r\n        oAuth2Client.clientId_,\r\n        oAuth2Client.clientSecret_,\r\n        oAuth2Client.redirectUri_\r\n    );\r\n    tempClient.setCredentials({ refresh_token: refreshToken });\r\n\r\n    const { credentials } = await tempClient.refreshAccessToken();\r\n    res.json({\r\n      success: true,\r\n      access_token: credentials.access_token,\r\n      expiry_date: credentials.expiry_date,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Erreur lors du rafraîchissement du token:\", error);\r\n    // Fournir plus de détails si l'erreur vient de l'API Google\r\n    const errorMessage = error.response?.data?.error_description || error.message;\r\n    res.status(error.response?.status || 500).json({ success: false, error: \"Impossible de rafraîchir le token.\", details: errorMessage });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  googleAuth,\r\n  googleAuthCallback,\r\n  refreshToken,\r\n};\r\n"
        }
    ]
}