{
    "sourceFile": "controllers/commentController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1744731530666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744733409156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,22 @@\n const fs = require('fs');\r\n const path = require('path');\r\n \r\n exports.addComment = (req, res) => {\r\n-  const { taskId } = req.params;\r\n-  const comment = req.body.comment;\r\n-  const filePath = path.join(__dirname, '..', 'comments', `${taskId}.txt`);\r\n+    const { taskId } = req.params;\r\n+    const { comment, user } = req.body;  // Récupérer le commentaire et le nom d'utilisateur depuis le corps de la requête\r\n+    \r\n+    const date = new Date().toISOString();  // Format de la date ISO\r\n+    const commentWithDetails = `Date: ${date}\\nUtilisateur: ${user}\\nCommentaire: ${comment}\\n\\n`;  // Construire le commentaire avec date et utilisateur\r\n+    \r\n+    const filePath = path.join(__dirname, '..', 'comments', `${taskId}.txt`);\r\n+  \r\n+    fs.appendFile(filePath, commentWithDetails, (err) => {\r\n+      if (err) return res.status(500).send('Erreur lors de l\\'écriture');\r\n+      res.send('Commentaire ajouté');\r\n+    });\r\n+  };\r\n \r\n-  fs.appendFile(filePath, comment + '\\n', (err) => {\r\n-    if (err) return res.status(500).send('Erreur lors de l\\'écriture');\r\n-    res.send('Commentaire ajouté');\r\n-  });\r\n-};\r\n-\r\n exports.getComments = (req, res) => {\r\n   const { taskId } = req.params;\r\n   const filePath = path.join(__dirname, '..', 'comments', `${taskId}.txt`);\r\n \r\n"
                },
                {
                    "date": 1744733664021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,15 +15,16 @@\n       res.send('Commentaire ajouté');\r\n     });\r\n   };\r\n \r\n-exports.getComments = (req, res) => {\r\n-  const { taskId } = req.params;\r\n-  const filePath = path.join(__dirname, '..', 'comments', `${taskId}.txt`);\r\n-\r\n-  if (!fs.existsSync(filePath)) {\r\n-    return res.status(404).send('Aucun commentaire trouvé');\r\n-  }\r\n-\r\n-  const data = fs.readFileSync(filePath, 'utf8');\r\n-  res.send(data);\r\n-};\r\n+  exports.getComments = (req, res) => {\r\n+    const { taskId } = req.params;\r\n+    const filePath = path.join(__dirname, '..', 'comments', `${taskId}.txt`);\r\n+  \r\n+    if (!fs.existsSync(filePath)) {\r\n+      return res.status(404).send('Aucun commentaire trouvé');\r\n+    }\r\n+  \r\n+    const data = fs.readFileSync(filePath, 'utf8');\r\n+    res.send(data);\r\n+  };\r\n+  \r\n"
                },
                {
                    "date": 1744733788111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,5 +26,20 @@\n   \r\n     const data = fs.readFileSync(filePath, 'utf8');\r\n     res.send(data);\r\n   };\r\n+  exports.deleteComment = (req, res) => {\r\n+    const { taskId } = req.params;\r\n+    const filePath = path.join(__dirname, '..', 'comments', `${taskId}.txt`);\r\n   \r\n+    if (!fs.existsSync(filePath)) {\r\n+      return res.status(404).send('Aucun commentaire trouvé pour cette tâche');\r\n+    }\r\n+  \r\n+    fs.unlink(filePath, (err) => {\r\n+      if (err) {\r\n+        return res.status(500).send('Erreur lors de la suppression du fichier');\r\n+      }\r\n+      res.send('Commentaires supprimés');\r\n+    });\r\n+  };\r\n+  \r\n"
                },
                {
                    "date": 1744733796414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,5 +41,33 @@\n       }\r\n       res.send('Commentaires supprimés');\r\n     });\r\n   };\r\n+  exports.updateComment = (req, res) => {\r\n+    const { taskId, commentId } = req.params;  // taskId pour la tâche, commentId pour le commentaire\r\n+    const { newComment, user } = req.body;  // Nouveau commentaire et utilisateur\r\n   \r\n+    const filePath = path.join(__dirname, '..', 'comments', `${taskId}.txt`);\r\n+  \r\n+    if (!fs.existsSync(filePath)) {\r\n+      return res.status(404).send('Aucun commentaire trouvé pour cette tâche');\r\n+    }\r\n+  \r\n+    // Lire le fichier de commentaires\r\n+    const data = fs.readFileSync(filePath, 'utf8');\r\n+    const comments = data.split('\\n\\n');  // Supposons que chaque commentaire est séparé par un double saut de ligne\r\n+  \r\n+    // Trouver le commentaire à modifier (par exemple, on peut identifier le commentaire par son index ou une partie de son contenu)\r\n+    const commentIndex = comments.findIndex(comment => comment.includes(`Utilisateur: ${user}`) && comment.includes(newComment));\r\n+  \r\n+    if (commentIndex === -1) {\r\n+      return res.status(404).send('Commentaire à modifier introuvable');\r\n+    }\r\n+  \r\n+    // Remplacer le commentaire\r\n+    comments[commentIndex] = `Date: ${new Date().toISOString()}\\nUtilisateur: ${user}\\nCommentaire: ${newComment}\\n\\n`;\r\n+  \r\n+    // Écrire à nouveau les commentaires modifiés dans le fichier\r\n+    fs.writeFileSync(filePath, comments.join('\\n\\n'), 'utf8');\r\n+    res.send('Commentaire modifié');\r\n+  };\r\n+    \r\n"
                },
                {
                    "date": 1744733985681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,25 @@\n const fs = require('fs');\r\n const path = require('path');\r\n+const { v4: uuidv4 } = require('uuid');  // Importation de UUID pour générer des identifiants uniques\r\n \r\n exports.addComment = (req, res) => {\r\n-    const { taskId } = req.params;\r\n-    const { comment, user } = req.body;  // Récupérer le commentaire et le nom d'utilisateur depuis le corps de la requête\r\n-    \r\n-    const date = new Date().toISOString();  // Format de la date ISO\r\n-    const commentWithDetails = `Date: ${date}\\nUtilisateur: ${user}\\nCommentaire: ${comment}\\n\\n`;  // Construire le commentaire avec date et utilisateur\r\n-    \r\n-    const filePath = path.join(__dirname, '..', 'comments', `${taskId}.txt`);\r\n+  const { taskId } = req.params;\r\n+  const { comment, user } = req.body;\r\n   \r\n-    fs.appendFile(filePath, commentWithDetails, (err) => {\r\n-      if (err) return res.status(500).send('Erreur lors de l\\'écriture');\r\n-      res.send('Commentaire ajouté');\r\n-    });\r\n-  };\r\n+  const idCommentaire = uuidv4();  // Générer un ID unique pour chaque commentaire\r\n+  const date = new Date().toISOString();  // Date au format ISO\r\n+  \r\n+  const commentWithDetails = `ID: ${idCommentaire}\\nDate: ${date}\\nUtilisateur: ${user}\\nCommentaire: ${comment}\\n\\n`;\r\n+  \r\n+  const filePath = path.join(__dirname, '..', 'comments', `${taskId}.txt`);\r\n \r\n+  fs.appendFile(filePath, commentWithDetails, (err) => {\r\n+    if (err) return res.status(500).send('Erreur lors de l\\'écriture');\r\n+    res.send('Commentaire ajouté');\r\n+  });\r\n+};\r\n+\r\n   exports.getComments = (req, res) => {\r\n     const { taskId } = req.params;\r\n     const filePath = path.join(__dirname, '..', 'comments', `${taskId}.txt`);\r\n   \r\n"
                },
                {
                    "date": 1744734000943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,22 +30,35 @@\n     const data = fs.readFileSync(filePath, 'utf8');\r\n     res.send(data);\r\n   };\r\n   exports.deleteComment = (req, res) => {\r\n-    const { taskId } = req.params;\r\n+    const { taskId, idCommentaire } = req.params;  // Récupérer taskId et idCommentaire depuis les paramètres de la requête\r\n     const filePath = path.join(__dirname, '..', 'comments', `${taskId}.txt`);\r\n   \r\n     if (!fs.existsSync(filePath)) {\r\n       return res.status(404).send('Aucun commentaire trouvé pour cette tâche');\r\n     }\r\n   \r\n-    fs.unlink(filePath, (err) => {\r\n-      if (err) {\r\n-        return res.status(500).send('Erreur lors de la suppression du fichier');\r\n-      }\r\n-      res.send('Commentaires supprimés');\r\n-    });\r\n+    // Lire le fichier de commentaires\r\n+    const data = fs.readFileSync(filePath, 'utf8');\r\n+    const comments = data.split('\\n\\n');  // Supposons que chaque commentaire est séparé par un double saut de ligne\r\n+  \r\n+    // Chercher le commentaire à supprimer\r\n+    const commentIndex = comments.findIndex(comment => comment.includes(`ID: ${idCommentaire}`));\r\n+  \r\n+    if (commentIndex === -1) {\r\n+      return res.status(404).send('Commentaire introuvable');\r\n+    }\r\n+  \r\n+    // Supprimer le commentaire du tableau\r\n+    comments.splice(commentIndex, 1);\r\n+  \r\n+    // Réécrire le fichier avec les commentaires restants\r\n+    fs.writeFileSync(filePath, comments.join('\\n\\n'), 'utf8');\r\n+    \r\n+    res.send('Commentaire supprimé');\r\n   };\r\n+  \r\n   exports.updateComment = (req, res) => {\r\n     const { taskId, commentId } = req.params;  // taskId pour la tâche, commentId pour le commentaire\r\n     const { newComment, user } = req.body;  // Nouveau commentaire et utilisateur\r\n   \r\n"
                },
                {
                    "date": 1744735283900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,89 +1,163 @@\n const fs = require('fs');\r\n const path = require('path');\r\n-const { v4: uuidv4 } = require('uuid');  // Importation de UUID pour générer des identifiants uniques\r\n+const { v4: uuidv4 } = require('uuid');\r\n \r\n+// Chemin vers le dossier des commentaires\r\n+const COMMENTS_DIR = path.join(__dirname, '..', 'comments');\r\n+\r\n+// Helper functions\r\n+const ensureCommentsDirExists = () => {\r\n+  if (!fs.existsSync(COMMENTS_DIR)) {\r\n+    fs.mkdirSync(COMMENTS_DIR, { recursive: true });\r\n+  }\r\n+};\r\n+\r\n+const getCommentFilePath = (taskId) => {\r\n+  return path.join(COMMENTS_DIR, `${taskId}.txt`);\r\n+};\r\n+\r\n+const parseCommentsFile = (fileContent) => {\r\n+  return fileContent.split('\\n\\n')\r\n+    .filter(comment => comment.trim() !== '')\r\n+    .map(comment => {\r\n+      const lines = comment.split('\\n');\r\n+      const commentObj = {};\r\n+      lines.forEach(line => {\r\n+        const [key, ...value] = line.split(': ');\r\n+        commentObj[key] = value.join(': ');\r\n+      });\r\n+      return commentObj;\r\n+    });\r\n+};\r\n+\r\n+const stringifyComments = (comments) => {\r\n+  return comments.map(comment => {\r\n+    return Object.entries(comment)\r\n+      .map(([key, value]) => `${key}: ${value}`)\r\n+      .join('\\n');\r\n+  }).join('\\n\\n');\r\n+};\r\n+\r\n+// Controllers\r\n exports.addComment = (req, res) => {\r\n-  const { taskId } = req.params;\r\n-  const { comment, user } = req.body;\r\n-  \r\n-  const idCommentaire = uuidv4();  // Générer un ID unique pour chaque commentaire\r\n-  const date = new Date().toISOString();  // Date au format ISO\r\n-  \r\n-  const commentWithDetails = `ID: ${idCommentaire}\\nDate: ${date}\\nUtilisateur: ${user}\\nCommentaire: ${comment}\\n\\n`;\r\n-  \r\n-  const filePath = path.join(__dirname, '..', 'comments', `${taskId}.txt`);\r\n+  try {\r\n+    const { taskId } = req.params;\r\n+    const { text, user } = req.body;\r\n+    \r\n+    if (!text || !user) {\r\n+      return res.status(400).json({ error: 'Text and user are required' });\r\n+    }\r\n \r\n-  fs.appendFile(filePath, commentWithDetails, (err) => {\r\n-    if (err) return res.status(500).send('Erreur lors de l\\'écriture');\r\n-    res.send('Commentaire ajouté');\r\n-  });\r\n+    ensureCommentsDirExists();\r\n+    \r\n+    const comment = {\r\n+      id: uuidv4(),\r\n+      date: new Date().toISOString(),\r\n+      user,\r\n+      text\r\n+    };\r\n+\r\n+    const filePath = getCommentFilePath(taskId);\r\n+    const commentString = Object.entries(comment)\r\n+      .map(([key, val]) => `${key}: ${val}`)\r\n+      .join('\\n');\r\n+\r\n+    fs.appendFileSync(filePath, `${commentString}\\n\\n`);\r\n+    \r\n+    res.status(201).json(comment);\r\n+  } catch (error) {\r\n+    console.error('Error adding comment:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n };\r\n \r\n-  exports.getComments = (req, res) => {\r\n+exports.getComments = (req, res) => {\r\n+  try {\r\n     const { taskId } = req.params;\r\n-    const filePath = path.join(__dirname, '..', 'comments', `${taskId}.txt`);\r\n-  \r\n+    const filePath = getCommentFilePath(taskId);\r\n+\r\n     if (!fs.existsSync(filePath)) {\r\n-      return res.status(404).send('Aucun commentaire trouvé');\r\n+      return res.status(200).json([]);\r\n     }\r\n-  \r\n+\r\n     const data = fs.readFileSync(filePath, 'utf8');\r\n-    res.send(data);\r\n-  };\r\n-  exports.deleteComment = (req, res) => {\r\n-    const { taskId, idCommentaire } = req.params;  // Récupérer taskId et idCommentaire depuis les paramètres de la requête\r\n-    const filePath = path.join(__dirname, '..', 'comments', `${taskId}.txt`);\r\n-  \r\n+    const comments = parseCommentsFile(data);\r\n+    \r\n+    res.json(comments);\r\n+  } catch (error) {\r\n+    console.error('Error getting comments:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+};\r\n+\r\n+exports.deleteComment = (req, res) => {\r\n+  try {\r\n+    const { taskId, commentId } = req.params;\r\n+    const filePath = getCommentFilePath(taskId);\r\n+\r\n     if (!fs.existsSync(filePath)) {\r\n-      return res.status(404).send('Aucun commentaire trouvé pour cette tâche');\r\n+      return res.status(404).json({ error: 'No comments found for this task' });\r\n     }\r\n-  \r\n-    // Lire le fichier de commentaires\r\n+\r\n     const data = fs.readFileSync(filePath, 'utf8');\r\n-    const comments = data.split('\\n\\n');  // Supposons que chaque commentaire est séparé par un double saut de ligne\r\n-  \r\n-    // Chercher le commentaire à supprimer\r\n-    const commentIndex = comments.findIndex(comment => comment.includes(`ID: ${idCommentaire}`));\r\n-  \r\n-    if (commentIndex === -1) {\r\n-      return res.status(404).send('Commentaire introuvable');\r\n+    let comments = parseCommentsFile(data);\r\n+    \r\n+    const initialLength = comments.length;\r\n+    comments = comments.filter(comment => comment.id !== commentId);\r\n+    \r\n+    if (comments.length === initialLength) {\r\n+      return res.status(404).json({ error: 'Comment not found' });\r\n     }\r\n-  \r\n-    // Supprimer le commentaire du tableau\r\n-    comments.splice(commentIndex, 1);\r\n-  \r\n-    // Réécrire le fichier avec les commentaires restants\r\n-    fs.writeFileSync(filePath, comments.join('\\n\\n'), 'utf8');\r\n+\r\n+    fs.writeFileSync(filePath, stringifyComments(comments));\r\n     \r\n-    res.send('Commentaire supprimé');\r\n-  };\r\n-  \r\n-  exports.updateComment = (req, res) => {\r\n-    const { taskId, commentId } = req.params;  // taskId pour la tâche, commentId pour le commentaire\r\n-    const { newComment, user } = req.body;  // Nouveau commentaire et utilisateur\r\n-  \r\n-    const filePath = path.join(__dirname, '..', 'comments', `${taskId}.txt`);\r\n-  \r\n+    res.json({ message: 'Comment deleted successfully' });\r\n+  } catch (error) {\r\n+    console.error('Error deleting comment:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+};\r\n+\r\n+exports.updateComment = (req, res) => {\r\n+  try {\r\n+    const { taskId, commentId } = req.params;\r\n+    const { text } = req.body;\r\n+\r\n+    if (!text) {\r\n+      return res.status(400).json({ error: 'Text is required' });\r\n+    }\r\n+\r\n+    const filePath = getCommentFilePath(taskId);\r\n+\r\n     if (!fs.existsSync(filePath)) {\r\n-      return res.status(404).send('Aucun commentaire trouvé pour cette tâche');\r\n+      return res.status(404).json({ error: 'No comments found for this task' });\r\n     }\r\n-  \r\n-    // Lire le fichier de commentaires\r\n+\r\n     const data = fs.readFileSync(filePath, 'utf8');\r\n-    const comments = data.split('\\n\\n');  // Supposons que chaque commentaire est séparé par un double saut de ligne\r\n-  \r\n-    // Trouver le commentaire à modifier (par exemple, on peut identifier le commentaire par son index ou une partie de son contenu)\r\n-    const commentIndex = comments.findIndex(comment => comment.includes(`Utilisateur: ${user}`) && comment.includes(newComment));\r\n-  \r\n-    if (commentIndex === -1) {\r\n-      return res.status(404).send('Commentaire à modifier introuvable');\r\n+    let comments = parseCommentsFile(data);\r\n+    let commentFound = false;\r\n+\r\n+    comments = comments.map(comment => {\r\n+      if (comment.id === commentId) {\r\n+        commentFound = true;\r\n+        return {\r\n+          ...comment,\r\n+          text,\r\n+          date: new Date().toISOString() // Update modification date\r\n+        };\r\n+      }\r\n+      return comment;\r\n+    });\r\n+\r\n+    if (!commentFound) {\r\n+      return res.status(404).json({ error: 'Comment not found' });\r\n     }\r\n-  \r\n-    // Remplacer le commentaire\r\n-    comments[commentIndex] = `Date: ${new Date().toISOString()}\\nUtilisateur: ${user}\\nCommentaire: ${newComment}\\n\\n`;\r\n-  \r\n-    // Écrire à nouveau les commentaires modifiés dans le fichier\r\n-    fs.writeFileSync(filePath, comments.join('\\n\\n'), 'utf8');\r\n-    res.send('Commentaire modifié');\r\n-  };\r\n+\r\n+    fs.writeFileSync(filePath, stringifyComments(comments));\r\n     \r\n+    res.json(comments.find(comment => comment.id === commentId));\r\n+  } catch (error) {\r\n+    console.error('Error updating comment:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744737062654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n       });\r\n       return commentObj;\r\n     });\r\n };\r\n-\r\n+//\r\n const stringifyComments = (comments) => {\r\n   return comments.map(comment => {\r\n     return Object.entries(comment)\r\n       .map(([key, value]) => `${key}: ${value}`)\r\n"
                },
                {
                    "date": 1744737076512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n \r\n const getCommentFilePath = (taskId) => {\r\n   return path.join(COMMENTS_DIR, `${taskId}.txt`);\r\n };\r\n-\r\n+//txt To json\r\n const parseCommentsFile = (fileContent) => {\r\n   return fileContent.split('\\n\\n')\r\n     .filter(comment => comment.trim() !== '')\r\n     .map(comment => {\r\n@@ -28,9 +28,9 @@\n       });\r\n       return commentObj;\r\n     });\r\n };\r\n-//\r\n+//Json to txt\r\n const stringifyComments = (comments) => {\r\n   return comments.map(comment => {\r\n     return Object.entries(comment)\r\n       .map(([key, value]) => `${key}: ${value}`)\r\n"
                }
            ],
            "date": 1744731530666,
            "name": "Commit-0",
            "content": "const fs = require('fs');\r\nconst path = require('path');\r\n\r\nexports.addComment = (req, res) => {\r\n  const { taskId } = req.params;\r\n  const comment = req.body.comment;\r\n  const filePath = path.join(__dirname, '..', 'comments', `${taskId}.txt`);\r\n\r\n  fs.appendFile(filePath, comment + '\\n', (err) => {\r\n    if (err) return res.status(500).send('Erreur lors de l\\'écriture');\r\n    res.send('Commentaire ajouté');\r\n  });\r\n};\r\n\r\nexports.getComments = (req, res) => {\r\n  const { taskId } = req.params;\r\n  const filePath = path.join(__dirname, '..', 'comments', `${taskId}.txt`);\r\n\r\n  if (!fs.existsSync(filePath)) {\r\n    return res.status(404).send('Aucun commentaire trouvé');\r\n  }\r\n\r\n  const data = fs.readFileSync(filePath, 'utf8');\r\n  res.send(data);\r\n};\r\n"
        }
    ]
}