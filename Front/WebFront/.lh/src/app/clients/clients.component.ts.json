{
    "sourceFile": "src/app/clients/clients.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 29,
            "patches": [
                {
                    "date": 1746446042482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747785771207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,207 @@\n-import { Component } from '@angular/core';\r\n+import { Component, OnInit } from '@angular/core';\r\n+import { Router } from '@angular/router';\r\n+import { HttpHeaders, HttpClient } from '@angular/common/http'; // Assuming you might use HttpClient directly or in a service\r\n+// import { ClientService } from './client.service'; // Supposons que vous ayez un service pour les clients\r\n+// import { AuthService } from '../auth/auth.service'; // Supposons que vous ayez un service d'authentification\r\n \r\n+// Définition de l'interface Client (vous pouvez la placer dans un fichier séparé, ex: client.model.ts)\r\n+export interface Client {\r\n+  id: string;\r\n+  name: string;\r\n+  address: string;\r\n+  email: string;\r\n+  phone: string;\r\n+  createdAt: number; // Ou Date, selon comment vous le gérez\r\n+  idCompany?: string; // Optionnel si non utilisé directement dans le template\r\n+  companyName?: string; // Optionnel si non utilisé directement dans le template\r\n+}\r\n+\r\n @Component({\r\n   selector: 'app-clients',\r\n   templateUrl: './clients.component.html',\r\n-  styleUrl: './clients.component.scss',\r\n-  standalone: false\r\n+  styleUrls: ['./clients.component.scss']\r\n })\r\n-export class ClientsComponent {\r\n+export class ClientsComponent implements OnInit {\r\n \r\n+  clients: Client[] = [];\r\n+  filteredClients: Client[] = [];\r\n+  searchQuery: string = '';\r\n+  viewMode: 'list' | 'card' = 'list'; // Default view mode\r\n+\r\n+  editingClientId: string | null = null;\r\n+  editedClientData: Partial<Client> = {}; // Pour l'édition en ligne\r\n+\r\n+  // Simulez votre AuthService et ClientService ici ou injectez-les\r\n+  // constructor(\r\n+  //   private clientService: ClientService,\r\n+  //   private authService: AuthService,\r\n+  //   private router: Router,\r\n+  //   private http: HttpClient // Si vous utilisez HttpClient directement pour certaines opérations\r\n+  // ) { }\r\n+\r\n+  // Constructeur simplifié pour l'exemple\r\n+  constructor(\r\n+    private router: Router,\r\n+    // private authService: AuthService, // Décommentez si AuthService est utilisé pour getAccessToken\r\n+    private http: HttpClient // Exemple, idéalement via un service\r\n+  ) {}\r\n+\r\n+  ngOnInit(): void {\r\n+    this.loadClients();\r\n+  }\r\n+\r\n+  // Méthode pour obtenir les en-têtes API (comme fournie)\r\n+  private getApiHeaders(): HttpHeaders {\r\n+    // const token = this.authService.getAccessToken(); // Décommentez si vous utilisez AuthService\r\n+    const token = 'VOTRE_TOKEN_ICI'; // Placeholder, remplacez par la vraie logique\r\n+    return new HttpHeaders({\r\n+      'Content-Type': 'application/json',\r\n+      'Authorization': `Bearer ${token}`\r\n+    });\r\n+  }\r\n+\r\n+  loadClients(): void {\r\n+    // Simulez la récupération des clients. Remplacez par un appel à votre ClientService.\r\n+    // Exemple avec HttpClient (adaptez l'URL)\r\n+    // const headers = this.getApiHeaders();\r\n+    // this.http.get<Client[]>('/api/clients', { headers }).subscribe({\r\n+    //   next: (data) => {\r\n+    //     this.clients = data;\r\n+    //     this.applyFilter(); // Appliquer le filtre initial (qui sera vide au début)\r\n+    //   },\r\n+    //   error: (err) => console.error('Erreur lors de la récupération des clients', err)\r\n+    // });\r\n+\r\n+    // Données de simulation pour l'exemple :\r\n+    this.clients = [\r\n+      {\r\n+        \"id\": \"50da8c53-f1bb-47cb-9d06-b31e55706ed8\",\r\n+        \"name\": \"Salma Bennani\",\r\n+        \"address\": \"123 Rue de la Paix, Tunis\",\r\n+        \"email\": \"salma@gmail.com\",\r\n+        \"phone\": \"216 XX XXX XXX\",\r\n+        \"createdAt\": 1747780390913,\r\n+        \"idCompany\": \"680657ad26cbca08d31f221c\",\r\n+        \"companyName\": \"Archi Concept Tunisie\"\r\n+      },\r\n+      {\r\n+        \"id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\r\n+        \"name\": \"Ahmed Cherif\",\r\n+        \"address\": \"45 Avenue Habib Bourguiba, Sfax\",\r\n+        \"email\": \"ahmed.c@example.com\",\r\n+        \"phone\": \"216 YY YYY YYY\",\r\n+        \"createdAt\": 1747700000000\r\n+      },\r\n+      {\r\n+        \"id\": \"f0e1d2c3-b4a5-6789-0123-456789abcdef\",\r\n+        \"name\": \"Fatma Gharbi\",\r\n+        \"address\": \"\", // Adresse vide\r\n+        \"email\": \"fatma.gharbi@mail.com\",\r\n+        \"phone\": \"\", // Téléphone vide\r\n+        \"createdAt\": 1747600000000\r\n+      }\r\n+    ];\r\n+    this.applyFilter();\r\n+  }\r\n+\r\n+  applyFilter(): void {\r\n+    const query = this.searchQuery.toLowerCase().trim();\r\n+    if (!query) {\r\n+      this.filteredClients = [...this.clients];\r\n+    } else {\r\n+      this.filteredClients = this.clients.filter(client =>\r\n+        client.name.toLowerCase().includes(query) ||\r\n+        client.email.toLowerCase().includes(query) ||\r\n+        (client.address && client.address.toLowerCase().includes(query)) ||\r\n+        (client.phone && client.phone.toLowerCase().includes(query))\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  toggleViewMode(mode: 'list' | 'card'): void {\r\n+    this.viewMode = mode;\r\n+  }\r\n+\r\n+  addClient(): void {\r\n+    console.log('Ouvrir le formulaire/modal pour ajouter un nouveau client');\r\n+    // Exemple: this.router.navigate(['/clients/nouveau']);\r\n+    // Ou ouvrir un dialogue modal\r\n+  }\r\n+\r\n+  goToClientDetails(client: Client): void {\r\n+    // Si l'édition est active sur cette ligne, ne pas naviguer\r\n+    if (this.editingClientId === client.id) {\r\n+      return;\r\n+    }\r\n+    console.log('Naviguer vers les détails du client:', client.id);\r\n+    // Exemple: this.router.navigate(['/clients', client.id]);\r\n+  }\r\n+\r\n+  // --- Fonctions pour l'édition en ligne (exemple basique) ---\r\n+  // Vous devrez probablement ajouter des boutons \"Modifier\", \"Sauvegarder\", \"Annuler\" dans le HTML\r\n+  // et appeler ces méthodes. Pour l'instant, le HTML active l'édition au clic sur la ligne.\r\n+\r\n+  // Cette méthode n'est plus directement appelée par le (click) sur <tr> si goToClientDetails est prioritaire.\r\n+  // Vous pourriez avoir un bouton \"Modifier\" séparé.\r\n+  // startEdit(client: Client, event: MouseEvent): void {\r\n+  //   event.stopPropagation(); // Empêche goToClientDetails d'être appelé\r\n+  //   this.editingClientId = client.id;\r\n+  //   this.editedClientData = { ...client }; // Copie les données pour l'édition\r\n+  // }\r\n+\r\n+  // saveEdit(clientId: string, event: MouseEvent): void {\r\n+  //   event.stopPropagation();\r\n+  //   if (!this.editedClientData) return;\r\n+\r\n+  //   // Logique pour sauvegarder les modifications via votre service\r\n+  //   // this.clientService.updateClient(clientId, this.editedClientData).subscribe({\r\n+  //   //   next: (updatedClient) => {\r\n+  //   //     const index = this.clients.findIndex(c => c.id === clientId);\r\n+  //   //     if (index !== -1) {\r\n+  //   //       this.clients[index] = { ...this.clients[index], ...updatedClient }; // Mettre à jour avec les données du serveur\r\n+  //   //       this.applyFilter();\r\n+  //   //     }\r\n+  //   //     this.cancelEdit(event);\r\n+  //   //   },\r\n+  //   //   error: (err) => console.error('Erreur lors de la mise à jour du client', err)\r\n+  //   // });\r\n+  //   console.log('Sauvegarder les modifications pour le client:', clientId, this.editedClientData);\r\n+  //   const index = this.clients.findIndex(c => c.id === clientId);\r\n+  //   if (index !== -1) {\r\n+  //       this.clients[index] = { ...this.clients[index], ...this.editedClientData };\r\n+  //       this.applyFilter();\r\n+  //   }\r\n+  //   this.editingClientId = null;\r\n+  //   this.editedClientData = {};\r\n+  // }\r\n+\r\n+  // cancelEdit(event?: MouseEvent): void {\r\n+  //   if(event) event.stopPropagation();\r\n+  //   this.editingClientId = null;\r\n+  //   this.editedClientData = {};\r\n+  // }\r\n+  // --- Fin des fonctions d'édition en ligne ---\r\n+\r\n+  deleteClient(clientId: string, event: MouseEvent): void {\r\n+    event.stopPropagation(); // Empêche le clic de se propager à la ligne (goToClientDetails)\r\n+\r\n+    // Demander confirmation avant de supprimer\r\n+    if (confirm('Êtes-vous sûr de vouloir supprimer ce client ?')) {\r\n+      // Logique pour supprimer le client via votre service\r\n+      // const headers = this.getApiHeaders();\r\n+      // this.http.delete(`/api/clients/${clientId}`, { headers }).subscribe({\r\n+      //   next: () => {\r\n+      //     this.clients = this.clients.filter(c => c.id !== clientId);\r\n+      //     this.applyFilter();\r\n+      //     console.log('Client supprimé:', clientId);\r\n+      //   },\r\n+      //   error: (err) => console.error('Erreur lors de la suppression du client', err)\r\n+      // });\r\n+\r\n+      // Simulation\r\n+      this.clients = this.clients.filter(c => c.id !== clientId);\r\n+      this.applyFilter();\r\n+      console.log('Client supprimé (simulation):', clientId);\r\n+    }\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1747786234248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,20 +186,9 @@\n     event.stopPropagation(); // Empêche le clic de se propager à la ligne (goToClientDetails)\r\n \r\n     // Demander confirmation avant de supprimer\r\n     if (confirm('Êtes-vous sûr de vouloir supprimer ce client ?')) {\r\n-      // Logique pour supprimer le client via votre service\r\n-      // const headers = this.getApiHeaders();\r\n-      // this.http.delete(`/api/clients/${clientId}`, { headers }).subscribe({\r\n-      //   next: () => {\r\n-      //     this.clients = this.clients.filter(c => c.id !== clientId);\r\n-      //     this.applyFilter();\r\n-      //     console.log('Client supprimé:', clientId);\r\n-      //   },\r\n-      //   error: (err) => console.error('Erreur lors de la suppression du client', err)\r\n-      // });\r\n-\r\n-      // Simulation\r\n+   \r\n       this.clients = this.clients.filter(c => c.id !== clientId);\r\n       this.applyFilter();\r\n       console.log('Client supprimé (simulation):', clientId);\r\n     }\r\n"
                },
                {
                    "date": 1747786245199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,57 +136,13 @@\n     console.log('Naviguer vers les détails du client:', client.id);\r\n     // Exemple: this.router.navigate(['/clients', client.id]);\r\n   }\r\n \r\n-  // --- Fonctions pour l'édition en ligne (exemple basique) ---\r\n-  // Vous devrez probablement ajouter des boutons \"Modifier\", \"Sauvegarder\", \"Annuler\" dans le HTML\r\n-  // et appeler ces méthodes. Pour l'instant, le HTML active l'édition au clic sur la ligne.\r\n \r\n-  // Cette méthode n'est plus directement appelée par le (click) sur <tr> si goToClientDetails est prioritaire.\r\n-  // Vous pourriez avoir un bouton \"Modifier\" séparé.\r\n-  // startEdit(client: Client, event: MouseEvent): void {\r\n-  //   event.stopPropagation(); // Empêche goToClientDetails d'être appelé\r\n-  //   this.editingClientId = client.id;\r\n-  //   this.editedClientData = { ...client }; // Copie les données pour l'édition\r\n-  // }\r\n-\r\n-  // saveEdit(clientId: string, event: MouseEvent): void {\r\n-  //   event.stopPropagation();\r\n-  //   if (!this.editedClientData) return;\r\n-\r\n-  //   // Logique pour sauvegarder les modifications via votre service\r\n-  //   // this.clientService.updateClient(clientId, this.editedClientData).subscribe({\r\n-  //   //   next: (updatedClient) => {\r\n-  //   //     const index = this.clients.findIndex(c => c.id === clientId);\r\n-  //   //     if (index !== -1) {\r\n-  //   //       this.clients[index] = { ...this.clients[index], ...updatedClient }; // Mettre à jour avec les données du serveur\r\n-  //   //       this.applyFilter();\r\n-  //   //     }\r\n-  //   //     this.cancelEdit(event);\r\n-  //   //   },\r\n-  //   //   error: (err) => console.error('Erreur lors de la mise à jour du client', err)\r\n-  //   // });\r\n-  //   console.log('Sauvegarder les modifications pour le client:', clientId, this.editedClientData);\r\n-  //   const index = this.clients.findIndex(c => c.id === clientId);\r\n-  //   if (index !== -1) {\r\n-  //       this.clients[index] = { ...this.clients[index], ...this.editedClientData };\r\n-  //       this.applyFilter();\r\n-  //   }\r\n-  //   this.editingClientId = null;\r\n-  //   this.editedClientData = {};\r\n-  // }\r\n-\r\n-  // cancelEdit(event?: MouseEvent): void {\r\n-  //   if(event) event.stopPropagation();\r\n-  //   this.editingClientId = null;\r\n-  //   this.editedClientData = {};\r\n-  // }\r\n-  // --- Fin des fonctions d'édition en ligne ---\r\n-\r\n   deleteClient(clientId: string, event: MouseEvent): void {\r\n     event.stopPropagation(); // Empêche le clic de se propager à la ligne (goToClientDetails)\r\n \r\n-    // Demander confirmation avant de supprimer\r\n+  \r\n     if (confirm('Êtes-vous sûr de vouloir supprimer ce client ?')) {\r\n    \r\n       this.clients = this.clients.filter(c => c.id !== clientId);\r\n       this.applyFilter();\r\n"
                },
                {
                    "date": 1747786258630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,48 +60,9 @@\n     });\r\n   }\r\n \r\n   loadClients(): void {\r\n-    // Simulez la récupération des clients. Remplacez par un appel à votre ClientService.\r\n-    // Exemple avec HttpClient (adaptez l'URL)\r\n-    // const headers = this.getApiHeaders();\r\n-    // this.http.get<Client[]>('/api/clients', { headers }).subscribe({\r\n-    //   next: (data) => {\r\n-    //     this.clients = data;\r\n-    //     this.applyFilter(); // Appliquer le filtre initial (qui sera vide au début)\r\n-    //   },\r\n-    //   error: (err) => console.error('Erreur lors de la récupération des clients', err)\r\n-    // });\r\n-\r\n-    // Données de simulation pour l'exemple :\r\n-    this.clients = [\r\n-      {\r\n-        \"id\": \"50da8c53-f1bb-47cb-9d06-b31e55706ed8\",\r\n-        \"name\": \"Salma Bennani\",\r\n-        \"address\": \"123 Rue de la Paix, Tunis\",\r\n-        \"email\": \"salma@gmail.com\",\r\n-        \"phone\": \"216 XX XXX XXX\",\r\n-        \"createdAt\": 1747780390913,\r\n-        \"idCompany\": \"680657ad26cbca08d31f221c\",\r\n-        \"companyName\": \"Archi Concept Tunisie\"\r\n-      },\r\n-      {\r\n-        \"id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\r\n-        \"name\": \"Ahmed Cherif\",\r\n-        \"address\": \"45 Avenue Habib Bourguiba, Sfax\",\r\n-        \"email\": \"ahmed.c@example.com\",\r\n-        \"phone\": \"216 YY YYY YYY\",\r\n-        \"createdAt\": 1747700000000\r\n-      },\r\n-      {\r\n-        \"id\": \"f0e1d2c3-b4a5-6789-0123-456789abcdef\",\r\n-        \"name\": \"Fatma Gharbi\",\r\n-        \"address\": \"\", // Adresse vide\r\n-        \"email\": \"fatma.gharbi@mail.com\",\r\n-        \"phone\": \"\", // Téléphone vide\r\n-        \"createdAt\": 1747600000000\r\n-      }\r\n-    ];\r\n+    \r\n     this.applyFilter();\r\n   }\r\n \r\n   applyFilter(): void {\r\n"
                },
                {
                    "date": 1747786265283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,18 +49,10 @@\n   ngOnInit(): void {\r\n     this.loadClients();\r\n   }\r\n \r\n-  // Méthode pour obtenir les en-têtes API (comme fournie)\r\n-  private getApiHeaders(): HttpHeaders {\r\n-    // const token = this.authService.getAccessToken(); // Décommentez si vous utilisez AuthService\r\n-    const token = 'VOTRE_TOKEN_ICI'; // Placeholder, remplacez par la vraie logique\r\n-    return new HttpHeaders({\r\n-      'Content-Type': 'application/json',\r\n-      'Authorization': `Bearer ${token}`\r\n-    });\r\n-  }\r\n \r\n+\r\n   loadClients(): void {\r\n     \r\n     this.applyFilter();\r\n   }\r\n"
                },
                {
                    "date": 1747786293203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,20 @@\n \r\n \r\n \r\n   loadClients(): void {\r\n-    \r\n+    this.commercialService.getInvoices().subscribe({\r\n+      next: (data) => {\r\n+        console.log(\"les factures\",data)\r\n+        this.invoices = data;\r\n+        this.isLoading = false;\r\n+      },\r\n+      error: (err) => {\r\n+        console.error('Error fetching invoices:', err);\r\n+        this.errorMessage = 'Failed to load invoices. Please try again later.';\r\n+        this.isLoading = false;\r\n+      }\r\n+    });\r\n     this.applyFilter();\r\n   }\r\n \r\n   applyFilter(): void {\r\n"
                },
                {
                    "date": 1747786302674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n   editingClientId: string | null = null;\r\n   editedClientData: Partial<Client> = {}; // Pour l'édition en ligne\r\n \r\n   // Simulez votre AuthService et ClientService ici ou injectez-les\r\n-  // constructor(\r\n+  constructor(\r\n   //   private clientService: ClientService,\r\n   //   private authService: AuthService,\r\n   //   private router: Router,\r\n   //   private http: HttpClient // Si vous utilisez HttpClient directement pour certaines opérations\r\n"
                },
                {
                    "date": 1747786309791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,12 +32,12 @@\n   editedClientData: Partial<Client> = {}; // Pour l'édition en ligne\r\n \r\n   // Simulez votre AuthService et ClientService ici ou injectez-les\r\n   constructor(\r\n-  //   private clientService: ClientService,\r\n-  //   private authService: AuthService,\r\n-  //   private router: Router,\r\n-  //   private http: HttpClient // Si vous utilisez HttpClient directement pour certaines opérations\r\n+     private clientService: ClientService,\r\n+     private authService: AuthService,\r\n+     private router: Router,\r\n+     private http: HttpClient // Si vous utilisez HttpClient directement pour certaines opérations\r\n   // ) { }\r\n \r\n   // Constructeur simplifié pour l'exemple\r\n   constructor(\r\n"
                },
                {
                    "date": 1747786316907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,13 +32,13 @@\n   editedClientData: Partial<Client> = {}; // Pour l'édition en ligne\r\n \r\n   // Simulez votre AuthService et ClientService ici ou injectez-les\r\n   constructor(\r\n-     private clientService: ClientService,\r\n+     private clientService: Co,\r\n      private authService: AuthService,\r\n      private router: Router,\r\n      private http: HttpClient // Si vous utilisez HttpClient directement pour certaines opérations\r\n-  // ) { }\r\n+   ) { }\r\n \r\n   // Constructeur simplifié pour l'exemple\r\n   constructor(\r\n     private router: Router,\r\n"
                },
                {
                    "date": 1747786326106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { Component, OnInit } from '@angular/core';\r\n import { Router } from '@angular/router';\r\n import { HttpHeaders, HttpClient } from '@angular/common/http'; // Assuming you might use HttpClient directly or in a service\r\n+import { CommercialService } from '../services/commercial.service';\r\n // import { ClientService } from './client.service'; // Supposons que vous ayez un service pour les clients\r\n // import { AuthService } from '../auth/auth.service'; // Supposons que vous ayez un service d'authentification\r\n \r\n // Définition de l'interface Client (vous pouvez la placer dans un fichier séparé, ex: client.model.ts)\r\n@@ -32,9 +33,9 @@\n   editedClientData: Partial<Client> = {}; // Pour l'édition en ligne\r\n \r\n   // Simulez votre AuthService et ClientService ici ou injectez-les\r\n   constructor(\r\n-     private clientService: Co,\r\n+     private commercialService: CommercialService,\r\n      private authService: AuthService,\r\n      private router: Router,\r\n      private http: HttpClient // Si vous utilisez HttpClient directement pour certaines opérations\r\n    ) { }\r\n"
                },
                {
                    "date": 1747786342506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { Component, OnInit } from '@angular/core';\r\n import { Router } from '@angular/router';\r\n import { HttpHeaders, HttpClient } from '@angular/common/http'; // Assuming you might use HttpClient directly or in a service\r\n import { CommercialService } from '../services/commercial.service';\r\n+import { AuthService } from '../services/auth.service';\r\n // import { ClientService } from './client.service'; // Supposons que vous ayez un service pour les clients\r\n // import { AuthService } from '../auth/auth.service'; // Supposons que vous ayez un service d'authentification\r\n \r\n // Définition de l'interface Client (vous pouvez la placer dans un fichier séparé, ex: client.model.ts)\r\n@@ -37,14 +38,9 @@\n      private commercialService: CommercialService,\r\n      private authService: AuthService,\r\n      private router: Router,\r\n      private http: HttpClient // Si vous utilisez HttpClient directement pour certaines opérations\r\n-   ) { }\r\n-\r\n-  // Constructeur simplifié pour l'exemple\r\n-  constructor(\r\n-    private router: Router,\r\n-    // private authService: AuthService, // Décommentez si AuthService est utilisé pour getAccessToken\r\n+  \r\n     private http: HttpClient // Exemple, idéalement via un service\r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n"
                },
                {
                    "date": 1747786348635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,11 +37,9 @@\n   constructor(\r\n      private commercialService: CommercialService,\r\n      private authService: AuthService,\r\n      private router: Router,\r\n-     private http: HttpClient // Si vous utilisez HttpClient directement pour certaines opérations\r\n-  \r\n-    private http: HttpClient // Exemple, idéalement via un service\r\n+     private http: HttpClient \r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n     this.loadClients();\r\n"
                },
                {
                    "date": 1747786358183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,10 +46,10 @@\n   }\r\n \r\n \r\n \r\n-  loadClients(): void {\r\n-    this.commercialService.getInvoices().subscribe({\r\n+  loadClients(id): void {\r\n+    this.commercialService.get().subscribe({\r\n       next: (data) => {\r\n         console.log(\"les factures\",data)\r\n         this.invoices = data;\r\n         this.isLoading = false;\r\n"
                },
                {
                    "date": 1747786365676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n   }\r\n \r\n \r\n \r\n-  loadClients(id): void {\r\n+  loadClients(idCompany:String): void {\r\n     this.commercialService.get().subscribe({\r\n       next: (data) => {\r\n         console.log(\"les factures\",data)\r\n         this.invoices = data;\r\n"
                },
                {
                    "date": 1747786374834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n \r\n \r\n \r\n   loadClients(idCompany:String): void {\r\n-    this.commercialService.get().subscribe({\r\n+    this.commercialService.getClients(idCompany).subscribe({\r\n       next: (data) => {\r\n         console.log(\"les factures\",data)\r\n         this.invoices = data;\r\n         this.isLoading = false;\r\n"
                },
                {
                    "date": 1747786404537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \r\n   loadClients(idCompany:String): void {\r\n     this.commercialService.getClients(idCompany).subscribe({\r\n       next: (data) => {\r\n-        console.log(\"les factures\",data)\r\n+        console.log(\"les clients\",data)\r\n         this.invoices = data;\r\n         this.isLoading = false;\r\n       },\r\n       error: (err) => {\r\n"
                },
                {
                    "date": 1747786410035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,10 +50,9 @@\n   loadClients(idCompany:String): void {\r\n     this.commercialService.getClients(idCompany).subscribe({\r\n       next: (data) => {\r\n         console.log(\"les clients\",data)\r\n-        this.invoices = data;\r\n-        this.isLoading = false;\r\n+        this.clients\r\n       },\r\n       error: (err) => {\r\n         console.error('Error fetching invoices:', err);\r\n         this.errorMessage = 'Failed to load invoices. Please try again later.';\r\n"
                },
                {
                    "date": 1747786417075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,14 +50,13 @@\n   loadClients(idCompany:String): void {\r\n     this.commercialService.getClients(idCompany).subscribe({\r\n       next: (data) => {\r\n         console.log(\"les clients\",data)\r\n-        this.clients\r\n+        this.clients=data;\r\n       },\r\n       error: (err) => {\r\n         console.error('Error fetching invoices:', err);\r\n-        this.errorMessage = 'Failed to load invoices. Please try again later.';\r\n-        this.isLoading = false;\r\n+        \r\n       }\r\n     });\r\n     this.applyFilter();\r\n   }\r\n"
                },
                {
                    "date": 1747786437985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n   }\r\n \r\n \r\n \r\n-  loadClients(idCompany:String): void {\r\n+  loadClients(idCompany: string): void {\r\n     this.commercialService.getClients(idCompany).subscribe({\r\n       next: (data) => {\r\n         console.log(\"les clients\",data)\r\n         this.clients=data;\r\n"
                },
                {
                    "date": 1747786444169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,9 @@\n      private http: HttpClient \r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n+    const \r\n     this.loadClients();\r\n   }\r\n \r\n \r\n"
                },
                {
                    "date": 1747786450628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,10 +40,9 @@\n      private router: Router,\r\n      private http: HttpClient \r\n   ) {}\r\n \r\n-  ngOnInit(): void {\r\n-    const \r\n+  ngOnInit()C\r\n     this.loadClients();\r\n   }\r\n \r\n \r\n"
                },
                {
                    "date": 1747786456536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,10 @@\n      private router: Router,\r\n      private http: HttpClient \r\n   ) {}\r\n \r\n-  ngOnInit()C\r\n+  ngOnInit(): void {\r\n+    const idCompany=lo\r\n     this.loadClients();\r\n   }\r\n \r\n \r\n"
                },
                {
                    "date": 1747786462835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n      private http: HttpClient \r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n-    const idCompany=lo\r\n+    const idCompany=localStorage.getItem\r\n     this.loadClients();\r\n   }\r\n \r\n \r\n"
                },
                {
                    "date": 1747786468640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,110 @@\n+import { Component, OnInit } from '@angular/core';\r\n+import { Router } from '@angular/router';\r\n+import { HttpHeaders, HttpClient } from '@angular/common/http'; // Assuming you might use HttpClient directly or in a service\r\n+import { CommercialService } from '../services/commercial.service';\r\n+import { AuthService } from '../services/auth.service';\r\n+// import { ClientService } from './client.service'; // Supposons que vous ayez un service pour les clients\r\n+// import { AuthService } from '../auth/auth.service'; // Supposons que vous ayez un service d'authentification\r\n+\r\n+// Définition de l'interface Client (vous pouvez la placer dans un fichier séparé, ex: client.model.ts)\r\n+export interface Client {\r\n+  id: string;\r\n+  name: string;\r\n+  address: string;\r\n+  email: string;\r\n+  phone: string;\r\n+  createdAt: number; // Ou Date, selon comment vous le gérez\r\n+  idCompany?: string; // Optionnel si non utilisé directement dans le template\r\n+  companyName?: string; // Optionnel si non utilisé directement dans le template\r\n+}\r\n+\r\n+@Component({\r\n+  selector: 'app-clients',\r\n+  templateUrl: './clients.component.html',\r\n+  styleUrls: ['./clients.component.scss']\r\n+})\r\n+export class ClientsComponent implements OnInit {\r\n+\r\n+  clients: Client[] = [];\r\n+  filteredClients: Client[] = [];\r\n+  searchQuery: string = '';\r\n+  viewMode: 'list' | 'card' = 'list'; // Default view mode\r\n+\r\n+  editingClientId: string | null = null;\r\n+  editedClientData: Partial<Client> = {}; // Pour l'édition en ligne\r\n+\r\n+  // Simulez votre AuthService et ClientService ici ou injectez-les\r\n+  constructor(\r\n+     private commercialService: CommercialService,\r\n+     private authService: AuthService,\r\n+     private router: Router,\r\n+     private http: HttpClient \r\n+  ) {}\r\n+\r\n+  ngOnInit(): void {\r\n+    const idCompany=localStorage.getItem('idCompany)\r\n+    this.loadClients();\r\n+  }\r\n+\r\n+\r\n+\r\n+  loadClients(idCompany: string): void {\r\n+    this.commercialService.getClients(idCompany).subscribe({\r\n+      next: (data) => {\r\n+        console.log(\"les clients\",data)\r\n+        this.clients=data;\r\n+      },\r\n+      error: (err) => {\r\n+        console.error('Error fetching invoices:', err);\r\n+        \r\n+      }\r\n+    });\r\n+    this.applyFilter();\r\n+  }\r\n+\r\n+  applyFilter(): void {\r\n+    const query = this.searchQuery.toLowerCase().trim();\r\n+    if (!query) {\r\n+      this.filteredClients = [...this.clients];\r\n+    } else {\r\n+      this.filteredClients = this.clients.filter(client =>\r\n+        client.name.toLowerCase().includes(query) ||\r\n+        client.email.toLowerCase().includes(query) ||\r\n+        (client.address && client.address.toLowerCase().includes(query)) ||\r\n+        (client.phone && client.phone.toLowerCase().includes(query))\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  toggleViewMode(mode: 'list' | 'card'): void {\r\n+    this.viewMode = mode;\r\n+  }\r\n+\r\n+  addClient(): void {\r\n+    console.log('Ouvrir le formulaire/modal pour ajouter un nouveau client');\r\n+    // Exemple: this.router.navigate(['/clients/nouveau']);\r\n+    // Ou ouvrir un dialogue modal\r\n+  }\r\n+\r\n+  goToClientDetails(client: Client): void {\r\n+    // Si l'édition est active sur cette ligne, ne pas naviguer\r\n+    if (this.editingClientId === client.id) {\r\n+      return;\r\n+    }\r\n+    console.log('Naviguer vers les détails du client:', client.id);\r\n+    // Exemple: this.router.navigate(['/clients', client.id]);\r\n+  }\r\n+\r\n+\r\n+  deleteClient(clientId: string, event: MouseEvent): void {\r\n+    event.stopPropagation(); // Empêche le clic de se propager à la ligne (goToClientDetails)\r\n+\r\n+  \r\n+    if (confirm('Êtes-vous sûr de vouloir supprimer ce client ?')) {\r\n+   \r\n+      this.clients = this.clients.filter(c => c.id !== clientId);\r\n+      this.applyFilter();\r\n+      console.log('Client supprimé (simulation):', clientId);\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1747786486223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n      private http: HttpClient \r\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n-    const idCompany=localStorage.getItem('idCompany)\r\n+    const idCompany=localStorage.getItem('idAgence');\r\n     this.loadClients();\r\n   }\r\n \r\n \r\n@@ -107,114 +107,4 @@\n       console.log('Client supprimé (simulation):', clientId);\r\n     }\r\n   }\r\n }\r\n-import { Component, OnInit } from '@angular/core';\r\n-import { Router } from '@angular/router';\r\n-import { HttpHeaders, HttpClient } from '@angular/common/http'; // Assuming you might use HttpClient directly or in a service\r\n-import { CommercialService } from '../services/commercial.service';\r\n-import { AuthService } from '../services/auth.service';\r\n-// import { ClientService } from './client.service'; // Supposons que vous ayez un service pour les clients\r\n-// import { AuthService } from '../auth/auth.service'; // Supposons que vous ayez un service d'authentification\r\n-\r\n-// Définition de l'interface Client (vous pouvez la placer dans un fichier séparé, ex: client.model.ts)\r\n-export interface Client {\r\n-  id: string;\r\n-  name: string;\r\n-  address: string;\r\n-  email: string;\r\n-  phone: string;\r\n-  createdAt: number; // Ou Date, selon comment vous le gérez\r\n-  idCompany?: string; // Optionnel si non utilisé directement dans le template\r\n-  companyName?: string; // Optionnel si non utilisé directement dans le template\r\n-}\r\n-\r\n-@Component({\r\n-  selector: 'app-clients',\r\n-  templateUrl: './clients.component.html',\r\n-  styleUrls: ['./clients.component.scss']\r\n-})\r\n-export class ClientsComponent implements OnInit {\r\n-\r\n-  clients: Client[] = [];\r\n-  filteredClients: Client[] = [];\r\n-  searchQuery: string = '';\r\n-  viewMode: 'list' | 'card' = 'list'; // Default view mode\r\n-\r\n-  editingClientId: string | null = null;\r\n-  editedClientData: Partial<Client> = {}; // Pour l'édition en ligne\r\n-\r\n-  // Simulez votre AuthService et ClientService ici ou injectez-les\r\n-  constructor(\r\n-     private commercialService: CommercialService,\r\n-     private authService: AuthService,\r\n-     private router: Router,\r\n-     private http: HttpClient \r\n-  ) {}\r\n-\r\n-  ngOnInit(): void {\r\n-    const idCompany=localStorage.getItem\r\n-    this.loadClients();\r\n-  }\r\n-\r\n-\r\n-\r\n-  loadClients(idCompany: string): void {\r\n-    this.commercialService.getClients(idCompany).subscribe({\r\n-      next: (data) => {\r\n-        console.log(\"les clients\",data)\r\n-        this.clients=data;\r\n-      },\r\n-      error: (err) => {\r\n-        console.error('Error fetching invoices:', err);\r\n-        \r\n-      }\r\n-    });\r\n-    this.applyFilter();\r\n-  }\r\n-\r\n-  applyFilter(): void {\r\n-    const query = this.searchQuery.toLowerCase().trim();\r\n-    if (!query) {\r\n-      this.filteredClients = [...this.clients];\r\n-    } else {\r\n-      this.filteredClients = this.clients.filter(client =>\r\n-        client.name.toLowerCase().includes(query) ||\r\n-        client.email.toLowerCase().includes(query) ||\r\n-        (client.address && client.address.toLowerCase().includes(query)) ||\r\n-        (client.phone && client.phone.toLowerCase().includes(query))\r\n-      );\r\n-    }\r\n-  }\r\n-\r\n-  toggleViewMode(mode: 'list' | 'card'): void {\r\n-    this.viewMode = mode;\r\n-  }\r\n-\r\n-  addClient(): void {\r\n-    console.log('Ouvrir le formulaire/modal pour ajouter un nouveau client');\r\n-    // Exemple: this.router.navigate(['/clients/nouveau']);\r\n-    // Ou ouvrir un dialogue modal\r\n-  }\r\n-\r\n-  goToClientDetails(client: Client): void {\r\n-    // Si l'édition est active sur cette ligne, ne pas naviguer\r\n-    if (this.editingClientId === client.id) {\r\n-      return;\r\n-    }\r\n-    console.log('Naviguer vers les détails du client:', client.id);\r\n-    // Exemple: this.router.navigate(['/clients', client.id]);\r\n-  }\r\n-\r\n-\r\n-  deleteClient(clientId: string, event: MouseEvent): void {\r\n-    event.stopPropagation(); // Empêche le clic de se propager à la ligne (goToClientDetails)\r\n-\r\n-  \r\n-    if (confirm('Êtes-vous sûr de vouloir supprimer ce client ?')) {\r\n-   \r\n-      this.clients = this.clients.filter(c => c.id !== clientId);\r\n-      this.applyFilter();\r\n-      console.log('Client supprimé (simulation):', clientId);\r\n-    }\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1747786494441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n     const idCompany=localStorage.getItem('idAgence');\r\n-    this.loadClients();\r\n+    this.loadClients(idCompany);\r\n   }\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1747786502239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n     const idCompany=localStorage.getItem('idAgence');\r\n+    if(idCompany)\r\n     this.loadClients(idCompany);\r\n   }\r\n \r\n \r\n"
                },
                {
                    "date": 1747786509528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,13 @@\n   ) {}\r\n \r\n   ngOnInit(): void {\r\n     const idCompany=localStorage.getItem('idAgence');\r\n-    if(idCompany)\r\n-    this.loadClients(idCompany);\r\n+    if(idCompany){\r\n+      this.loadClients(idCompany);\r\n+    }\r\n+}\r\n+    \r\n   }\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1747786514904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n       this.loadClients(idCompany);\r\n     }\r\n }\r\n     \r\n-  }\r\n+ \r\n \r\n \r\n \r\n   loadClients(idCompany: string): void {\r\n"
                }
            ],
            "date": 1746446042482,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-clients',\r\n  templateUrl: './clients.component.html',\r\n  styleUrl: './clients.component.scss',\r\n  standalone: false\r\n})\r\nexport class ClientsComponent {\r\n\r\n}\r\n"
        }
    ]
}