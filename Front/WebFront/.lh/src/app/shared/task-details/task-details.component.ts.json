{
    "sourceFile": "src/app/shared/task-details/task-details.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1744726808515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744730337474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Component } from '@angular/core';\r\n+import { Component, Input } from '@angular/core';\r\n \r\n @Component({\r\n   selector: 'app-task-details',\r\n   templateUrl: './task-details.component.html',\r\n"
                },
                {
                    "date": 1744730353361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,101 +8,5 @@\n export class TaskDetailsComponent {\r\n   @Input() task: any;\r\n   @Input() phaseName: string = '';\r\n   \r\n-  comments: Comment[] = [];\r\n-  mediaFiles: MediaFile[] = [];\r\n-  taskHistory: TaskHistory[] = [];\r\n-  newComment: string = '';\r\n-\r\n-  constructor(\r\n-    public activeModal: NgbActiveModal,\r\n-    private taskService: TaskService\r\n-  ) {}\r\n-\r\n-  ngOnInit(): void {\r\n-    this.loadTaskDetails();\r\n-  }\r\n-\r\n-  loadTaskDetails(): void {\r\n-    // Charger les commentaires\r\n-    this.taskService.getComments(this.task._id).subscribe(comments => {\r\n-      this.comments = comments;\r\n-    });\r\n-\r\n-    // Charger les médias\r\n-    this.taskService.getMediaFiles(this.task._id).subscribe(media => {\r\n-      this.mediaFiles = media;\r\n-    });\r\n-\r\n-    // Charger l'historique\r\n-    this.taskService.getTaskHistory(this.task._id).subscribe(history => {\r\n-      this.taskHistory = history;\r\n-    });\r\n-  }\r\n-\r\n-  addComment(): void {\r\n-    if (this.newComment.trim()) {\r\n-      const comment: Comment = {\r\n-        text: this.newComment,\r\n-        user: { name: 'Utilisateur actuel', avatar: 'assets/images/user.png' },\r\n-        date: new Date()\r\n-      };\r\n-\r\n-      this.taskService.addComment(this.task._id, comment).subscribe(() => {\r\n-        this.comments.push(comment);\r\n-        this.newComment = '';\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  handleFileInput(event: any): void {\r\n-    const files = event.target.files;\r\n-    for (let file of files) {\r\n-      const reader = new FileReader();\r\n-      reader.onload = (e: any) => {\r\n-        const media: MediaFile = {\r\n-          url: e.target.result,\r\n-          type: file.type.includes('image') ? 'image' : 'video',\r\n-          name: file.name\r\n-        };\r\n-        this.taskService.addMedia(this.task._id, media).subscribe(() => {\r\n-          this.mediaFiles.push(media);\r\n-        });\r\n-      };\r\n-      reader.readAsDataURL(file);\r\n-    }\r\n-  }\r\n-\r\n-  deleteMedia(media: MediaFile): void {\r\n-    this.taskService.deleteMedia(this.task._id, media).subscribe(() => {\r\n-      this.mediaFiles = this.mediaFiles.filter(m => m.url !== media.url);\r\n-    });\r\n-  }\r\n-\r\n-  updateStatus(): void {\r\n-    this.taskService.updateTaskStatus(this.task._id, this.task.status).subscribe(() => {\r\n-      this.addHistoryEntry(`Statut changé à ${this.task.status}`);\r\n-    });\r\n-  }\r\n-\r\n-  updatePriority(): void {\r\n-    this.taskService.updateTaskPriority(this.task._id, this.task.priority).subscribe(() => {\r\n-      this.addHistoryEntry(`Priorité changée à ${this.task.priority}`);\r\n-    });\r\n-  }\r\n-\r\n-  addHistoryEntry(action: string): void {\r\n-    const historyEntry: TaskHistory = {\r\n-      user: { name: 'Utilisateur actuel' },\r\n-      action: action,\r\n-      date: new Date()\r\n-    };\r\n-    this.taskHistory.unshift(historyEntry);\r\n-  }\r\n-\r\n-  saveChanges(): void {\r\n-    this.taskService.updateTask(this.task._id, this.task).subscribe(() => {\r\n-      this.activeModal.close(this.task);\r\n-    });\r\n-  }\r\n }\r\n"
                }
            ],
            "date": 1744726808515,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-task-details',\r\n  templateUrl: './task-details.component.html',\r\n  styleUrl: './task-details.component.scss'\r\n})\r\nexport class TaskDetailsComponent {\r\n  @Input() task: any;\r\n  @Input() phaseName: string = '';\r\n  \r\n  comments: Comment[] = [];\r\n  mediaFiles: MediaFile[] = [];\r\n  taskHistory: TaskHistory[] = [];\r\n  newComment: string = '';\r\n\r\n  constructor(\r\n    public activeModal: NgbActiveModal,\r\n    private taskService: TaskService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadTaskDetails();\r\n  }\r\n\r\n  loadTaskDetails(): void {\r\n    // Charger les commentaires\r\n    this.taskService.getComments(this.task._id).subscribe(comments => {\r\n      this.comments = comments;\r\n    });\r\n\r\n    // Charger les médias\r\n    this.taskService.getMediaFiles(this.task._id).subscribe(media => {\r\n      this.mediaFiles = media;\r\n    });\r\n\r\n    // Charger l'historique\r\n    this.taskService.getTaskHistory(this.task._id).subscribe(history => {\r\n      this.taskHistory = history;\r\n    });\r\n  }\r\n\r\n  addComment(): void {\r\n    if (this.newComment.trim()) {\r\n      const comment: Comment = {\r\n        text: this.newComment,\r\n        user: { name: 'Utilisateur actuel', avatar: 'assets/images/user.png' },\r\n        date: new Date()\r\n      };\r\n\r\n      this.taskService.addComment(this.task._id, comment).subscribe(() => {\r\n        this.comments.push(comment);\r\n        this.newComment = '';\r\n      });\r\n    }\r\n  }\r\n\r\n  handleFileInput(event: any): void {\r\n    const files = event.target.files;\r\n    for (let file of files) {\r\n      const reader = new FileReader();\r\n      reader.onload = (e: any) => {\r\n        const media: MediaFile = {\r\n          url: e.target.result,\r\n          type: file.type.includes('image') ? 'image' : 'video',\r\n          name: file.name\r\n        };\r\n        this.taskService.addMedia(this.task._id, media).subscribe(() => {\r\n          this.mediaFiles.push(media);\r\n        });\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  }\r\n\r\n  deleteMedia(media: MediaFile): void {\r\n    this.taskService.deleteMedia(this.task._id, media).subscribe(() => {\r\n      this.mediaFiles = this.mediaFiles.filter(m => m.url !== media.url);\r\n    });\r\n  }\r\n\r\n  updateStatus(): void {\r\n    this.taskService.updateTaskStatus(this.task._id, this.task.status).subscribe(() => {\r\n      this.addHistoryEntry(`Statut changé à ${this.task.status}`);\r\n    });\r\n  }\r\n\r\n  updatePriority(): void {\r\n    this.taskService.updateTaskPriority(this.task._id, this.task.priority).subscribe(() => {\r\n      this.addHistoryEntry(`Priorité changée à ${this.task.priority}`);\r\n    });\r\n  }\r\n\r\n  addHistoryEntry(action: string): void {\r\n    const historyEntry: TaskHistory = {\r\n      user: { name: 'Utilisateur actuel' },\r\n      action: action,\r\n      date: new Date()\r\n    };\r\n    this.taskHistory.unshift(historyEntry);\r\n  }\r\n\r\n  saveChanges(): void {\r\n    this.taskService.updateTask(this.task._id, this.task).subscribe(() => {\r\n      this.activeModal.close(this.task);\r\n    });\r\n  }\r\n}\r\n"
        }
    ]
}