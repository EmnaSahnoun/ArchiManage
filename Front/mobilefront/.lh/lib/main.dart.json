{
    "sourceFile": "lib/main.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1744644523355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744644564753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n   // This widget is the root of your application.\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return MaterialApp(\r\n-      title: 'Flutter Demo',\r\n+      title: '',\r\n       theme: ThemeData(\r\n         \r\n         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n         useMaterial3: true,\r\n"
                },
                {
                    "date": 1744644571447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n   // This widget is the root of your application.\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return MaterialApp(\r\n-      title: '',\r\n+      title: 'Mon Application',\r\n       theme: ThemeData(\r\n         \r\n         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n         useMaterial3: true,\r\n"
                },
                {
                    "date": 1744644679465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import 'package:flutter/material.dart';\r\n-\r\n+import 'screens/welcome_screen.dart';\r\n void main() {\r\n   runApp(const MyApp());\r\n }\r\n \r\n"
                },
                {
                    "date": 1744644702501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,9 @@\n   Widget build(BuildContext context) {\r\n     return MaterialApp(\r\n       title: 'Mon Application',\r\n       theme: ThemeData(\r\n-        \r\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n-        useMaterial3: true,\r\n+        primarySwatch: Colors.blue,\r\n       ),\r\n       home: const MyHomePage(title: 'Flutter Demo Home Page'),\r\n     );\r\n   }\r\n"
                },
                {
                    "date": 1744644712948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n       title: 'Mon Application',\r\n       theme: ThemeData(\r\n         primarySwatch: Colors.blue,\r\n       ),\r\n-      home: const MyHomePage(title: 'Flutter Demo Home Page'),\r\n+      home: const con,\r\n     );\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1744644718501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n       title: 'Mon Application',\r\n       theme: ThemeData(\r\n         primarySwatch: Colors.blue,\r\n       ),\r\n-      home: const con,\r\n+      home: const Welc,\r\n     );\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1744644724567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n       title: 'Mon Application',\r\n       theme: ThemeData(\r\n         primarySwatch: Colors.blue,\r\n       ),\r\n-      home: const Welc,\r\n+      home: const WelcomeScreen,\r\n     );\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1744644734115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,10 @@\n       title: 'Mon Application',\r\n       theme: ThemeData(\r\n         primarySwatch: Colors.blue,\r\n       ),\r\n-      home: const WelcomeScreen,\r\n+      home: const WelcomeScreen(),\r\n+      debugShowCheckedModeBanner: false,\r\n     );\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1744645501803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,91 +20,4 @@\n     );\r\n   }\r\n }\r\n \r\n-class MyHomePage extends StatefulWidget {\r\n-  const MyHomePage({super.key, required this.title});\r\n-\r\n-  // This widget is the home page of your application. It is stateful, meaning\r\n-  // that it has a State object (defined below) that contains fields that affect\r\n-  // how it looks.\r\n-\r\n-  // This class is the configuration for the state. It holds the values (in this\r\n-  // case the title) provided by the parent (in this case the App widget) and\r\n-  // used by the build method of the State. Fields in a Widget subclass are\r\n-  // always marked \"final\".\r\n-\r\n-  final String title;\r\n-\r\n-  @override\r\n-  State<MyHomePage> createState() => _MyHomePageState();\r\n-}\r\n-\r\n-class _MyHomePageState extends State<MyHomePage> {\r\n-  int _counter = 0;\r\n-\r\n-  void _incrementCounter() {\r\n-    setState(() {\r\n-      // This call to setState tells the Flutter framework that something has\r\n-      // changed in this State, which causes it to rerun the build method below\r\n-      // so that the display can reflect the updated values. If we changed\r\n-      // _counter without calling setState(), then the build method would not be\r\n-      // called again, and so nothing would appear to happen.\r\n-      _counter++;\r\n-    });\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    // This method is rerun every time setState is called, for instance as done\r\n-    // by the _incrementCounter method above.\r\n-    //\r\n-    // The Flutter framework has been optimized to make rerunning build methods\r\n-    // fast, so that you can just rebuild anything that needs updating rather\r\n-    // than having to individually change instances of widgets.\r\n-    return Scaffold(\r\n-      appBar: AppBar(\r\n-        // TRY THIS: Try changing the color here to a specific color (to\r\n-        // Colors.amber, perhaps?) and trigger a hot reload to see the AppBar\r\n-        // change color while the other colors stay the same.\r\n-        backgroundColor: Theme.of(context).colorScheme.inversePrimary,\r\n-        // Here we take the value from the MyHomePage object that was created by\r\n-        // the App.build method, and use it to set our appbar title.\r\n-        title: Text(widget.title),\r\n-      ),\r\n-      body: Center(\r\n-        // Center is a layout widget. It takes a single child and positions it\r\n-        // in the middle of the parent.\r\n-        child: Column(\r\n-          // Column is also a layout widget. It takes a list of children and\r\n-          // arranges them vertically. By default, it sizes itself to fit its\r\n-          // children horizontally, and tries to be as tall as its parent.\r\n-          //\r\n-          // Column has various properties to control how it sizes itself and\r\n-          // how it positions its children. Here we use mainAxisAlignment to\r\n-          // center the children vertically; the main axis here is the vertical\r\n-          // axis because Columns are vertical (the cross axis would be\r\n-          // horizontal).\r\n-          //\r\n-          // TRY THIS: Invoke \"debug painting\" (choose the \"Toggle Debug Paint\"\r\n-          // action in the IDE, or press \"p\" in the console), to see the\r\n-          // wireframe for each widget.\r\n-          mainAxisAlignment: MainAxisAlignment.center,\r\n-          children: <Widget>[\r\n-            const Text(\r\n-              'You have pushed the button this many times:',\r\n-            ),\r\n-            Text(\r\n-              '$_counter',\r\n-              style: Theme.of(context).textTheme.headlineMedium,\r\n-            ),\r\n-          ],\r\n-        ),\r\n-      ),\r\n-      floatingActionButton: FloatingActionButton(\r\n-        onPressed: _incrementCounter,\r\n-        tooltip: 'Increment',\r\n-        child: const Icon(Icons.add),\r\n-      ), // This trailing comma makes auto-formatting nicer for build methods.\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1744645514256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,22 @@\n import 'package:flutter/material.dart';\r\n-import 'screens/welcome_screen.dart';\r\n+import 'screens/main_screen.dart';\r\n+\r\n void main() {\r\n   runApp(const MyApp());\r\n }\r\n \r\n class MyApp extends StatelessWidget {\r\n   const MyApp({super.key});\r\n \r\n-  // This widget is the root of your application.\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return MaterialApp(\r\n       title: 'Mon Application',\r\n       theme: ThemeData(\r\n         primarySwatch: Colors.blue,\r\n       ),\r\n-      home: const WelcomeScreen(),\r\n+      home: const MainScreen(),\r\n       debugShowCheckedModeBanner: false,\r\n     );\r\n   }\r\n-}\r\n-\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744646283118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import 'package:flutter/material.dart';\r\n-import 'screens/main_screen.dart';\r\n+import 'screens/login_screen.dart';\r\n \r\n void main() {\r\n   runApp(const MyApp());\r\n }\r\n@@ -14,9 +14,9 @@\n       title: 'Mon Application',\r\n       theme: ThemeData(\r\n         primarySwatch: Colors.blue,\r\n       ),\r\n-      home: const MainScreen(),\r\n+      home: const LoginScreen(),\r\n       debugShowCheckedModeBanner: false,\r\n     );\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745536114060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import 'package:flutter/material.dart';\r\n-import 'screens/login_screen.dart';\r\n+import 'features/auth/screens/login_screen.dart';\r\n \r\n void main() {\r\n   runApp(const MyApp());\r\n }\r\n"
                },
                {
                    "date": 1745536483118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,23 @@\n+// lib/main.dart\r\n import 'package:flutter/material.dart';\r\n-import 'features/auth/screens/login_screen.dart';\r\n+import 'package:provider/provider.dart';\r\n \r\n+import 'app.dart'; // Your root App widget\r\n+import 'core/auth/auth_service.dart';\r\n+import 'core/storage/secure_storage_service.dart'; // If needed directly\r\n+\r\n void main() {\r\n-  runApp(const MyApp());\r\n+  WidgetsFlutterBinding.ensureInitialized(); // Ensure bindings are initialized\r\n+\r\n+  runApp(\r\n+    MultiProvider(\r\n+      providers: [\r\n+        // Provide the AuthService globally\r\n+        ChangeNotifierProvider(create: (_) => AuthService()),\r\n+        // You could also provide SecureStorageService if needed elsewhere\r\n+        // Provider(create: (_) => SecureStorageService()),\r\n+      ],\r\n+      child: const MyApp(), // Your main App widget\r\n\\ No newline at end of file\n+    ),\r\n+  );\r\n }\r\n-\r\n-class MyApp extends StatelessWidget {\r\n-  const MyApp({super.key});\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return MaterialApp(\r\n-      title: 'Mon Application',\r\n-      theme: ThemeData(\r\n-        primarySwatch: Colors.blue,\r\n-      ),\r\n-      home: const LoginScreen(),\r\n-      debugShowCheckedModeBanner: false,\r\n-    );\r\n-  }\r\n-}\n"
                },
                {
                    "date": 1745536503008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,5 +19,5 @@\n       ],\r\n       child: const MyApp(), // Your main App widget\r\n     ),\r\n   );\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1745536548391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,66 @@\n-// lib/main.dart\r\n+// lib/app.dart\r\n import 'package:flutter/material.dart';\r\n import 'package:provider/provider.dart';\r\n \r\n-import 'app.dart'; // Your root App widget\r\n import 'core/auth/auth_service.dart';\r\n-import 'core/storage/secure_storage_service.dart'; // If needed directly\r\n+import 'features/auth/screens/login_screen.dart';\r\n+import 'features/dashboard/screens/dashboard_screen.dart'; // Example home screen\r\n+// Import other screens like ProjectListScreen, SuperAdminDashboard etc.\r\n \r\n-void main() {\r\n-  WidgetsFlutterBinding.ensureInitialized(); // Ensure bindings are initialized\r\n+class MyApp extends StatelessWidget {\r\n+  const MyApp({super.key});\r\n \r\n-  runApp(\r\n-    MultiProvider(\r\n-      providers: [\r\n-        // Provide the AuthService globally\r\n-        ChangeNotifierProvider(create: (_) => AuthService()),\r\n-        // You could also provide SecureStorageService if needed elsewhere\r\n-        // Provider(create: (_) => SecureStorageService()),\r\n-      ],\r\n-      child: const MyApp(), // Your main App widget\r\n-    ),\r\n-  );\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return MaterialApp(\r\n+      title: 'ArchiManage Mobile',\r\n+      theme: ThemeData(\r\n+        primarySwatch: Colors.blue, // Customize your theme\r\n+        colorScheme: ColorScheme.fromSeed(seedColor: const Color(0xFFE27D60)),\r\n+        useMaterial3: true,\r\n+      ),\r\n+      home: const AuthWrapper(), // Use a wrapper to handle auth state\r\n+      // --- Optional: Setup routes for navigation ---\r\n+      // routes: {\r\n+      //   '/login': (context) => const LoginScreen(),\r\n+      //   '/dashboard': (context) => const DashboardScreen(),\r\n+      //   '/projects': (context) => const ProjectListScreen(),\r\n+      //   // ... other routes\r\n+      // },\r\n+    );\r\n+  }\r\n }\r\n+\r\n+class AuthWrapper extends StatelessWidget {\r\n+  const AuthWrapper({super.key});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    // Listen to the AuthService state\r\n+    final authService = context.watch<AuthService>();\r\n+\r\n+    if (authService.isLoading) {\r\n+      // Show a loading indicator while checking auth status\r\n+      return const Scaffold(\r\n+        body: Center(child: CircularProgressIndicator()),\r\n+      );\r\n+    } else if (authService.isAuthenticated) {\r\n+      // User is authenticated, decide where to navigate based on role\r\n+      // This logic mirrors your Angular redirectBasedOnRole\r\n+      if (authService.isSuperAdmin()) {\r\n+         print(\"Navigating to Super Admin Dashboard\");\r\n+         // return const SuperAdminDashboardScreen(); // Replace with your actual screen\r\n+         return const DashboardScreen(); // Placeholder\r\n+      } else if (authService.isAdmin() || authService.isUser()) {\r\n+         print(\"Navigating to Main Dashboard\");\r\n+         return const DashboardScreen(); // Replace with your actual screen\r\n+      } else {\r\n+         print(\"Authenticated user with unrecognized role, defaulting to Dashboard\");\r\n+         return const DashboardScreen(); // Fallback screen\r\n+      }\r\n+    } else {\r\n+      // User is not authenticated, show login screen\r\n+      return const LoginScreen();\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1745538070346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,66 +1,23 @@\n-// lib/app.dart\r\n+// lib/main.dart\r\n import 'package:flutter/material.dart';\r\n import 'package:provider/provider.dart';\r\n \r\n+import 'app.dart'; // Your root App widget\r\n import 'core/auth/auth_service.dart';\r\n-import 'features/auth/screens/login_screen.dart';\r\n-import 'features/dashboard/screens/dashboard_screen.dart'; // Example home screen\r\n-// Import other screens like ProjectListScreen, SuperAdminDashboard etc.\r\n \r\n-class MyApp extends StatelessWidget {\r\n-  const MyApp({super.key});\r\n \r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return MaterialApp(\r\n-      title: 'ArchiManage Mobile',\r\n-      theme: ThemeData(\r\n-        primarySwatch: Colors.blue, // Customize your theme\r\n-        colorScheme: ColorScheme.fromSeed(seedColor: const Color(0xFFE27D60)),\r\n-        useMaterial3: true,\r\n-      ),\r\n-      home: const AuthWrapper(), // Use a wrapper to handle auth state\r\n-      // --- Optional: Setup routes for navigation ---\r\n-      // routes: {\r\n-      //   '/login': (context) => const LoginScreen(),\r\n-      //   '/dashboard': (context) => const DashboardScreen(),\r\n-      //   '/projects': (context) => const ProjectListScreen(),\r\n-      //   // ... other routes\r\n-      // },\r\n-    );\r\n-  }\r\n-}\r\n+void main() {\r\n+  WidgetsFlutterBinding.ensureInitialized(); // Ensure bindings are initialized\r\n \r\n-class AuthWrapper extends StatelessWidget {\r\n-  const AuthWrapper({super.key});\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    // Listen to the AuthService state\r\n-    final authService = context.watch<AuthService>();\r\n-\r\n-    if (authService.isLoading) {\r\n-      // Show a loading indicator while checking auth status\r\n-      return const Scaffold(\r\n-        body: Center(child: CircularProgressIndicator()),\r\n-      );\r\n-    } else if (authService.isAuthenticated) {\r\n-      // User is authenticated, decide where to navigate based on role\r\n-      // This logic mirrors your Angular redirectBasedOnRole\r\n-      if (authService.isSuperAdmin()) {\r\n-         print(\"Navigating to Super Admin Dashboard\");\r\n-         // return const SuperAdminDashboardScreen(); // Replace with your actual screen\r\n-         return const DashboardScreen(); // Placeholder\r\n-      } else if (authService.isAdmin() || authService.isUser()) {\r\n-         print(\"Navigating to Main Dashboard\");\r\n-         return const DashboardScreen(); // Replace with your actual screen\r\n-      } else {\r\n-         print(\"Authenticated user with unrecognized role, defaulting to Dashboard\");\r\n-         return const DashboardScreen(); // Fallback screen\r\n-      }\r\n-    } else {\r\n-      // User is not authenticated, show login screen\r\n-      return const LoginScreen();\r\n-    }\r\n-  }\r\n+  runApp(\r\n+    MultiProvider(\r\n+      providers: [\r\n+        // Provide the AuthService globally\r\n+        ChangeNotifierProvider(create: (_) => AuthService()),\r\n+        // You could also provide SecureStorageService if needed elsewhere\r\n+        // Provider(create: (_) => SecureStorageService()),\r\n+      ],\r\n+      child: const MyApp(), // Your main App widget\r\n+    ),\r\n+  );\r\n }\r\n"
                }
            ],
            "date": 1744644523355,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(const MyApp());\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  const MyApp({super.key});\r\n\r\n  // This widget is the root of your application.\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      title: 'Flutter Demo',\r\n      theme: ThemeData(\r\n        \r\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\r\n        useMaterial3: true,\r\n      ),\r\n      home: const MyHomePage(title: 'Flutter Demo Home Page'),\r\n    );\r\n  }\r\n}\r\n\r\nclass MyHomePage extends StatefulWidget {\r\n  const MyHomePage({super.key, required this.title});\r\n\r\n  // This widget is the home page of your application. It is stateful, meaning\r\n  // that it has a State object (defined below) that contains fields that affect\r\n  // how it looks.\r\n\r\n  // This class is the configuration for the state. It holds the values (in this\r\n  // case the title) provided by the parent (in this case the App widget) and\r\n  // used by the build method of the State. Fields in a Widget subclass are\r\n  // always marked \"final\".\r\n\r\n  final String title;\r\n\r\n  @override\r\n  State<MyHomePage> createState() => _MyHomePageState();\r\n}\r\n\r\nclass _MyHomePageState extends State<MyHomePage> {\r\n  int _counter = 0;\r\n\r\n  void _incrementCounter() {\r\n    setState(() {\r\n      // This call to setState tells the Flutter framework that something has\r\n      // changed in this State, which causes it to rerun the build method below\r\n      // so that the display can reflect the updated values. If we changed\r\n      // _counter without calling setState(), then the build method would not be\r\n      // called again, and so nothing would appear to happen.\r\n      _counter++;\r\n    });\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    // This method is rerun every time setState is called, for instance as done\r\n    // by the _incrementCounter method above.\r\n    //\r\n    // The Flutter framework has been optimized to make rerunning build methods\r\n    // fast, so that you can just rebuild anything that needs updating rather\r\n    // than having to individually change instances of widgets.\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        // TRY THIS: Try changing the color here to a specific color (to\r\n        // Colors.amber, perhaps?) and trigger a hot reload to see the AppBar\r\n        // change color while the other colors stay the same.\r\n        backgroundColor: Theme.of(context).colorScheme.inversePrimary,\r\n        // Here we take the value from the MyHomePage object that was created by\r\n        // the App.build method, and use it to set our appbar title.\r\n        title: Text(widget.title),\r\n      ),\r\n      body: Center(\r\n        // Center is a layout widget. It takes a single child and positions it\r\n        // in the middle of the parent.\r\n        child: Column(\r\n          // Column is also a layout widget. It takes a list of children and\r\n          // arranges them vertically. By default, it sizes itself to fit its\r\n          // children horizontally, and tries to be as tall as its parent.\r\n          //\r\n          // Column has various properties to control how it sizes itself and\r\n          // how it positions its children. Here we use mainAxisAlignment to\r\n          // center the children vertically; the main axis here is the vertical\r\n          // axis because Columns are vertical (the cross axis would be\r\n          // horizontal).\r\n          //\r\n          // TRY THIS: Invoke \"debug painting\" (choose the \"Toggle Debug Paint\"\r\n          // action in the IDE, or press \"p\" in the console), to see the\r\n          // wireframe for each widget.\r\n          mainAxisAlignment: MainAxisAlignment.center,\r\n          children: <Widget>[\r\n            const Text(\r\n              'You have pushed the button this many times:',\r\n            ),\r\n            Text(\r\n              '$_counter',\r\n              style: Theme.of(context).textTheme.headlineMedium,\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n      floatingActionButton: FloatingActionButton(\r\n        onPressed: _incrementCounter,\r\n        tooltip: 'Increment',\r\n        child: const Icon(Icons.add),\r\n      ), // This trailing comma makes auto-formatting nicer for build methods.\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}