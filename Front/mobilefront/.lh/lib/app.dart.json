{
    "sourceFile": "lib/app.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1745536553131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745536560848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n       // This logic mirrors your Angular redirectBasedOnRole\r\n       if (authService.isSuperAdmin()) {\r\n          print(\"Navigating to Super Admin Dashboard\");\r\n          // return const SuperAdminDashboardScreen(); // Replace with your actual screen\r\n-         return const DashboardScreen(); // Placeholder\r\n+         return const dashboard_screen.DashboardScreen(); // Placeholder\r\n       } else if (authService.isAdmin() || authService.isUser()) {\r\n          print(\"Navigating to Main Dashboard\");\r\n          return const DashboardScreen(); // Replace with your actual screen\r\n       } else {\r\n"
                },
                {
                    "date": 1745536997331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,11 @@\n import 'package:provider/provider.dart';\r\n \r\n import 'core/auth/auth_service.dart';\r\n import 'features/auth/screens/login_screen.dart';\r\n-import 'features/dashboard/screens/dashboard_screen.dart'; // Example home screen\r\n-// Import other screens like ProjectListScreen, SuperAdminDashboard etc.\r\n+import 'features/dashboard/screens/dashboard_screen.dart';\r\n+// Assurez-vous d'importer l'écran Super Admin si vous l'utilisez\r\n+// import 'features/super_admin/screens/super_admin_dashboard_screen.dart';\r\n \r\n class MyApp extends StatelessWidget {\r\n   const MyApp({super.key});\r\n \r\n@@ -14,20 +15,15 @@\n   Widget build(BuildContext context) {\r\n     return MaterialApp(\r\n       title: 'ArchiManage Mobile',\r\n       theme: ThemeData(\r\n-        primarySwatch: Colors.blue, // Customize your theme\r\n+        // Gardez votre thème tel quel\r\n+        primarySwatch: Colors.blue,\r\n         colorScheme: ColorScheme.fromSeed(seedColor: const Color(0xFFE27D60)),\r\n         useMaterial3: true,\r\n       ),\r\n-      home: const AuthWrapper(), // Use a wrapper to handle auth state\r\n-      // --- Optional: Setup routes for navigation ---\r\n-      // routes: {\r\n-      //   '/login': (context) => const LoginScreen(),\r\n-      //   '/dashboard': (context) => const DashboardScreen(),\r\n-      //   '/projects': (context) => const ProjectListScreen(),\r\n-      //   // ... other routes\r\n-      // },\r\n+      home: const AuthWrapper(),\r\n+      // routes: { ... } // Vos routes si vous les utilisez\r\n     );\r\n   }\r\n }\r\n \r\n@@ -35,32 +31,32 @@\n   const AuthWrapper({super.key});\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n-    // Listen to the AuthService state\r\n     final authService = context.watch<AuthService>();\r\n \r\n     if (authService.isLoading) {\r\n-      // Show a loading indicator while checking auth status\r\n       return const Scaffold(\r\n         body: Center(child: CircularProgressIndicator()),\r\n       );\r\n     } else if (authService.isAuthenticated) {\r\n-      // User is authenticated, decide where to navigate based on role\r\n-      // This logic mirrors your Angular redirectBasedOnRole\r\n+      // --- Modification suggérée ici ---\r\n       if (authService.isSuperAdmin()) {\r\n          print(\"Navigating to Super Admin Dashboard\");\r\n-         // return const SuperAdminDashboardScreen(); // Replace with your actual screen\r\n-         return const dashboard_screen.DashboardScreen(); // Placeholder\r\n+         // Remplacez par votre écran réel si différent de DashboardScreen\r\n+         // return const SuperAdminDashboardScreen(); // Exemple\r\n+         return const DashboardScreen(); // Ou gardez si c'est le même pour l'instant\r\n       } else if (authService.isAdmin() || authService.isUser()) {\r\n          print(\"Navigating to Main Dashboard\");\r\n-         return const DashboardScreen(); // Replace with your actual screen\r\n+         // Cet écran semble correct pour Admin/User\r\n+         return const DashboardScreen();\r\n       } else {\r\n          print(\"Authenticated user with unrecognized role, defaulting to Dashboard\");\r\n-         return const DashboardScreen(); // Fallback screen\r\n+         // Le fallback vers DashboardScreen est logique\r\n+         return const DashboardScreen();\r\n       }\r\n+      // --- Fin de la modification suggérée ---\r\n     } else {\r\n-      // User is not authenticated, show login screen\r\n       return const LoginScreen();\r\n     }\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1745537020042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n import 'package:provider/provider.dart';\r\n \r\n import 'core/auth/auth_service.dart';\r\n import 'features/auth/screens/login_screen.dart';\r\n-import 'features/dashboard/screens/dashboard_screen.dart';\r\n // Assurez-vous d'importer l'écran Super Admin si vous l'utilisez\r\n // import 'features/super_admin/screens/super_admin_dashboard_screen.dart';\r\n \r\n class MyApp extends StatelessWidget {\r\n"
                },
                {
                    "date": 1745537073327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n // lib/app.dart\r\n import 'package:flutter/material.dart';\r\n+import 'package:mobilefront/features/dashbord/screens/dashboard_screen.dart';\r\n import 'package:provider/provider.dart';\r\n \r\n import 'core/auth/auth_service.dart';\r\n import 'features/auth/screens/login_screen.dart';\r\n"
                },
                {
                    "date": 1745575935962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,12 @@\n // lib/app.dart\r\n import 'package:flutter/material.dart';\r\n-import 'package:mobilefront/features/dashbord/screens/dashboard_screen.dart';\r\n+import 'package:mobilefront/features/dashbord/screens/dashboard_screen.dart'; // Peut-être plus nécessaire ici si MainScreen est la seule cible post-login\r\n import 'package:provider/provider.dart';\r\n \r\n import 'core/auth/auth_service.dart';\r\n import 'features/auth/screens/login_screen.dart';\r\n-// Assurez-vous d'importer l'écran Super Admin si vous l'utilisez\r\n-// import 'features/super_admin/screens/super_admin_dashboard_screen.dart';\r\n+import 'screens/main_screen.dart'; // Assurez-vous que cette importation est correcte\r\n \r\n class MyApp extends StatelessWidget {\r\n   const MyApp({super.key});\r\n \r\n@@ -15,48 +14,98 @@\n   Widget build(BuildContext context) {\r\n     return MaterialApp(\r\n       title: 'ArchiManage Mobile',\r\n       theme: ThemeData(\r\n-        // Gardez votre thème tel quel\r\n         primarySwatch: Colors.blue,\r\n         colorScheme: ColorScheme.fromSeed(seedColor: const Color(0xFFE27D60)),\r\n         useMaterial3: true,\r\n       ),\r\n       home: const AuthWrapper(),\r\n-      // routes: { ... } // Vos routes si vous les utilisez\r\n     );\r\n   }\r\n }\r\n \r\n-class AuthWrapper extends StatelessWidget {\r\n+class AuthWrapper extends StatefulWidget {\r\n   const AuthWrapper({super.key});\r\n \r\n   @override\r\n+  State<AuthWrapper> createState() => _AuthWrapperState();\r\n+}\r\n+\r\n+class _AuthWrapperState extends State<AuthWrapper> {\r\n+  bool _autoLoginAttempted = false;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n+      _checkAuthAndTriggerLogin();\r\n+    });\r\n+  }\r\n+\r\n+  void _checkAuthAndTriggerLogin() {\r\n+    if (!mounted) return;\r\n+\r\n+    final authService = context.read<AuthService>();\r\n+    if (!authService.isAuthenticated && !authService.isLoading && !_autoLoginAttempted) {\r\n+      setState(() {\r\n+        _autoLoginAttempted = true;\r\n+      });\r\n+      print(\"AuthWrapper: Non authentifié et non en chargement. Lancement du login automatique...\");\r\n+\r\n+      authService.login().catchError((error) {\r\n+        print(\"AuthWrapper: Échec du login automatique: $error\");\r\n+        if (mounted) {\r\n+          // Gérer l'échec si nécessaire\r\n+        }\r\n+      });\r\n+    } else if (_autoLoginAttempted) {\r\n+       print(\"AuthWrapper: Check initial - Tentative de login auto déjà effectuée.\");\r\n+    } else {\r\n+       print(\"AuthWrapper: Check initial - Déjà authentifié ou en cours de chargement.\");\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n   Widget build(BuildContext context) {\r\n     final authService = context.watch<AuthService>();\r\n \r\n-    if (authService.isLoading) {\r\n-      return const Scaffold(\r\n-        body: Center(child: CircularProgressIndicator()),\r\n-      );\r\n-    } else if (authService.isAuthenticated) {\r\n-      // --- Modification suggérée ici ---\r\n-      if (authService.isSuperAdmin()) {\r\n-         print(\"Navigating to Super Admin Dashboard\");\r\n-         // Remplacez par votre écran réel si différent de DashboardScreen\r\n-         // return const SuperAdminDashboardScreen(); // Exemple\r\n-         return const DashboardScreen(); // Ou gardez si c'est le même pour l'instant\r\n-      } else if (authService.isAdmin() || authService.isUser()) {\r\n-         print(\"Navigating to Main Dashboard\");\r\n-         // Cet écran semble correct pour Admin/User\r\n-         return const DashboardScreen();\r\n+    print(\"AuthWrapper build: isLoading=${authService.isLoading}, isAuthenticated=${authService.isAuthenticated}, autoLoginAttempted=$_autoLoginAttempted\");\r\n+\r\n+    // CAS 1: L'utilisateur est authentifié\r\n+    if (authService.isAuthenticated) {\r\n+      print(\"AuthWrapper: Utilisateur authentifié. Navigation vers MainScreen...\");\r\n+      // Réinitialiser le flag si on est authentifié\r\n+       WidgetsBinding.instance.addPostFrameCallback((_) {\r\n+         if (mounted && _autoLoginAttempted) {\r\n+           setState(() => _autoLoginAttempted = false);\r\n+         }\r\n+       });\r\n+      // ---- MODIFICATION ICI ----\r\n+      // Naviguer directement vers MainScreen sans vérifier les rôles\r\n+      return const MainScreen();\r\n+      // ---- FIN MODIFICATION ----\r\n+    }\r\n+    // CAS 2: L'utilisateur N'EST PAS authentifié\r\n+    else {\r\n+      if (authService.isLoading) {\r\n+        print(\"AuthWrapper: Affichage indicateur de chargement (isLoading=true).\");\r\n+        return const Scaffold(\r\n+          body: Center(child: CircularProgressIndicator()),\r\n+        );\r\n       } else {\r\n-         print(\"Authenticated user with unrecognized role, defaulting to Dashboard\");\r\n-         // Le fallback vers DashboardScreen est logique\r\n-         return const DashboardScreen();\r\n+        if (_autoLoginAttempted) {\r\n+          print(\"AuthWrapper: Non authentifié, non en chargement, tentative auto effectuée -> Affichage LoginScreen.\");\r\n+          return const LoginScreen();\r\n+        } else {\r\n+           print(\"AuthWrapper: Non authentifié, non en chargement, tentative auto NON effectuée -> Affichage indicateur + re-check.\");\r\n+           WidgetsBinding.instance.addPostFrameCallback((_) {\r\n+             _checkAuthAndTriggerLogin();\r\n+           });\r\n+           return const Scaffold(\r\n+             body: Center(child: CircularProgressIndicator()),\r\n+           );\r\n+        }\r\n       }\r\n-      // --- Fin de la modification suggérée ---\r\n-    } else {\r\n-      return const LoginScreen();\r\n     }\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1745576168341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n // lib/app.dart\r\n import 'package:flutter/material.dart';\r\n-import 'package:mobilefront/features/dashbord/screens/dashboard_screen.dart'; // Peut-être plus nécessaire ici si MainScreen est la seule cible post-login\r\n import 'package:provider/provider.dart';\r\n \r\n import 'core/auth/auth_service.dart';\r\n import 'features/auth/screens/login_screen.dart';\r\n@@ -19,93 +18,74 @@\n         colorScheme: ColorScheme.fromSeed(seedColor: const Color(0xFFE27D60)),\r\n         useMaterial3: true,\r\n       ),\r\n       home: const AuthWrapper(),\r\n+      debugShowCheckedModeBanner: false, // Optionnel: cache la bannière debug\r\n     );\r\n   }\r\n }\r\n \r\n-class AuthWrapper extends StatefulWidget {\r\n+// AuthWrapper simplifié (devient StatelessWidget)\r\n+class AuthWrapper extends StatelessWidget {\r\n   const AuthWrapper({super.key});\r\n \r\n   @override\r\n-  State<AuthWrapper> createState() => _AuthWrapperState();\r\n-}\r\n-\r\n-class _AuthWrapperState extends State<AuthWrapper> {\r\n-  bool _autoLoginAttempted = false;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n-      _checkAuthAndTriggerLogin();\r\n-    });\r\n-  }\r\n-\r\n-  void _checkAuthAndTriggerLogin() {\r\n-    if (!mounted) return;\r\n-\r\n-    final authService = context.read<AuthService>();\r\n-    if (!authService.isAuthenticated && !authService.isLoading && !_autoLoginAttempted) {\r\n-      setState(() {\r\n-        _autoLoginAttempted = true;\r\n-      });\r\n-      print(\"AuthWrapper: Non authentifié et non en chargement. Lancement du login automatique...\");\r\n-\r\n-      authService.login().catchError((error) {\r\n-        print(\"AuthWrapper: Échec du login automatique: $error\");\r\n-        if (mounted) {\r\n-          // Gérer l'échec si nécessaire\r\n-        }\r\n-      });\r\n-    } else if (_autoLoginAttempted) {\r\n-       print(\"AuthWrapper: Check initial - Tentative de login auto déjà effectuée.\");\r\n-    } else {\r\n-       print(\"AuthWrapper: Check initial - Déjà authentifié ou en cours de chargement.\");\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n   Widget build(BuildContext context) {\r\n+    // Utilise context.watch pour écouter les changements de AuthService\r\n     final authService = context.watch<AuthService>();\r\n \r\n-    print(\"AuthWrapper build: isLoading=${authService.isLoading}, isAuthenticated=${authService.isAuthenticated}, autoLoginAttempted=$_autoLoginAttempted\");\r\n+    print(\"AuthWrapper build: isLoading=${authService.isLoading}, isAuthenticated=${authService.isAuthenticated}\");\r\n \r\n-    // CAS 1: L'utilisateur est authentifié\r\n-    if (authService.isAuthenticated) {\r\n+    // CAS 1: En cours de chargement (vérification initiale, connexion en cours, etc.)\r\n+    if (authService.isLoading) {\r\n+      print(\"AuthWrapper: Affichage indicateur de chargement (isLoading=true).\");\r\n+      // Affiche un écran de chargement simple\r\n+      return const Scaffold(\r\n+        body: Center(child: CircularProgressIndicator()),\r\n+      );\r\n+    }\r\n+    // CAS 2: Authentifié (et pas en cours de chargement)\r\n+    else if (authService.isAuthenticated) {\r\n       print(\"AuthWrapper: Utilisateur authentifié. Navigation vers MainScreen...\");\r\n-      // Réinitialiser le flag si on est authentifié\r\n-       WidgetsBinding.instance.addPostFrameCallback((_) {\r\n-         if (mounted && _autoLoginAttempted) {\r\n-           setState(() => _autoLoginAttempted = false);\r\n-         }\r\n-       });\r\n-      // ---- MODIFICATION ICI ----\r\n-      // Naviguer directement vers MainScreen sans vérifier les rôles\r\n+      // Navigue vers l'écran principal\r\n       return const MainScreen();\r\n-      // ---- FIN MODIFICATION ----\r\n     }\r\n-    // CAS 2: L'utilisateur N'EST PAS authentifié\r\n+    // CAS 3: Non authentifié (et pas en cours de chargement)\r\n     else {\r\n-      if (authService.isLoading) {\r\n-        print(\"AuthWrapper: Affichage indicateur de chargement (isLoading=true).\");\r\n-        return const Scaffold(\r\n-          body: Center(child: CircularProgressIndicator()),\r\n-        );\r\n-      } else {\r\n-        if (_autoLoginAttempted) {\r\n-          print(\"AuthWrapper: Non authentifié, non en chargement, tentative auto effectuée -> Affichage LoginScreen.\");\r\n-          return const LoginScreen();\r\n-        } else {\r\n-           print(\"AuthWrapper: Non authentifié, non en chargement, tentative auto NON effectuée -> Affichage indicateur + re-check.\");\r\n-           WidgetsBinding.instance.addPostFrameCallback((_) {\r\n-             _checkAuthAndTriggerLogin();\r\n-           });\r\n-           return const Scaffold(\r\n-             body: Center(child: CircularProgressIndicator()),\r\n-           );\r\n-        }\r\n-      }\r\n+      print(\"AuthWrapper: Non authentifié et non en chargement -> Affichage LoginScreen.\");\r\n+      // Navigue vers l'écran de connexion\r\n+      return const LoginScreen();\r\n     }\r\n   }\r\n }\r\n+\r\n+// --- NOTE IMPORTANTE ---\r\n+// La logique pour tenter une connexion automatique au démarrage\r\n+// (par exemple, en utilisant un token stocké) doit être initiée ailleurs.\r\n+// Par exemple, dans votre fichier main.dart avant runApp, ou dans\r\n+// une méthode d'initialisation de AuthService.\r\n+\r\n+/* Exemple dans main.dart (si vous utilisez Provider) :\r\n+import 'package:provider/provider.dart'; // Assurez-vous d'importer Provider\r\n+\r\n+void main() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+\r\n+  // Créez l'instance de AuthService\r\n+  final authService = AuthService();\r\n+\r\n+  // Tentez une connexion automatique *avant* de lancer l'application\r\n+  // Cela pourrait mettre isLoading=true initialement, puis isAuthenticated=true ou false\r\n+  // Suppose que vous avez une méthode comme tryAutoLogin dans AuthService\r\n+  print(\"main: Tentative de connexion automatique...\");\r\n+  await authService.tryAutoLogin(); // Créez cette méthode dans AuthService si nécessaire\r\n+  print(\"main: Fin de la tentative de connexion automatique. isAuthenticated=${authService.isAuthenticated}\");\r\n+\r\n+\r\n+  runApp(\r\n+    ChangeNotifierProvider<AuthService>(\r\n+      create: (_) => authService,\r\n+      child: const MyApp(),\r\n+    ),\r\n+  );\r\n+}\r\n+*/\r\n"
                },
                {
                    "date": 1745576249739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n // lib/app.dart\r\n import 'package:flutter/material.dart';\r\n+import 'package:mobilefront/features/dashbord/screens/dashboard_screen.dart';\r\n import 'package:provider/provider.dart';\r\n \r\n import 'core/auth/auth_service.dart';\r\n-import 'features/auth/screens/login_screen.dart';\r\n-import 'screens/main_screen.dart'; // Assurez-vous que cette importation est correcte\r\n-\r\n+import 'features/auth/screens/login_screen.dart'; // Gardez pour le cas d'échec/annulation\r\n+import 'screens/main_screen.dart';\r\n class MyApp extends StatelessWidget {\r\n   const MyApp({super.key});\r\n \r\n   @override\r\n@@ -17,75 +17,127 @@\n         primarySwatch: Colors.blue,\r\n         colorScheme: ColorScheme.fromSeed(seedColor: const Color(0xFFE27D60)),\r\n         useMaterial3: true,\r\n       ),\r\n+      // Utilisez AuthWrapper directement comme page d'accueil\r\n       home: const AuthWrapper(),\r\n-      debugShowCheckedModeBanner: false, // Optionnel: cache la bannière debug\r\n     );\r\n   }\r\n }\r\n \r\n-// AuthWrapper simplifié (devient StatelessWidget)\r\n-class AuthWrapper extends StatelessWidget {\r\n+// AuthWrapper est maintenant StatefulWidget et gère la logique initiale\r\n+class AuthWrapper extends StatefulWidget {\r\n   const AuthWrapper({super.key});\r\n \r\n   @override\r\n-  Widget build(BuildContext context) {\r\n-    // Utilise context.watch pour écouter les changements de AuthService\r\n-    final authService = context.watch<AuthService>();\r\n+  State<AuthWrapper> createState() => _AuthWrapperState();\r\n+}\r\n \r\n-    print(\"AuthWrapper build: isLoading=${authService.isLoading}, isAuthenticated=${authService.isAuthenticated}\");\r\n+class _AuthWrapperState extends State<AuthWrapper> {\r\n+  // Flag pour savoir si on a déjà tenté la connexion automatique\r\n+  bool _autoLoginAttempted = false;\r\n \r\n-    // CAS 1: En cours de chargement (vérification initiale, connexion en cours, etc.)\r\n-    if (authService.isLoading) {\r\n-      print(\"AuthWrapper: Affichage indicateur de chargement (isLoading=true).\");\r\n-      // Affiche un écran de chargement simple\r\n-      return const Scaffold(\r\n-        body: Center(child: CircularProgressIndicator()),\r\n-      );\r\n-    }\r\n-    // CAS 2: Authentifié (et pas en cours de chargement)\r\n-    else if (authService.isAuthenticated) {\r\n-      print(\"AuthWrapper: Utilisateur authentifié. Navigation vers MainScreen...\");\r\n-      // Navigue vers l'écran principal\r\n-      return const MainScreen();\r\n-    }\r\n-    // CAS 3: Non authentifié (et pas en cours de chargement)\r\n-    else {\r\n-      print(\"AuthWrapper: Non authentifié et non en chargement -> Affichage LoginScreen.\");\r\n-      // Navigue vers l'écran de connexion\r\n-      return const LoginScreen();\r\n-    }\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    // Planifie l'exécution de _checkAuthAndTriggerLogin après la construction du premier frame.\r\n+    // C'est nécessaire pour pouvoir utiliser context.read en toute sécurité.\r\n+    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n+      _checkAuthAndTriggerLogin();\r\n+    });\r\n+\r\n   }\r\n-}\r\n \r\n-// --- NOTE IMPORTANTE ---\r\n-// La logique pour tenter une connexion automatique au démarrage\r\n-// (par exemple, en utilisant un token stocké) doit être initiée ailleurs.\r\n-// Par exemple, dans votre fichier main.dart avant runApp, ou dans\r\n-// une méthode d'initialisation de AuthService.\r\n+  void _checkAuthAndTriggerLogin() {\r\n+    if (!mounted) return;\r\n \r\n-/* Exemple dans main.dart (si vous utilisez Provider) :\r\n-import 'package:provider/provider.dart'; // Assurez-vous d'importer Provider\r\n+    final authService = context.read<AuthService>();\r\n+    if (!authService.isAuthenticated && !authService.isLoading && !_autoLoginAttempted) {\r\n+      setState(() {\r\n+        _autoLoginAttempted = true; // Marquer qu'on lance la tentative\r\n+      });\r\n+      print(\"AuthWrapper: Non authentifié et non en chargement. Lancement du login automatique...\");\r\n \r\n-void main() async {\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n+      authService.login().catchError((error) {\r\n+        print(\"AuthWrapper: Échec du login automatique: $error\");\r\n+        // Si le widget est toujours monté après l'erreur\r\n+        if (mounted) {\r\n+          // On pourrait remettre _autoLoginAttempted à false ici si on voulait\r\n+          // permettre une nouvelle tentative auto si l'utilisateur navigue ailleurs\r\n+          // puis revient, mais ce n'est généralement pas nécessaire.\r\n+        }\r\n+      });\r\n+    } else if (_autoLoginAttempted) {\r\n+       print(\"AuthWrapper: Check initial - Tentative de login auto déjà effectuée.\");\r\n+    } else {\r\n+       print(\"AuthWrapper: Check initial - Déjà authentifié ou en cours de chargement.\");\r\n+    }\r\n+  }\r\n \r\n-  // Créez l'instance de AuthService\r\n-  final authService = AuthService();\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    // Utilise 'watch' pour réagir aux changements d'état (loading, isAuthenticated)\r\n+    final authService = context.watch<AuthService>();\r\n \r\n-  // Tentez une connexion automatique *avant* de lancer l'application\r\n-  // Cela pourrait mettre isLoading=true initialement, puis isAuthenticated=true ou false\r\n-  // Suppose que vous avez une méthode comme tryAutoLogin dans AuthService\r\n-  print(\"main: Tentative de connexion automatique...\");\r\n-  await authService.tryAutoLogin(); // Créez cette méthode dans AuthService si nécessaire\r\n-  print(\"main: Fin de la tentative de connexion automatique. isAuthenticated=${authService.isAuthenticated}\");\r\n+    print(\"AuthWrapper build: isLoading=${authService.isLoading}, isAuthenticated=${authService.isAuthenticated}, autoLoginAttempted=$_autoLoginAttempted\");\r\n \r\n+    // CAS 1: L'utilisateur est authentifié\r\n+    if (authService.isAuthenticated) {\r\n+      print(\"AuthWrapper: Utilisateur authentifié. Vérification des rôles...\");\r\n+      // Réinitialiser le flag si on est authentifié (pour la prochaine fois si déconnexion)\r\n+       WidgetsBinding.instance.addPostFrameCallback((_) {\r\n+         if (mounted && _autoLoginAttempted) {\r\n+           setState(() => _autoLoginAttempted = false);\r\n+         }\r\n+       });\r\n+      // Afficher le tableau de bord approprié\r\n+      if (authService.isSuperAdmin()) {\r\n+         print(\"Navigating to Super Admin Dashboard\");\r\n+         return const DashboardScreen(); // Adaptez si nécessaire\r\n+      } else if (authService.isAdmin() || authService.isUser()) {\r\n+         print(\"Navigating to Main Dashboard\");\r\n+         return const DashboardScreen();\r\n+      } else {\r\n+         print(\"Authenticated user with unrecognized role, defaulting to Dashboard\");\r\n+         return const DashboardScreen();\r\n+      }\r\n+    }\r\n+    // CAS 2: L'utilisateur N'EST PAS authentifié\r\n+    else {\r\n+      // SOUS-CAS 2.1: Le service est en cours de chargement\r\n+      // (soit chargement initial des tokens, soit processus de login/logout en cours)\r\n+      if (authService.isLoading) {\r\n+        print(\"AuthWrapper: Affichage indicateur de chargement (isLoading=true).\");\r\n+        // Affiche un indicateur de chargement pendant toute opération asynchrone\r\n+        return const Scaffold(\r\n+          body: Center(child: CircularProgressIndicator()),\r\n+        );\r\n+      }\r\n+      // SOUS-CAS 2.2: Le service N'est PAS en cours de chargement\r\n+      else {\r\n+        // À ce stade : !isAuthenticated && !isLoading\r\n \r\n-  runApp(\r\n-    ChangeNotifierProvider<AuthService>(\r\n-      create: (_) => authService,\r\n-      child: const MyApp(),\r\n-    ),\r\n-  );\r\n+        // Si on a déjà tenté le login automatique et qu'on est ici,\r\n+        // cela signifie que la tentative a échoué ou a été annulée par l'utilisateur.\r\n+        if (_autoLoginAttempted) {\r\n+          print(\"AuthWrapper: Non authentifié, non en chargement, tentative auto effectuée -> Affichage LoginScreen.\");\r\n+          // Il faut donc afficher l'écran de login manuel.\r\n+          return const LoginScreen();\r\n+        }\r\n+        // Sinon (si _autoLoginAttempted est false), cela signifie qu'on est dans l'état initial\r\n+        // juste avant que le check dans initState/addPostFrameCallback ne lance le login auto,\r\n+        // ou juste après le chargement initial des tokens (qui n'a rien trouvé).\r\n+        else {\r\n+           print(\"AuthWrapper: Non authentifié, non en chargement, tentative auto NON effectuée -> Affichage indicateur + re-check.\");\r\n+           // Pour éviter de flasher le LoginScreen, on affiche l'indicateur de chargement.\r\n+           // On relance aussi le check au cas où il n'aurait pas encore eu lieu.\r\n+           WidgetsBinding.instance.addPostFrameCallback((_) {\r\n+             _checkAuthAndTriggerLogin();\r\n+           });\r\n+           return const Scaffold(\r\n+             body: Center(child: CircularProgressIndicator()),\r\n+           );\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n }\r\n-*/\r\n"
                },
                {
                    "date": 1745576416701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n // lib/app.dart\r\n import 'package:flutter/material.dart';\r\n-import 'package:mobilefront/features/dashbord/screens/dashboard_screen.dart';\r\n+//import 'package:mobilefront/features/dashbord/screens/dashboard_screen.dart';\r\n import 'package:provider/provider.dart';\r\n \r\n import 'core/auth/auth_service.dart';\r\n import 'features/auth/screens/login_screen.dart'; // Gardez pour le cas d'échec/annulation\r\n"
                },
                {
                    "date": 1745576448719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,15 @@\n // lib/app.dart\r\n import 'package:flutter/material.dart';\r\n-//import 'package:mobilefront/features/dashbord/screens/dashboard_screen.dart';\r\n+// Importez MainScreen si ce n'est pas déjà fait\r\n+import 'package:mobilefront/screens/main_screen.dart';\r\n import 'package:provider/provider.dart';\r\n \r\n import 'core/auth/auth_service.dart';\r\n-import 'features/auth/screens/login_screen.dart'; // Gardez pour le cas d'échec/annulation\r\n-import 'screens/main_screen.dart';\r\n+import 'features/auth/screens/login_screen.dart';\r\n+// L'import de DashboardScreen n'est plus nécessaire ici si vous allez toujours vers MainScreen\r\n+// import 'package:mobilefront/features/dashbord/screens/dashboard_screen.dart';\r\n+\r\n class MyApp extends StatelessWidget {\r\n   const MyApp({super.key});\r\n \r\n   @override\r\n@@ -17,127 +20,113 @@\n         primarySwatch: Colors.blue,\r\n         colorScheme: ColorScheme.fromSeed(seedColor: const Color(0xFFE27D60)),\r\n         useMaterial3: true,\r\n       ),\r\n-      // Utilisez AuthWrapper directement comme page d'accueil\r\n       home: const AuthWrapper(),\r\n+      debugShowCheckedModeBanner: false, // Optionnel: cache la bannière debug\r\n     );\r\n   }\r\n }\r\n \r\n-// AuthWrapper est maintenant StatefulWidget et gère la logique initiale\r\n class AuthWrapper extends StatefulWidget {\r\n   const AuthWrapper({super.key});\r\n \r\n   @override\r\n   State<AuthWrapper> createState() => _AuthWrapperState();\r\n }\r\n \r\n class _AuthWrapperState extends State<AuthWrapper> {\r\n-  // Flag pour savoir si on a déjà tenté la connexion automatique\r\n   bool _autoLoginAttempted = false;\r\n \r\n   @override\r\n   void initState() {\r\n     super.initState();\r\n-    // Planifie l'exécution de _checkAuthAndTriggerLogin après la construction du premier frame.\r\n-    // C'est nécessaire pour pouvoir utiliser context.read en toute sécurité.\r\n     WidgetsBinding.instance.addPostFrameCallback((_) {\r\n       _checkAuthAndTriggerLogin();\r\n     });\r\n-\r\n   }\r\n \r\n   void _checkAuthAndTriggerLogin() {\r\n     if (!mounted) return;\r\n \r\n     final authService = context.read<AuthService>();\r\n+    // On ne tente le login automatique que si on n'est pas déjà authentifié,\r\n+    // pas en cours de chargement, et qu'on ne l'a pas déjà tenté.\r\n     if (!authService.isAuthenticated && !authService.isLoading && !_autoLoginAttempted) {\r\n       setState(() {\r\n-        _autoLoginAttempted = true; // Marquer qu'on lance la tentative\r\n+        _autoLoginAttempted = true;\r\n       });\r\n-      print(\"AuthWrapper: Non authentifié et non en chargement. Lancement du login automatique...\");\r\n+      print(\"AuthWrapper: Tentative de connexion automatique (via AuthService.login)...\");\r\n \r\n+      // On suppose que authService.login() tente de se connecter (peut-être avec un refresh token)\r\n+      // et met à jour son état (isLoading, isAuthenticated) et notifie les listeners.\r\n       authService.login().catchError((error) {\r\n-        print(\"AuthWrapper: Échec du login automatique: $error\");\r\n-        // Si le widget est toujours monté après l'erreur\r\n+        // L'erreur est déjà logguée dans AuthService, mais on peut ajouter un log ici aussi.\r\n+        print(\"AuthWrapper: Échec de la tentative de connexion automatique: $error\");\r\n         if (mounted) {\r\n-          // On pourrait remettre _autoLoginAttempted à false ici si on voulait\r\n-          // permettre une nouvelle tentative auto si l'utilisateur navigue ailleurs\r\n-          // puis revient, mais ce n'est généralement pas nécessaire.\r\n+          // L'état (_autoLoginAttempted = true) reste, donc on affichera LoginScreen\r\n         }\r\n       });\r\n-    } else if (_autoLoginAttempted) {\r\n-       print(\"AuthWrapper: Check initial - Tentative de login auto déjà effectuée.\");\r\n     } else {\r\n-       print(\"AuthWrapper: Check initial - Déjà authentifié ou en cours de chargement.\");\r\n+       print(\"AuthWrapper: Connexion automatique non nécessaire ou déjà tentée (isAuthenticated=${authService.isAuthenticated}, isLoading=${authService.isLoading}, autoLoginAttempted=$_autoLoginAttempted).\");\r\n     }\r\n   }\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n-    // Utilise 'watch' pour réagir aux changements d'état (loading, isAuthenticated)\r\n     final authService = context.watch<AuthService>();\r\n \r\n-    print(\"AuthWrapper build: isLoading=${authService.isLoading}, isAuthenticated=${authService.isAuthenticated}, autoLoginAttempted=$_autoLoginAttempted\");\r\n+    print(\"--- AuthWrapper Build ---\");\r\n+    print(\"État AuthService: isLoading=${authService.isLoading}, isAuthenticated=${authService.isAuthenticated}\");\r\n+    print(\"État AuthWrapper: autoLoginAttempted=$_autoLoginAttempted\");\r\n \r\n-    // CAS 1: L'utilisateur est authentifié\r\n-    if (authService.isAuthenticated) {\r\n-      print(\"AuthWrapper: Utilisateur authentifié. Vérification des rôles...\");\r\n-      // Réinitialiser le flag si on est authentifié (pour la prochaine fois si déconnexion)\r\n-       WidgetsBinding.instance.addPostFrameCallback((_) {\r\n-         if (mounted && _autoLoginAttempted) {\r\n-           setState(() => _autoLoginAttempted = false);\r\n-         }\r\n-       });\r\n-      // Afficher le tableau de bord approprié\r\n-      if (authService.isSuperAdmin()) {\r\n-         print(\"Navigating to Super Admin Dashboard\");\r\n-         return const DashboardScreen(); // Adaptez si nécessaire\r\n-      } else if (authService.isAdmin() || authService.isUser()) {\r\n-         print(\"Navigating to Main Dashboard\");\r\n-         return const DashboardScreen();\r\n-      } else {\r\n-         print(\"Authenticated user with unrecognized role, defaulting to Dashboard\");\r\n-         return const DashboardScreen();\r\n+    // CAS 1: En cours de chargement (connexion auto/manuelle en cours, vérification token...)\r\n+    if (authService.isLoading) {\r\n+      print(\"➡️ AuthWrapper: Affichage Indicateur de Chargement (isLoading=true)\");\r\n+      return const Scaffold(\r\n+        body: Center(child: CircularProgressIndicator()),\r\n+      );\r\n+    }\r\n+    // CAS 2: Authentifié (et pas en cours de chargement)\r\n+    else if (authService.isAuthenticated) {\r\n+      // --- LOG DE CONNEXION RÉUSSIE ---\r\n+      print(\"✅ AuthWrapper: Utilisateur AUTHENTIFIÉ ! Navigation vers MainScreen...\");\r\n+      // --- FIN LOG ---\r\n+\r\n+      // Réinitialiser le flag si nécessaire (utile si l'utilisateur se déconnecte)\r\n+      if (_autoLoginAttempted) {\r\n+        WidgetsBinding.instance.addPostFrameCallback((_) {\r\n+          if (mounted) {\r\n+            setState(() => _autoLoginAttempted = false);\r\n+            print(\"AuthWrapper: Flag autoLoginAttempted réinitialisé.\");\r\n+          }\r\n+        });\r\n       }\r\n+\r\n+      // --- NAVIGATION VERS MAINSCREEN ---\r\n+      return const MainScreen();\r\n+      // --- FIN NAVIGATION ---\r\n     }\r\n-    // CAS 2: L'utilisateur N'EST PAS authentifié\r\n+    // CAS 3: Non authentifié (et pas en cours de chargement)\r\n     else {\r\n-      // SOUS-CAS 2.1: Le service est en cours de chargement\r\n-      // (soit chargement initial des tokens, soit processus de login/logout en cours)\r\n-      if (authService.isLoading) {\r\n-        print(\"AuthWrapper: Affichage indicateur de chargement (isLoading=true).\");\r\n-        // Affiche un indicateur de chargement pendant toute opération asynchrone\r\n-        return const Scaffold(\r\n-          body: Center(child: CircularProgressIndicator()),\r\n-        );\r\n+      // Si on a tenté la connexion auto et qu'elle a échoué (ou si l'utilisateur\r\n+      // a annulé une connexion manuelle qui l'a ramené ici), on affiche LoginScreen.\r\n+      if (_autoLoginAttempted) {\r\n+         print(\"❌ AuthWrapper: Non authentifié (après tentative auto). Affichage LoginScreen.\");\r\n+         return const LoginScreen();\r\n       }\r\n-      // SOUS-CAS 2.2: Le service N'est PAS en cours de chargement\r\n+      // Sinon, c'est probablement l'état initial avant la tentative auto,\r\n+      // ou juste après un échec très rapide. On affiche le chargement\r\n+      // en attendant que _checkAuthAndTriggerLogin s'exécute ou se termine.\r\n       else {\r\n-        // À ce stade : !isAuthenticated && !isLoading\r\n-\r\n-        // Si on a déjà tenté le login automatique et qu'on est ici,\r\n-        // cela signifie que la tentative a échoué ou a été annulée par l'utilisateur.\r\n-        if (_autoLoginAttempted) {\r\n-          print(\"AuthWrapper: Non authentifié, non en chargement, tentative auto effectuée -> Affichage LoginScreen.\");\r\n-          // Il faut donc afficher l'écran de login manuel.\r\n-          return const LoginScreen();\r\n-        }\r\n-        // Sinon (si _autoLoginAttempted est false), cela signifie qu'on est dans l'état initial\r\n-        // juste avant que le check dans initState/addPostFrameCallback ne lance le login auto,\r\n-        // ou juste après le chargement initial des tokens (qui n'a rien trouvé).\r\n-        else {\r\n-           print(\"AuthWrapper: Non authentifié, non en chargement, tentative auto NON effectuée -> Affichage indicateur + re-check.\");\r\n-           // Pour éviter de flasher le LoginScreen, on affiche l'indicateur de chargement.\r\n-           // On relance aussi le check au cas où il n'aurait pas encore eu lieu.\r\n-           WidgetsBinding.instance.addPostFrameCallback((_) {\r\n-             _checkAuthAndTriggerLogin();\r\n-           });\r\n-           return const Scaffold(\r\n-             body: Center(child: CircularProgressIndicator()),\r\n-           );\r\n-        }\r\n+         print(\"⏳ AuthWrapper: Non authentifié (avant/pendant tentative auto initiale). Affichage Indicateur + Lancement check.\");\r\n+         // On relance le check au cas où.\r\n+         WidgetsBinding.instance.addPostFrameCallback((_) {\r\n+           _checkAuthAndTriggerLogin();\r\n+         });\r\n+         return const Scaffold(\r\n+           body: Center(child: CircularProgressIndicator()),\r\n+         );\r\n       }\r\n     }\r\n   }\r\n }\r\n"
                }
            ],
            "date": 1745536553131,
            "name": "Commit-0",
            "content": "// lib/app.dart\r\nimport 'package:flutter/material.dart';\r\nimport 'package:provider/provider.dart';\r\n\r\nimport 'core/auth/auth_service.dart';\r\nimport 'features/auth/screens/login_screen.dart';\r\nimport 'features/dashboard/screens/dashboard_screen.dart'; // Example home screen\r\n// Import other screens like ProjectListScreen, SuperAdminDashboard etc.\r\n\r\nclass MyApp extends StatelessWidget {\r\n  const MyApp({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      title: 'ArchiManage Mobile',\r\n      theme: ThemeData(\r\n        primarySwatch: Colors.blue, // Customize your theme\r\n        colorScheme: ColorScheme.fromSeed(seedColor: const Color(0xFFE27D60)),\r\n        useMaterial3: true,\r\n      ),\r\n      home: const AuthWrapper(), // Use a wrapper to handle auth state\r\n      // --- Optional: Setup routes for navigation ---\r\n      // routes: {\r\n      //   '/login': (context) => const LoginScreen(),\r\n      //   '/dashboard': (context) => const DashboardScreen(),\r\n      //   '/projects': (context) => const ProjectListScreen(),\r\n      //   // ... other routes\r\n      // },\r\n    );\r\n  }\r\n}\r\n\r\nclass AuthWrapper extends StatelessWidget {\r\n  const AuthWrapper({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    // Listen to the AuthService state\r\n    final authService = context.watch<AuthService>();\r\n\r\n    if (authService.isLoading) {\r\n      // Show a loading indicator while checking auth status\r\n      return const Scaffold(\r\n        body: Center(child: CircularProgressIndicator()),\r\n      );\r\n    } else if (authService.isAuthenticated) {\r\n      // User is authenticated, decide where to navigate based on role\r\n      // This logic mirrors your Angular redirectBasedOnRole\r\n      if (authService.isSuperAdmin()) {\r\n         print(\"Navigating to Super Admin Dashboard\");\r\n         // return const SuperAdminDashboardScreen(); // Replace with your actual screen\r\n         return const DashboardScreen(); // Placeholder\r\n      } else if (authService.isAdmin() || authService.isUser()) {\r\n         print(\"Navigating to Main Dashboard\");\r\n         return const DashboardScreen(); // Replace with your actual screen\r\n      } else {\r\n         print(\"Authenticated user with unrecognized role, defaulting to Dashboard\");\r\n         return const DashboardScreen(); // Fallback screen\r\n      }\r\n    } else {\r\n      // User is not authenticated, show login screen\r\n      return const LoginScreen();\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}