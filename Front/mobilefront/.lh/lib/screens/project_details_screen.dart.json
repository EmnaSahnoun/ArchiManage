{
    "sourceFile": "lib/screens/project_details_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1744668186422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744668194378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,7 +163,4 @@\n         ],\r\n       ),\r\n     );\r\n   }\r\n-\r\n-  Widget _buildPhasesTab() {\r\n-    final\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744668200330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,4 +163,5 @@\n         ],\r\n       ),\r\n     );\r\n   }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744668275406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,167 +1,288 @@\n-import 'package:flutter/material.dart';\r\n-\r\n-class ProjectDetailsScreen extends StatefulWidget {\r\n-  final Map<String, dynamic> project;\r\n-\r\n-  const ProjectDetailsScreen({super.key, required this.project});\r\n-\r\n-  @override\r\n-  State<ProjectDetailsScreen> createState() => _ProjectDetailsScreenState();\r\n-}\r\n-\r\n-class _ProjectDetailsScreenState extends State<ProjectDetailsScreen> {\r\n-  String selectedTab = 'details';\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return DefaultTabController(\r\n-      length: 2,\r\n-      child: Scaffold(\r\n-        appBar: AppBar(\r\n-          title: Text(widget.project['name']),\r\n-          bottom: TabBar(\r\n-            tabs: const [\r\n-              Tab(text: 'Détails'),\r\n-              Tab(text: 'Phases'),\r\n+Widget _buildPhasesTab() {\r\n+    final phases = widget.project['phases'] ?? [];\r\n+    \r\n+    return Column(\r\n+      children: [\r\n+        Padding(\r\n+          padding: const EdgeInsets.all(16.0),\r\n+          child: Row(\r\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+            children: [\r\n+              const Text(\r\n+                'Phases',\r\n+                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n+              ),\r\n+              ElevatedButton.icon(\r\n+                onPressed: _addPhase,\r\n+                icon: const Icon(Icons.add, size: 20),\r\n+                label: const Text('Ajouter une phase'),\r\n+                style: ElevatedButton.styleFrom(\r\n+                  backgroundColor: const Color(0xFFE27D60),\r\n+                  foregroundColor: Colors.white,\r\n+                  shape: RoundedRectangleBorder(\r\n+                    borderRadius: BorderRadius.circular(20),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n             ],\r\n-            onTap: (index) {\r\n-              setState(() {\r\n-                selectedTab = index == 0 ? 'details' : 'phases';\r\n-              });\r\n-            },\r\n           ),\r\n         ),\r\n-        body: TabBarView(\r\n-          children: [\r\n-            _buildDetailsTab(),\r\n-            _buildPhasesTab(),\r\n-          ],\r\n+        Expanded(\r\n+          child: phases.isEmpty\r\n+              ? const Center(child: Text('Aucune phase disponible pour ce projet.'))\r\n+              : ListView.builder(\r\n+                  itemCount: phases.length,\r\n+                  itemBuilder: (context, index) {\r\n+                    final phase = phases[index];\r\n+                    return Card(\r\n+                      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n+                      child: Padding(\r\n+                        padding: const EdgeInsets.all(12.0),\r\n+                        child: Column(\r\n+                          crossAxisAlignment: CrossAxisAlignment.start,\r\n+                          children: [\r\n+                            Row(\r\n+                              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+                              children: [\r\n+                                Text(\r\n+                                  phase['name'] ?? 'Phase sans nom',\r\n+                                  style: const TextStyle(\r\n+                                    fontWeight: FontWeight.bold,\r\n+                                    fontSize: 16,\r\n+                                  ),\r\n+                                ),\r\n+                                Row(\r\n+                                  children: [\r\n+                                    IconButton(\r\n+                                      icon: const Icon(Icons.edit, size: 20),\r\n+                                      onPressed: () => _editPhase(phase),\r\n+                                    ),\r\n+                                    IconButton(\r\n+                                      icon: const Icon(Icons.delete, size: 20, color: Colors.red),\r\n+                                      onPressed: () => _deletePhase(phase),\r\n+                                    ),\r\n+                                  ],\r\n+                                ),\r\n+                              ],\r\n+                            ),\r\n+                            const SizedBox(height: 8),\r\n+                            Text(phase['description'] ?? 'Pas de description'),\r\n+                            const SizedBox(height: 8),\r\n+                            Row(\r\n+                              children: [\r\n+                                const Icon(Icons.calendar_today, size: 16),\r\n+                                const SizedBox(width: 4),\r\n+                                Text('${phase['startDate']} - ${phase['endDate']}'),\r\n+                              ],\r\n+                            ),\r\n+                            const SizedBox(height: 8),\r\n+                            Row(\r\n+                              children: [\r\n+                                const Icon(Icons.checklist, size: 16),\r\n+                                const SizedBox(width: 4),\r\n+                                Text('${phase['tasks']?.length ?? 0} tâches'),\r\n+                              ],\r\n+                            ),\r\n+                            const SizedBox(height: 8),\r\n+                            if (phase['members'] != null && phase['members'].isNotEmpty)\r\n+                              Column(\r\n+                                crossAxisAlignment: CrossAxisAlignment.start,\r\n+                                children: [\r\n+                                  const Text(\r\n+                                    'Membres:',\r\n+                                    style: TextStyle(fontWeight: FontWeight.bold),\r\n+                                  ),\r\n+                                  const SizedBox(height: 4),\r\n+                                  Wrap(\r\n+                                    spacing: 8,\r\n+                                    children: [\r\n+                                      for (var member in phase['members'])\r\n+                                        Chip(\r\n+                                          avatar: CircleAvatar(\r\n+                                            backgroundImage: AssetImage(member['image']),\r\n+                                            radius: 12,\r\n+                                          ),\r\n+                                          label: Text(member['name']),\r\n+                                          backgroundColor: Colors.grey[200],\r\n+                                          visualDensity: VisualDensity.compact,\r\n+                                        ),\r\n+                                    ],\r\n+                                  ),\r\n+                                ],\r\n+                              ),\r\n+                          ],\r\n+                        ),\r\n+                      ),\r\n+                    );\r\n+                  },\r\n+                ),\r\n         ),\r\n-      ),\r\n+      ],\r\n     );\r\n   }\r\n \r\n-  Widget _buildDetailsTab() {\r\n-    return SingleChildScrollView(\r\n-      padding: const EdgeInsets.all(16.0),\r\n-      child: Column(\r\n-        crossAxisAlignment: CrossAxisAlignment.stretch,\r\n-        children: [\r\n-          Card(\r\n-            child: Padding(\r\n\\ No newline at end of file\n-              padding: const EdgeInsets.all(16.0),\r\n-              child: Column(\r\n-                crossAxisAlignment: CrossAxisAlignment.start,\r\n+  void _addPhase() {\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => AlertDialog(\r\n+        title: const Text('Nouvelle Phase'),\r\n+        content: SingleChildScrollView(\r\n+          child: Column(\r\n+            mainAxisSize: MainAxisSize.min,\r\n+            children: [\r\n+              TextField(\r\n+                decoration: const InputDecoration(\r\n+                  labelText: 'Nom de la phase',\r\n+                  border: OutlineInputBorder(),\r\n+                ),\r\n+                onChanged: (value) {},\r\n+              ),\r\n+              const SizedBox(height: 16),\r\n+              TextField(\r\n+                decoration: const InputDecoration(\r\n+                  labelText: 'Description',\r\n+                  border: OutlineInputBorder(),\r\n+                ),\r\n+                maxLines: 3,\r\n+                onChanged: (value) {},\r\n+              ),\r\n+              const SizedBox(height: 16),\r\n+              Row(\r\n                 children: [\r\n-                  const Text(\r\n-                    'Détails du projet',\r\n-                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n+                  Expanded(\r\n+                    child: TextField(\r\n+                      decoration: const InputDecoration(\r\n+                        labelText: 'Date début',\r\n+                        border: OutlineInputBorder(),\r\n+                      ),\r\n+                      onTap: () async {\r\n+                        final date = await showDatePicker(\r\n+                          context: context,\r\n+                          initialDate: DateTime.now(),\r\n+                          firstDate: DateTime(2000),\r\n+                          lastDate: DateTime(2100),\r\n+                        );\r\n+                        if (date != null) {\r\n+                          // Mettre à jour la date\r\n+                        }\r\n+                      },\r\n+                    ),\r\n                   ),\r\n-                  const SizedBox(height: 16),\r\n-                  _buildDetailRow('Nom', widget.project['name']),\r\n-                  _buildDetailRow('Description', widget.project['description'] ?? 'Pas de description'),\r\n-                  _buildDetailRow('Date de création', widget.project['createdAt']),\r\n-                  const SizedBox(height: 16),\r\n-                  ElevatedButton(\r\n-                    onPressed: () {},\r\n-                    style: ElevatedButton.styleFrom(\r\n-                      backgroundColor: const Color(0xFFE27D60),\r\n-                      shape: RoundedRectangleBorder(\r\n-                        borderRadius: BorderRadius.circular(20),\r\n+                  const SizedBox(width: 16),\r\n+                  Expanded(\r\n+                    child: TextField(\r\n+                      decoration: const InputDecoration(\r\n+                        labelText: 'Date fin',\r\n+                        border: OutlineInputBorder(),\r\n                       ),\r\n+                      onTap: () async {\r\n+                        final date = await showDatePicker(\r\n+                          context: context,\r\n+                          initialDate: DateTime.now(),\r\n+                          firstDate: DateTime(2000),\r\n+                          lastDate: DateTime(2100),\r\n+                        );\r\n+                        if (date != null) {\r\n+                          // Mettre à jour la date\r\n+                        }\r\n+                      },\r\n                     ),\r\n-                    child: const Text('Modifier'),\r\n                   ),\r\n                 ],\r\n               ),\r\n-            ),\r\n+            ],\r\n           ),\r\n-          const SizedBox(height: 16),\r\n-          Card(\r\n-            child: Padding(\r\n-              padding: const EdgeInsets.all(16.0),\r\n-              child: Column(\r\n-                children: [\r\n-                  const Text(\r\n-                    'Statistiques',\r\n-                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n-                  ),\r\n-                  const SizedBox(height: 16),\r\n-                  SizedBox(\r\n-                    width: 100,\r\n-                    height: 100,\r\n-                    child: Stack(\r\n-                      alignment: Alignment.center,\r\n-                      children: [\r\n-                        CircularProgressIndicator(\r\n-                          value: widget.project['progress'] / 100,\r\n-                          strokeWidth: 8,\r\n-                          color: const Color(0xFFE27D60),\r\n-                        ),\r\n-                        Text(\r\n-                          '${widget.project['progress']}%',\r\n-                          style: const TextStyle(\r\n-                            fontSize: 18,\r\n-                            fontWeight: FontWeight.bold,\r\n-                          ),\r\n-                        ),\r\n-                      ],\r\n-                    ),\r\n-                  ),\r\n-                ],\r\n-              ),\r\n+        ),\r\n+        actions: [\r\n+          TextButton(\r\n+            onPressed: () => Navigator.pop(context),\r\n+            child: const Text('Annuler'),\r\n+          ),\r\n+          ElevatedButton(\r\n+            onPressed: () {\r\n+              // Ajouter la nouvelle phase\r\n+              setState(() {\r\n+                widget.project['phases'].add({\r\n+                  'name': 'Nouvelle Phase',\r\n+                  'description': 'Description de la nouvelle phase',\r\n+                  'startDate': '01/01/2025',\r\n+                  'endDate': '31/12/2025',\r\n+                  'tasks': [],\r\n+                  'members': [],\r\n+                });\r\n+              });\r\n+              Navigator.pop(context);\r\n+            },\r\n+            style: ElevatedButton.styleFrom(\r\n+              backgroundColor: const Color(0xFFE27D60),\r\n             ),\r\n+            child: const Text('Ajouter'),\r\n           ),\r\n-          const SizedBox(height: 16),\r\n-          Card(\r\n-            child: Padding(\r\n-              padding: const EdgeInsets.all(16.0),\r\n-              child: Column(\r\n-                crossAxisAlignment: CrossAxisAlignment.start,\r\n-                children: [\r\n-                  const Text(\r\n-                    'Membres du projet',\r\n-                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n-                  ),\r\n-                  const SizedBox(height: 16),\r\n-                  Wrap(\r\n-                    spacing: 8,\r\n-                    runSpacing: 8,\r\n-                    children: [\r\n-                      for (var member in widget.project['members'])\r\n-                        Chip(\r\n-                          avatar: CircleAvatar(\r\n-                            backgroundImage: AssetImage(member['image']),\r\n-                          ),\r\n-                          label: Text(member['name']),\r\n-                        ),\r\n-                    ],\r\n-                  ),\r\n-                ],\r\n-              ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  void _editPhase(Map<String, dynamic> phase) {\r\n+    final controller = TextEditingController(text: phase['name']);\r\n+\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => AlertDialog(\r\n+        title: const Text('Modifier la phase'),\r\n+        content: TextField(\r\n+          controller: controller,\r\n+          decoration: const InputDecoration(\r\n+            labelText: 'Nom de la phase',\r\n+            border: OutlineInputBorder(),\r\n+          ),\r\n+        ),\r\n+        actions: [\r\n+          TextButton(\r\n+            onPressed: () => Navigator.pop(context),\r\n+            child: const Text('Annuler'),\r\n+          ),\r\n+          ElevatedButton(\r\n+            onPressed: () {\r\n+              setState(() {\r\n+                phase['name'] = controller.text;\r\n+              });\r\n+              Navigator.pop(context);\r\n+            },\r\n+            style: ElevatedButton.styleFrom(\r\n+              backgroundColor: const Color(0xFFE27D60),\r\n             ),\r\n+            child: const Text('Enregistrer'),\r\n           ),\r\n         ],\r\n       ),\r\n     );\r\n   }\r\n \r\n-  Widget _buildDetailRow(String label, String value) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.symmetric(vertical: 8.0),\r\n-      child: Row(\r\n-        crossAxisAlignment: CrossAxisAlignment.start,\r\n-        children: [\r\n-          SizedBox(\r\n-            width: 120,\r\n-            child: Text(\r\n-              '$label :',\r\n-              style: const TextStyle(fontWeight: FontWeight.bold),\r\n+  void _deletePhase(Map<String, dynamic> phase) {\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => AlertDialog(\r\n+        title: const Text('Supprimer la phase'),\r\n+        content: Text('Voulez-vous vraiment supprimer \"${phase['name']}\" ?'),\r\n+        actions: [\r\n+          TextButton(\r\n+            onPressed: () => Navigator.pop(context),\r\n+            child: const Text('Annuler'),\r\n+          ),\r\n+          ElevatedButton(\r\n+            onPressed: () {\r\n+              setState(() {\r\n+                widget.project['phases'].remove(phase);\r\n+              });\r\n+              Navigator.pop(context);\r\n+            },\r\n+            style: ElevatedButton.styleFrom(\r\n+              backgroundColor: Colors.red,\r\n             ),\r\n+            child: const Text('Supprimer'),\r\n           ),\r\n-          Expanded(child: Text(value)),\r\n         ],\r\n       ),\r\n     );\r\n-  }\r\n-}\n+  }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744668303595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,288 +1,169 @@\n-Widget _buildPhasesTab() {\r\n-    final phases = widget.project['phases'] ?? [];\r\n-    \r\n-    return Column(\r\n-      children: [\r\n-        Padding(\r\n-          padding: const EdgeInsets.all(16.0),\r\n-          child: Row(\r\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-            children: [\r\n-              const Text(\r\n-                'Phases',\r\n-                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n-              ),\r\n-              ElevatedButton.icon(\r\n-                onPressed: _addPhase,\r\n-                icon: const Icon(Icons.add, size: 20),\r\n-                label: const Text('Ajouter une phase'),\r\n-                style: ElevatedButton.styleFrom(\r\n-                  backgroundColor: const Color(0xFFE27D60),\r\n-                  foregroundColor: Colors.white,\r\n-                  shape: RoundedRectangleBorder(\r\n-                    borderRadius: BorderRadius.circular(20),\r\n-                  ),\r\n-                ),\r\n-              ),\r\n+import 'package:flutter/material.dart';\r\n+\r\n+class ProjectDetailsScreen extends StatefulWidget {\r\n+  final Map<String, dynamic> project;\r\n+\r\n+  const ProjectDetailsScreen({super.key, required this.project});\r\n+\r\n+  @override\r\n+  State<ProjectDetailsScreen> createState() => _ProjectDetailsScreenState();\r\n+}\r\n+\r\n+class _ProjectDetailsScreenState extends State<ProjectDetailsScreen> {\r\n+  String selectedTab = 'details';\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return DefaultTabController(\r\n+      length: 2,\r\n+      child: Scaffold(\r\n+        appBar: AppBar(\r\n+          title: Text(widget.project['name']),\r\n+          bottom: TabBar(\r\n+            tabs: const [\r\n+              Tab(text: 'Détails'),\r\n+              Tab(text: 'Phases'),\r\n             ],\r\n+            onTap: (index) {\r\n+              setState(() {\r\n+                selectedTab = index == 0 ? 'details' : 'phases';\r\n+              });\r\n+            },\r\n           ),\r\n         ),\r\n-        Expanded(\r\n-          child: phases.isEmpty\r\n-              ? const Center(child: Text('Aucune phase disponible pour ce projet.'))\r\n-              : ListView.builder(\r\n-                  itemCount: phases.length,\r\n-                  itemBuilder: (context, index) {\r\n-                    final phase = phases[index];\r\n-                    return Card(\r\n-                      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n-                      child: Padding(\r\n-                        padding: const EdgeInsets.all(12.0),\r\n-                        child: Column(\r\n-                          crossAxisAlignment: CrossAxisAlignment.start,\r\n-                          children: [\r\n-                            Row(\r\n-                              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-                              children: [\r\n-                                Text(\r\n-                                  phase['name'] ?? 'Phase sans nom',\r\n-                                  style: const TextStyle(\r\n-                                    fontWeight: FontWeight.bold,\r\n-                                    fontSize: 16,\r\n-                                  ),\r\n-                                ),\r\n-                                Row(\r\n-                                  children: [\r\n-                                    IconButton(\r\n-                                      icon: const Icon(Icons.edit, size: 20),\r\n-                                      onPressed: () => _editPhase(phase),\r\n-                                    ),\r\n-                                    IconButton(\r\n-                                      icon: const Icon(Icons.delete, size: 20, color: Colors.red),\r\n-                                      onPressed: () => _deletePhase(phase),\r\n-                                    ),\r\n-                                  ],\r\n-                                ),\r\n-                              ],\r\n-                            ),\r\n-                            const SizedBox(height: 8),\r\n-                            Text(phase['description'] ?? 'Pas de description'),\r\n-                            const SizedBox(height: 8),\r\n-                            Row(\r\n-                              children: [\r\n-                                const Icon(Icons.calendar_today, size: 16),\r\n-                                const SizedBox(width: 4),\r\n-                                Text('${phase['startDate']} - ${phase['endDate']}'),\r\n-                              ],\r\n-                            ),\r\n-                            const SizedBox(height: 8),\r\n-                            Row(\r\n-                              children: [\r\n-                                const Icon(Icons.checklist, size: 16),\r\n-                                const SizedBox(width: 4),\r\n-                                Text('${phase['tasks']?.length ?? 0} tâches'),\r\n-                              ],\r\n-                            ),\r\n-                            const SizedBox(height: 8),\r\n-                            if (phase['members'] != null && phase['members'].isNotEmpty)\r\n-                              Column(\r\n-                                crossAxisAlignment: CrossAxisAlignment.start,\r\n-                                children: [\r\n-                                  const Text(\r\n-                                    'Membres:',\r\n-                                    style: TextStyle(fontWeight: FontWeight.bold),\r\n-                                  ),\r\n-                                  const SizedBox(height: 4),\r\n-                                  Wrap(\r\n-                                    spacing: 8,\r\n-                                    children: [\r\n-                                      for (var member in phase['members'])\r\n-                                        Chip(\r\n-                                          avatar: CircleAvatar(\r\n-                                            backgroundImage: AssetImage(member['image']),\r\n-                                            radius: 12,\r\n-                                          ),\r\n-                                          label: Text(member['name']),\r\n-                                          backgroundColor: Colors.grey[200],\r\n-                                          visualDensity: VisualDensity.compact,\r\n-                                        ),\r\n-                                    ],\r\n-                                  ),\r\n-                                ],\r\n-                              ),\r\n-                          ],\r\n-                        ),\r\n-                      ),\r\n-                    );\r\n-                  },\r\n-                ),\r\n+        body: TabBarView(\r\n+          children: [\r\n+            _buildDetailsTab(),\r\n+            _buildPhasesTab(),\r\n+          ],\r\n         ),\r\n-      ],\r\n+      ),\r\n     );\r\n   }\r\n \r\n-  void _addPhase() {\r\n-    showDialog(\r\n-      context: context,\r\n-      builder: (context) => AlertDialog(\r\n-        title: const Text('Nouvelle Phase'),\r\n-        content: SingleChildScrollView(\r\n-          child: Column(\r\n-            mainAxisSize: MainAxisSize.min,\r\n-            children: [\r\n-              TextField(\r\n-                decoration: const InputDecoration(\r\n-                  labelText: 'Nom de la phase',\r\n-                  border: OutlineInputBorder(),\r\n-                ),\r\n-                onChanged: (value) {},\r\n-              ),\r\n-              const SizedBox(height: 16),\r\n-              TextField(\r\n-                decoration: const InputDecoration(\r\n-                  labelText: 'Description',\r\n-                  border: OutlineInputBorder(),\r\n-                ),\r\n-                maxLines: 3,\r\n-                onChanged: (value) {},\r\n-              ),\r\n-              const SizedBox(height: 16),\r\n-              Row(\r\n+  Widget _buildDetailsTab() {\r\n+    return SingleChildScrollView(\r\n+      padding: const EdgeInsets.all(16.0),\r\n+      child: Column(\r\n+        crossAxisAlignment: CrossAxisAlignment.stretch,\r\n+        children: [\r\n+          Card(\r\n+            child: Padding(\r\n+              padding: const EdgeInsets.all(16.0),\r\n+              child: Column(\r\n+                crossAxisAlignment: CrossAxisAlignment.start,\r\n                 children: [\r\n-                  Expanded(\r\n-                    child: TextField(\r\n-                      decoration: const InputDecoration(\r\n-                        labelText: 'Date début',\r\n-                        border: OutlineInputBorder(),\r\n+                  const Text(\r\n+                    'Détails du projet',\r\n+                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n+                  ),\r\n+                  const SizedBox(height: 16),\r\n+                  _buildDetailRow('Nom', widget.project['name']),\r\n+                  _buildDetailRow('Description', widget.project['description'] ?? 'Pas de description'),\r\n+                  _buildDetailRow('Date de création', widget.project['createdAt']),\r\n+                  const SizedBox(height: 16),\r\n+                  ElevatedButton(\r\n+                    onPressed: () {},\r\n+                    style: ElevatedButton.styleFrom(\r\n+                      backgroundColor: const Color(0xFFE27D60),\r\n+                      shape: RoundedRectangleBorder(\r\n+                        borderRadius: BorderRadius.circular(20),\r\n                       ),\r\n-                      onTap: () async {\r\n-                        final date = await showDatePicker(\r\n-                          context: context,\r\n-                          initialDate: DateTime.now(),\r\n-                          firstDate: DateTime(2000),\r\n-                          lastDate: DateTime(2100),\r\n-                        );\r\n-                        if (date != null) {\r\n-                          // Mettre à jour la date\r\n-                        }\r\n-                      },\r\n                     ),\r\n+                    child: const Text('Modifier'),\r\n                   ),\r\n-                  const SizedBox(width: 16),\r\n-                  Expanded(\r\n-                    child: TextField(\r\n-                      decoration: const InputDecoration(\r\n-                        labelText: 'Date fin',\r\n-                        border: OutlineInputBorder(),\r\n-                      ),\r\n-                      onTap: () async {\r\n-                        final date = await showDatePicker(\r\n-                          context: context,\r\n-                          initialDate: DateTime.now(),\r\n-                          firstDate: DateTime(2000),\r\n-                          lastDate: DateTime(2100),\r\n-                        );\r\n-                        if (date != null) {\r\n-                          // Mettre à jour la date\r\n-                        }\r\n-                      },\r\n+                ],\r\n+              ),\r\n+            ),\r\n+          ),\r\n+          const SizedBox(height: 16),\r\n+          Card(\r\n+            child: Padding(\r\n+              padding: const EdgeInsets.all(16.0),\r\n+              child: Column(\r\n+                children: [\r\n+                  const Text(\r\n+                    'Statistiques',\r\n+                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n+                  ),\r\n+                  const SizedBox(height: 16),\r\n+                  SizedBox(\r\n+                    width: 100,\r\n+                    height: 100,\r\n+                    child: Stack(\r\n+                      alignment: Alignment.center,\r\n+                      children: [\r\n+                        CircularProgressIndicator(\r\n+                          value: widget.project['progress'] / 100,\r\n+                          strokeWidth: 8,\r\n+                          color: const Color(0xFFE27D60),\r\n+                        ),\r\n+                        Text(\r\n+                          '${widget.project['progress']}%',\r\n+                          style: const TextStyle(\r\n+                            fontSize: 18,\r\n+                            fontWeight: FontWeight.bold,\r\n+                          ),\r\n+                        ),\r\n+                      ],\r\n                     ),\r\n                   ),\r\n                 ],\r\n\\ No newline at end of file\n               ),\r\n-            ],\r\n+            ),\r\n           ),\r\n-        ),\r\n-        actions: [\r\n-          TextButton(\r\n-            onPressed: () => Navigator.pop(context),\r\n-            child: const Text('Annuler'),\r\n-          ),\r\n-          ElevatedButton(\r\n-            onPressed: () {\r\n-              // Ajouter la nouvelle phase\r\n-              setState(() {\r\n-                widget.project['phases'].add({\r\n-                  'name': 'Nouvelle Phase',\r\n-                  'description': 'Description de la nouvelle phase',\r\n-                  'startDate': '01/01/2025',\r\n-                  'endDate': '31/12/2025',\r\n-                  'tasks': [],\r\n-                  'members': [],\r\n-                });\r\n-              });\r\n-              Navigator.pop(context);\r\n-            },\r\n-            style: ElevatedButton.styleFrom(\r\n-              backgroundColor: const Color(0xFFE27D60),\r\n+          const SizedBox(height: 16),\r\n+          Card(\r\n+            child: Padding(\r\n+              padding: const EdgeInsets.all(16.0),\r\n+              child: Column(\r\n+                crossAxisAlignment: CrossAxisAlignment.start,\r\n+                children: [\r\n+                  const Text(\r\n+                    'Membres du projet',\r\n+                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n+                  ),\r\n+                  const SizedBox(height: 16),\r\n+                  Wrap(\r\n+                    spacing: 8,\r\n+                    runSpacing: 8,\r\n+                    children: [\r\n+                      for (var member in widget.project['members'])\r\n+                        Chip(\r\n+                          avatar: CircleAvatar(\r\n+                            backgroundImage: AssetImage(member['image']),\r\n+                          ),\r\n+                          label: Text(member['name']),\r\n+                        ),\r\n+                    ],\r\n+                  ),\r\n+                ],\r\n+              ),\r\n             ),\r\n-            child: const Text('Ajouter'),\r\n           ),\r\n         ],\r\n       ),\r\n     );\r\n   }\r\n \r\n-  void _editPhase(Map<String, dynamic> phase) {\r\n-    final controller = TextEditingController(text: phase['name']);\r\n-\r\n-    showDialog(\r\n-      context: context,\r\n-      builder: (context) => AlertDialog(\r\n-        title: const Text('Modifier la phase'),\r\n-        content: TextField(\r\n-          controller: controller,\r\n-          decoration: const InputDecoration(\r\n-            labelText: 'Nom de la phase',\r\n-            border: OutlineInputBorder(),\r\n-          ),\r\n-        ),\r\n-        actions: [\r\n-          TextButton(\r\n-            onPressed: () => Navigator.pop(context),\r\n-            child: const Text('Annuler'),\r\n-          ),\r\n-          ElevatedButton(\r\n-            onPressed: () {\r\n-              setState(() {\r\n-                phase['name'] = controller.text;\r\n-              });\r\n-              Navigator.pop(context);\r\n-            },\r\n-            style: ElevatedButton.styleFrom(\r\n-              backgroundColor: const Color(0xFFE27D60),\r\n+  Widget _buildDetailRow(String label, String value) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 8.0),\r\n+      child: Row(\r\n+        crossAxisAlignment: CrossAxisAlignment.start,\r\n+        children: [\r\n+          SizedBox(\r\n+            width: 120,\r\n+            child: Text(\r\n+              '$label :',\r\n+              style: const TextStyle(fontWeight: FontWeight.bold),\r\n             ),\r\n-            child: const Text('Enregistrer'),\r\n           ),\r\n+          Expanded(child: Text(value)),\r\n         ],\r\n       ),\r\n     );\r\n   }\r\n \r\n-  void _deletePhase(Map<String, dynamic> phase) {\r\n-    showDialog(\r\n-      context: context,\r\n-      builder: (context) => AlertDialog(\r\n-        title: const Text('Supprimer la phase'),\r\n-        content: Text('Voulez-vous vraiment supprimer \"${phase['name']}\" ?'),\r\n-        actions: [\r\n-          TextButton(\r\n-            onPressed: () => Navigator.pop(context),\r\n-            child: const Text('Annuler'),\r\n-          ),\r\n-          ElevatedButton(\r\n-            onPressed: () {\r\n-              setState(() {\r\n-                widget.project['phases'].remove(phase);\r\n-              });\r\n-              Navigator.pop(context);\r\n-            },\r\n-            style: ElevatedButton.styleFrom(\r\n-              backgroundColor: Colors.red,\r\n-            ),\r\n-            child: const Text('Supprimer'),\r\n-          ),\r\n-        ],\r\n-      ),\r\n-    );\r\n-  }\n+  Widget _buildPhasesTab() {\r\n+    final\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744668317222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,5 +165,291 @@\n     );\r\n   }\r\n \r\n   Widget _buildPhasesTab() {\r\n-    final\n\\ No newline at end of file\n+    final phases = widget.project['phases'] ?? [];\r\n+    \r\n+    return Column(\r\n+      children: [\r\n+        Padding(\r\n+          padding: const EdgeInsets.all(16.0),\r\n+          child: Row(\r\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+            children: [\r\n+              const Text(\r\n+                'Phases',\r\n+                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n+              ),\r\n+              ElevatedButton.icon(\r\n+                onPressed: _addPhase,\r\n+                icon: const Icon(Icons.add, size: 20),\r\n+                label: const Text('Ajouter une phase'),\r\n+                style: ElevatedButton.styleFrom(\r\n+                  backgroundColor: const Color(0xFFE27D60),\r\n+                  foregroundColor: Colors.white,\r\n+                  shape: RoundedRectangleBorder(\r\n+                    borderRadius: BorderRadius.circular(20),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+            ],\r\n+          ),\r\n+        ),\r\n+        Expanded(\r\n+          child: phases.isEmpty\r\n+              ? const Center(child: Text('Aucune phase disponible pour ce projet.'))\r\n+              : ListView.builder(\r\n+                  itemCount: phases.length,\r\n+                  itemBuilder: (context, index) {\r\n+                    final phase = phases[index];\r\n+                    return Card(\r\n+                      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n+                      child: Padding(\r\n+                        padding: const EdgeInsets.all(12.0),\r\n+                        child: Column(\r\n+                          crossAxisAlignment: CrossAxisAlignment.start,\r\n+                          children: [\r\n+                            Row(\r\n+                              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+                              children: [\r\n+                                Text(\r\n+                                  phase['name'] ?? 'Phase sans nom',\r\n+                                  style: const TextStyle(\r\n+                                    fontWeight: FontWeight.bold,\r\n+                                    fontSize: 16,\r\n+                                  ),\r\n+                                ),\r\n+                                Row(\r\n+                                  children: [\r\n+                                    IconButton(\r\n+                                      icon: const Icon(Icons.edit, size: 20),\r\n+                                      onPressed: () => _editPhase(phase),\r\n+                                    ),\r\n+                                    IconButton(\r\n+                                      icon: const Icon(Icons.delete, size: 20, color: Colors.red),\r\n+                                      onPressed: () => _deletePhase(phase),\r\n+                                    ),\r\n+                                  ],\r\n+                                ),\r\n+                              ],\r\n+                            ),\r\n+                            const SizedBox(height: 8),\r\n+                            Text(phase['description'] ?? 'Pas de description'),\r\n+                            const SizedBox(height: 8),\r\n+                            Row(\r\n+                              children: [\r\n+                                const Icon(Icons.calendar_today, size: 16),\r\n+                                const SizedBox(width: 4),\r\n+                                Text('${phase['startDate']} - ${phase['endDate']}'),\r\n+                              ],\r\n+                            ),\r\n+                            const SizedBox(height: 8),\r\n+                            Row(\r\n+                              children: [\r\n+                                const Icon(Icons.checklist, size: 16),\r\n+                                const SizedBox(width: 4),\r\n+                                Text('${phase['tasks']?.length ?? 0} tâches'),\r\n+                              ],\r\n+                            ),\r\n+                            const SizedBox(height: 8),\r\n+                            if (phase['members'] != null && phase['members'].isNotEmpty)\r\n+                              Column(\r\n+                                crossAxisAlignment: CrossAxisAlignment.start,\r\n+                                children: [\r\n+                                  const Text(\r\n+                                    'Membres:',\r\n+                                    style: TextStyle(fontWeight: FontWeight.bold),\r\n+                                  ),\r\n+                                  const SizedBox(height: 4),\r\n+                                  Wrap(\r\n+                                    spacing: 8,\r\n+                                    children: [\r\n+                                      for (var member in phase['members'])\r\n+                                        Chip(\r\n+                                          avatar: CircleAvatar(\r\n+                                            backgroundImage: AssetImage(member['image']),\r\n+                                            radius: 12,\r\n+                                          ),\r\n+                                          label: Text(member['name']),\r\n+                                          backgroundColor: Colors.grey[200],\r\n+                                          visualDensity: VisualDensity.compact,\r\n+                                        ),\r\n+                                    ],\r\n+                                  ),\r\n+                                ],\r\n+                              ),\r\n+                          ],\r\n+                        ),\r\n+                      ),\r\n+                    );\r\n+                  },\r\n+                ),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  void _addPhase() {\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => AlertDialog(\r\n+        title: const Text('Nouvelle Phase'),\r\n+        content: SingleChildScrollView(\r\n+          child: Column(\r\n+            mainAxisSize: MainAxisSize.min,\r\n+            children: [\r\n+              TextField(\r\n+                decoration: const InputDecoration(\r\n+                  labelText: 'Nom de la phase',\r\n+                  border: OutlineInputBorder(),\r\n+                ),\r\n+                onChanged: (value) {},\r\n+              ),\r\n+              const SizedBox(height: 16),\r\n+              TextField(\r\n+                decoration: const InputDecoration(\r\n+                  labelText: 'Description',\r\n+                  border: OutlineInputBorder(),\r\n+                ),\r\n+                maxLines: 3,\r\n+                onChanged: (value) {},\r\n+              ),\r\n+              const SizedBox(height: 16),\r\n+              Row(\r\n+                children: [\r\n+                  Expanded(\r\n+                    child: TextField(\r\n+                      decoration: const InputDecoration(\r\n+                        labelText: 'Date début',\r\n+                        border: OutlineInputBorder(),\r\n+                      ),\r\n+                      onTap: () async {\r\n+                        final date = await showDatePicker(\r\n+                          context: context,\r\n+                          initialDate: DateTime.now(),\r\n+                          firstDate: DateTime(2000),\r\n+                          lastDate: DateTime(2100),\r\n+                        );\r\n+                        if (date != null) {\r\n+                          // Mettre à jour la date\r\n+                        }\r\n+                      },\r\n+                    ),\r\n+                  ),\r\n+                  const SizedBox(width: 16),\r\n+                  Expanded(\r\n+                    child: TextField(\r\n+                      decoration: const InputDecoration(\r\n+                        labelText: 'Date fin',\r\n+                        border: OutlineInputBorder(),\r\n+                      ),\r\n+                      onTap: () async {\r\n+                        final date = await showDatePicker(\r\n+                          context: context,\r\n+                          initialDate: DateTime.now(),\r\n+                          firstDate: DateTime(2000),\r\n+                          lastDate: DateTime(2100),\r\n+                        );\r\n+                        if (date != null) {\r\n+                          // Mettre à jour la date\r\n+                        }\r\n+                      },\r\n+                    ),\r\n+                  ),\r\n+                ],\r\n+              ),\r\n+            ],\r\n+          ),\r\n+        ),\r\n+        actions: [\r\n+          TextButton(\r\n+            onPressed: () => Navigator.pop(context),\r\n+            child: const Text('Annuler'),\r\n+          ),\r\n+          ElevatedButton(\r\n+            onPressed: () {\r\n+              // Ajouter la nouvelle phase\r\n+              setState(() {\r\n+                widget.project['phases'].add({\r\n+                  'name': 'Nouvelle Phase',\r\n+                  'description': 'Description de la nouvelle phase',\r\n+                  'startDate': '01/01/2025',\r\n+                  'endDate': '31/12/2025',\r\n+                  'tasks': [],\r\n+                  'members': [],\r\n+                });\r\n+              });\r\n+              Navigator.pop(context);\r\n+            },\r\n+            style: ElevatedButton.styleFrom(\r\n+              backgroundColor: const Color(0xFFE27D60),\r\n+            ),\r\n+            child: const Text('Ajouter'),\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  void _editPhase(Map<String, dynamic> phase) {\r\n+    final controller = TextEditingController(text: phase['name']);\r\n+\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => AlertDialog(\r\n+        title: const Text('Modifier la phase'),\r\n+        content: TextField(\r\n+          controller: controller,\r\n+          decoration: const InputDecoration(\r\n+            labelText: 'Nom de la phase',\r\n+            border: OutlineInputBorder(),\r\n+          ),\r\n+        ),\r\n+        actions: [\r\n+          TextButton(\r\n+            onPressed: () => Navigator.pop(context),\r\n+            child: const Text('Annuler'),\r\n+          ),\r\n+          ElevatedButton(\r\n+            onPressed: () {\r\n+              setState(() {\r\n+                phase['name'] = controller.text;\r\n+              });\r\n+              Navigator.pop(context);\r\n+            },\r\n+            style: ElevatedButton.styleFrom(\r\n+              backgroundColor: const Color(0xFFE27D60),\r\n+            ),\r\n+            child: const Text('Enregistrer'),\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  void _deletePhase(Map<String, dynamic> phase) {\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => AlertDialog(\r\n+        title: const Text('Supprimer la phase'),\r\n+        content: Text('Voulez-vous vraiment supprimer \"${phase['name']}\" ?'),\r\n+        actions: [\r\n+          TextButton(\r\n+            onPressed: () => Navigator.pop(context),\r\n+            child: const Text('Annuler'),\r\n+          ),\r\n+          ElevatedButton(\r\n+            onPressed: () {\r\n+              setState(() {\r\n+                widget.project['phases'].remove(phase);\r\n+              });\r\n+              Navigator.pop(context);\r\n+            },\r\n+            style: ElevatedButton.styleFrom(\r\n+              backgroundColor: Colors.red,\r\n+            ),\r\n+            child: const Text('Supprimer'),\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744668329063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -451,5 +451,5 @@\n           ),\r\n         ],\r\n       ),\r\n     );\r\n-  }\n\\ No newline at end of file\n+  }}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744668334420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,291 +165,5 @@\n     );\r\n   }\r\n \r\n   Widget _buildPhasesTab() {\r\n-    final phases = widget.project['phases'] ?? [];\r\n-    \r\n-    return Column(\r\n-      children: [\r\n-        Padding(\r\n-          padding: const EdgeInsets.all(16.0),\r\n-          child: Row(\r\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-            children: [\r\n-              const Text(\r\n-                'Phases',\r\n-                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n-              ),\r\n-              ElevatedButton.icon(\r\n-                onPressed: _addPhase,\r\n-                icon: const Icon(Icons.add, size: 20),\r\n-                label: const Text('Ajouter une phase'),\r\n-                style: ElevatedButton.styleFrom(\r\n-                  backgroundColor: const Color(0xFFE27D60),\r\n-                  foregroundColor: Colors.white,\r\n-                  shape: RoundedRectangleBorder(\r\n-                    borderRadius: BorderRadius.circular(20),\r\n-                  ),\r\n-                ),\r\n-              ),\r\n-            ],\r\n-          ),\r\n-        ),\r\n-        Expanded(\r\n-          child: phases.isEmpty\r\n-              ? const Center(child: Text('Aucune phase disponible pour ce projet.'))\r\n-              : ListView.builder(\r\n-                  itemCount: phases.length,\r\n-                  itemBuilder: (context, index) {\r\n-                    final phase = phases[index];\r\n-                    return Card(\r\n-                      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n-                      child: Padding(\r\n-                        padding: const EdgeInsets.all(12.0),\r\n-                        child: Column(\r\n-                          crossAxisAlignment: CrossAxisAlignment.start,\r\n-                          children: [\r\n-                            Row(\r\n-                              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-                              children: [\r\n-                                Text(\r\n-                                  phase['name'] ?? 'Phase sans nom',\r\n-                                  style: const TextStyle(\r\n-                                    fontWeight: FontWeight.bold,\r\n-                                    fontSize: 16,\r\n-                                  ),\r\n-                                ),\r\n-                                Row(\r\n-                                  children: [\r\n-                                    IconButton(\r\n-                                      icon: const Icon(Icons.edit, size: 20),\r\n-                                      onPressed: () => _editPhase(phase),\r\n-                                    ),\r\n-                                    IconButton(\r\n-                                      icon: const Icon(Icons.delete, size: 20, color: Colors.red),\r\n-                                      onPressed: () => _deletePhase(phase),\r\n-                                    ),\r\n-                                  ],\r\n-                                ),\r\n-                              ],\r\n-                            ),\r\n-                            const SizedBox(height: 8),\r\n-                            Text(phase['description'] ?? 'Pas de description'),\r\n-                            const SizedBox(height: 8),\r\n-                            Row(\r\n-                              children: [\r\n-                                const Icon(Icons.calendar_today, size: 16),\r\n-                                const SizedBox(width: 4),\r\n-                                Text('${phase['startDate']} - ${phase['endDate']}'),\r\n-                              ],\r\n-                            ),\r\n-                            const SizedBox(height: 8),\r\n-                            Row(\r\n-                              children: [\r\n-                                const Icon(Icons.checklist, size: 16),\r\n-                                const SizedBox(width: 4),\r\n-                                Text('${phase['tasks']?.length ?? 0} tâches'),\r\n-                              ],\r\n-                            ),\r\n-                            const SizedBox(height: 8),\r\n-                            if (phase['members'] != null && phase['members'].isNotEmpty)\r\n-                              Column(\r\n-                                crossAxisAlignment: CrossAxisAlignment.start,\r\n-                                children: [\r\n-                                  const Text(\r\n-                                    'Membres:',\r\n-                                    style: TextStyle(fontWeight: FontWeight.bold),\r\n-                                  ),\r\n-                                  const SizedBox(height: 4),\r\n-                                  Wrap(\r\n-                                    spacing: 8,\r\n-                                    children: [\r\n-                                      for (var member in phase['members'])\r\n-                                        Chip(\r\n-                                          avatar: CircleAvatar(\r\n-                                            backgroundImage: AssetImage(member['image']),\r\n-                                            radius: 12,\r\n-                                          ),\r\n-                                          label: Text(member['name']),\r\n-                                          backgroundColor: Colors.grey[200],\r\n-                                          visualDensity: VisualDensity.compact,\r\n-                                        ),\r\n-                                    ],\r\n-                                  ),\r\n-                                ],\r\n-                              ),\r\n-                          ],\r\n-                        ),\r\n-                      ),\r\n-                    );\r\n-                  },\r\n-                ),\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  void _addPhase() {\r\n-    showDialog(\r\n-      context: context,\r\n-      builder: (context) => AlertDialog(\r\n-        title: const Text('Nouvelle Phase'),\r\n-        content: SingleChildScrollView(\r\n-          child: Column(\r\n-            mainAxisSize: MainAxisSize.min,\r\n-            children: [\r\n-              TextField(\r\n-                decoration: const InputDecoration(\r\n-                  labelText: 'Nom de la phase',\r\n-                  border: OutlineInputBorder(),\r\n-                ),\r\n-                onChanged: (value) {},\r\n-              ),\r\n-              const SizedBox(height: 16),\r\n-              TextField(\r\n-                decoration: const InputDecoration(\r\n-                  labelText: 'Description',\r\n-                  border: OutlineInputBorder(),\r\n-                ),\r\n-                maxLines: 3,\r\n-                onChanged: (value) {},\r\n-              ),\r\n-              const SizedBox(height: 16),\r\n-              Row(\r\n-                children: [\r\n-                  Expanded(\r\n-                    child: TextField(\r\n-                      decoration: const InputDecoration(\r\n-                        labelText: 'Date début',\r\n-                        border: OutlineInputBorder(),\r\n-                      ),\r\n-                      onTap: () async {\r\n-                        final date = await showDatePicker(\r\n-                          context: context,\r\n-                          initialDate: DateTime.now(),\r\n-                          firstDate: DateTime(2000),\r\n-                          lastDate: DateTime(2100),\r\n-                        );\r\n-                        if (date != null) {\r\n-                          // Mettre à jour la date\r\n-                        }\r\n-                      },\r\n-                    ),\r\n-                  ),\r\n-                  const SizedBox(width: 16),\r\n-                  Expanded(\r\n-                    child: TextField(\r\n-                      decoration: const InputDecoration(\r\n-                        labelText: 'Date fin',\r\n-                        border: OutlineInputBorder(),\r\n-                      ),\r\n-                      onTap: () async {\r\n-                        final date = await showDatePicker(\r\n-                          context: context,\r\n-                          initialDate: DateTime.now(),\r\n-                          firstDate: DateTime(2000),\r\n-                          lastDate: DateTime(2100),\r\n-                        );\r\n-                        if (date != null) {\r\n-                          // Mettre à jour la date\r\n-                        }\r\n-                      },\r\n-                    ),\r\n-                  ),\r\n-                ],\r\n-              ),\r\n-            ],\r\n-          ),\r\n-        ),\r\n-        actions: [\r\n-          TextButton(\r\n-            onPressed: () => Navigator.pop(context),\r\n-            child: const Text('Annuler'),\r\n-          ),\r\n-          ElevatedButton(\r\n-            onPressed: () {\r\n-              // Ajouter la nouvelle phase\r\n-              setState(() {\r\n-                widget.project['phases'].add({\r\n-                  'name': 'Nouvelle Phase',\r\n-                  'description': 'Description de la nouvelle phase',\r\n-                  'startDate': '01/01/2025',\r\n-                  'endDate': '31/12/2025',\r\n-                  'tasks': [],\r\n-                  'members': [],\r\n-                });\r\n-              });\r\n-              Navigator.pop(context);\r\n-            },\r\n-            style: ElevatedButton.styleFrom(\r\n-              backgroundColor: const Color(0xFFE27D60),\r\n-            ),\r\n-            child: const Text('Ajouter'),\r\n-          ),\r\n-        ],\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  void _editPhase(Map<String, dynamic> phase) {\r\n-    final controller = TextEditingController(text: phase['name']);\r\n-\r\n-    showDialog(\r\n-      context: context,\r\n-      builder: (context) => AlertDialog(\r\n-        title: const Text('Modifier la phase'),\r\n-        content: TextField(\r\n-          controller: controller,\r\n-          decoration: const InputDecoration(\r\n-            labelText: 'Nom de la phase',\r\n-            border: OutlineInputBorder(),\r\n-          ),\r\n-        ),\r\n-        actions: [\r\n-          TextButton(\r\n-            onPressed: () => Navigator.pop(context),\r\n-            child: const Text('Annuler'),\r\n-          ),\r\n-          ElevatedButton(\r\n-            onPressed: () {\r\n-              setState(() {\r\n-                phase['name'] = controller.text;\r\n-              });\r\n-              Navigator.pop(context);\r\n-            },\r\n-            style: ElevatedButton.styleFrom(\r\n-              backgroundColor: const Color(0xFFE27D60),\r\n-            ),\r\n-            child: const Text('Enregistrer'),\r\n-          ),\r\n-        ],\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  void _deletePhase(Map<String, dynamic> phase) {\r\n-    showDialog(\r\n-      context: context,\r\n-      builder: (context) => AlertDialog(\r\n-        title: const Text('Supprimer la phase'),\r\n-        content: Text('Voulez-vous vraiment supprimer \"${phase['name']}\" ?'),\r\n-        actions: [\r\n-          TextButton(\r\n-            onPressed: () => Navigator.pop(context),\r\n-            child: const Text('Annuler'),\r\n-          ),\r\n-          ElevatedButton(\r\n-            onPressed: () {\r\n-              setState(() {\r\n-                widget.project['phases'].remove(phase);\r\n-              });\r\n-              Navigator.pop(context);\r\n-            },\r\n-            style: ElevatedButton.styleFrom(\r\n-              backgroundColor: Colors.red,\r\n-            ),\r\n-            child: const Text('Supprimer'),\r\n-          ),\r\n-        ],\r\n-      ),\r\n-    );\r\n-  }}\n\\ No newline at end of file\n+    final\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744668844168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n                   ),\r\n                   const SizedBox(height: 16),\r\n                   _buildDetailRow('Nom', widget.project['name']),\r\n                   _buildDetailRow('Description', widget.project['description'] ?? 'Pas de description'),\r\n-                  _buildDetailRow('Date de création', widget.project['createdAt']),\r\n+                  _buildDetailRow('Date de création:', widget.project['createdAt']),\r\n                   const SizedBox(height: 16),\r\n                   ElevatedButton(\r\n                     onPressed: () {},\r\n                     style: ElevatedButton.styleFrom(\r\n@@ -165,5 +165,291 @@\n     );\r\n   }\r\n \r\n   Widget _buildPhasesTab() {\r\n-    final\n\\ No newline at end of file\n+    final phases = widget.project['phases'] ?? [];\r\n+    \r\n+    return Column(\r\n+      children: [\r\n+        Padding(\r\n+          padding: const EdgeInsets.all(16.0),\r\n+          child: Row(\r\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+            children: [\r\n+              const Text(\r\n+                'Phases',\r\n+                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n+              ),\r\n+              ElevatedButton.icon(\r\n+                onPressed: _addPhase,\r\n+                icon: const Icon(Icons.add, size: 20),\r\n+                label: const Text('Ajouter une phase'),\r\n+                style: ElevatedButton.styleFrom(\r\n+                  backgroundColor: const Color(0xFFE27D60),\r\n+                  foregroundColor: Colors.white,\r\n+                  shape: RoundedRectangleBorder(\r\n+                    borderRadius: BorderRadius.circular(20),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+            ],\r\n+          ),\r\n+        ),\r\n+        Expanded(\r\n+          child: phases.isEmpty\r\n+              ? const Center(child: Text('Aucune phase disponible pour ce projet.'))\r\n+              : ListView.builder(\r\n+                  itemCount: phases.length,\r\n+                  itemBuilder: (context, index) {\r\n+                    final phase = phases[index];\r\n+                    return Card(\r\n+                      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n+                      child: Padding(\r\n+                        padding: const EdgeInsets.all(12.0),\r\n+                        child: Column(\r\n+                          crossAxisAlignment: CrossAxisAlignment.start,\r\n+                          children: [\r\n+                            Row(\r\n+                              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+                              children: [\r\n+                                Text(\r\n+                                  phase['name'] ?? 'Phase sans nom',\r\n+                                  style: const TextStyle(\r\n+                                    fontWeight: FontWeight.bold,\r\n+                                    fontSize: 16,\r\n+                                  ),\r\n+                                ),\r\n+                                Row(\r\n+                                  children: [\r\n+                                    IconButton(\r\n+                                      icon: const Icon(Icons.edit, size: 20),\r\n+                                      onPressed: () => _editPhase(phase),\r\n+                                    ),\r\n+                                    IconButton(\r\n+                                      icon: const Icon(Icons.delete, size: 20, color: Colors.red),\r\n+                                      onPressed: () => _deletePhase(phase),\r\n+                                    ),\r\n+                                  ],\r\n+                                ),\r\n+                              ],\r\n+                            ),\r\n+                            const SizedBox(height: 8),\r\n+                            Text(phase['description'] ?? 'Pas de description'),\r\n+                            const SizedBox(height: 8),\r\n+                            Row(\r\n+                              children: [\r\n+                                const Icon(Icons.calendar_today, size: 16),\r\n+                                const SizedBox(width: 4),\r\n+                                Text('${phase['startDate']} - ${phase['endDate']}'),\r\n+                              ],\r\n+                            ),\r\n+                            const SizedBox(height: 8),\r\n+                            Row(\r\n+                              children: [\r\n+                                const Icon(Icons.checklist, size: 16),\r\n+                                const SizedBox(width: 4),\r\n+                                Text('${phase['tasks']?.length ?? 0} tâches'),\r\n+                              ],\r\n+                            ),\r\n+                            const SizedBox(height: 8),\r\n+                            if (phase['members'] != null && phase['members'].isNotEmpty)\r\n+                              Column(\r\n+                                crossAxisAlignment: CrossAxisAlignment.start,\r\n+                                children: [\r\n+                                  const Text(\r\n+                                    'Membres:',\r\n+                                    style: TextStyle(fontWeight: FontWeight.bold),\r\n+                                  ),\r\n+                                  const SizedBox(height: 4),\r\n+                                  Wrap(\r\n+                                    spacing: 8,\r\n+                                    children: [\r\n+                                      for (var member in phase['members'])\r\n+                                        Chip(\r\n+                                          avatar: CircleAvatar(\r\n+                                            backgroundImage: AssetImage(member['image']),\r\n+                                            radius: 12,\r\n+                                          ),\r\n+                                          label: Text(member['name']),\r\n+                                          backgroundColor: Colors.grey[200],\r\n+                                          visualDensity: VisualDensity.compact,\r\n+                                        ),\r\n+                                    ],\r\n+                                  ),\r\n+                                ],\r\n+                              ),\r\n+                          ],\r\n+                        ),\r\n+                      ),\r\n+                    );\r\n+                  },\r\n+                ),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  void _addPhase() {\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => AlertDialog(\r\n+        title: const Text('Nouvelle Phase'),\r\n+        content: SingleChildScrollView(\r\n+          child: Column(\r\n+            mainAxisSize: MainAxisSize.min,\r\n+            children: [\r\n+              TextField(\r\n+                decoration: const InputDecoration(\r\n+                  labelText: 'Nom de la phase',\r\n+                  border: OutlineInputBorder(),\r\n+                ),\r\n+                onChanged: (value) {},\r\n+              ),\r\n+              const SizedBox(height: 16),\r\n+              TextField(\r\n+                decoration: const InputDecoration(\r\n+                  labelText: 'Description',\r\n+                  border: OutlineInputBorder(),\r\n+                ),\r\n+                maxLines: 3,\r\n+                onChanged: (value) {},\r\n+              ),\r\n+              const SizedBox(height: 16),\r\n+              Row(\r\n+                children: [\r\n+                  Expanded(\r\n+                    child: TextField(\r\n+                      decoration: const InputDecoration(\r\n+                        labelText: 'Date début',\r\n+                        border: OutlineInputBorder(),\r\n+                      ),\r\n+                      onTap: () async {\r\n+                        final date = await showDatePicker(\r\n+                          context: context,\r\n+                          initialDate: DateTime.now(),\r\n+                          firstDate: DateTime(2000),\r\n+                          lastDate: DateTime(2100),\r\n+                        );\r\n+                        if (date != null) {\r\n+                          // Mettre à jour la date\r\n+                        }\r\n+                      },\r\n+                    ),\r\n+                  ),\r\n+                  const SizedBox(width: 16),\r\n+                  Expanded(\r\n+                    child: TextField(\r\n+                      decoration: const InputDecoration(\r\n+                        labelText: 'Date fin',\r\n+                        border: OutlineInputBorder(),\r\n+                      ),\r\n+                      onTap: () async {\r\n+                        final date = await showDatePicker(\r\n+                          context: context,\r\n+                          initialDate: DateTime.now(),\r\n+                          firstDate: DateTime(2000),\r\n+                          lastDate: DateTime(2100),\r\n+                        );\r\n+                        if (date != null) {\r\n+                          // Mettre à jour la date\r\n+                        }\r\n+                      },\r\n+                    ),\r\n+                  ),\r\n+                ],\r\n+              ),\r\n+            ],\r\n+          ),\r\n+        ),\r\n+        actions: [\r\n+          TextButton(\r\n+            onPressed: () => Navigator.pop(context),\r\n+            child: const Text('Annuler'),\r\n+          ),\r\n+          ElevatedButton(\r\n+            onPressed: () {\r\n+              // Ajouter la nouvelle phase\r\n+              setState(() {\r\n+                widget.project['phases'].add({\r\n+                  'name': 'Nouvelle Phase',\r\n+                  'description': 'Description de la nouvelle phase',\r\n+                  'startDate': '01/01/2025',\r\n+                  'endDate': '31/12/2025',\r\n+                  'tasks': [],\r\n+                  'members': [],\r\n+                });\r\n+              });\r\n+              Navigator.pop(context);\r\n+            },\r\n+            style: ElevatedButton.styleFrom(\r\n+              backgroundColor: const Color(0xFFE27D60),\r\n+            ),\r\n+            child: const Text('Ajouter'),\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  void _editPhase(Map<String, dynamic> phase) {\r\n+    final controller = TextEditingController(text: phase['name']);\r\n+\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => AlertDialog(\r\n+        title: const Text('Modifier la phase'),\r\n+        content: TextField(\r\n+          controller: controller,\r\n+          decoration: const InputDecoration(\r\n+            labelText: 'Nom de la phase',\r\n+            border: OutlineInputBorder(),\r\n+          ),\r\n+        ),\r\n+        actions: [\r\n+          TextButton(\r\n+            onPressed: () => Navigator.pop(context),\r\n+            child: const Text('Annuler'),\r\n+          ),\r\n+          ElevatedButton(\r\n+            onPressed: () {\r\n+              setState(() {\r\n+                phase['name'] = controller.text;\r\n+              });\r\n+              Navigator.pop(context);\r\n+            },\r\n+            style: ElevatedButton.styleFrom(\r\n+              backgroundColor: const Color(0xFFE27D60),\r\n+            ),\r\n+            child: const Text('Enregistrer'),\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  void _deletePhase(Map<String, dynamic> phase) {\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => AlertDialog(\r\n+        title: const Text('Supprimer la phase'),\r\n+        content: Text('Voulez-vous vraiment supprimer \"${phase['name']}\" ?'),\r\n+        actions: [\r\n+          TextButton(\r\n+            onPressed: () => Navigator.pop(context),\r\n+            child: const Text('Annuler'),\r\n+          ),\r\n+          ElevatedButton(\r\n+            onPressed: () {\r\n+              setState(() {\r\n+                widget.project['phases'].remove(phase);\r\n+              });\r\n+              Navigator.pop(context);\r\n+            },\r\n+            style: ElevatedButton.styleFrom(\r\n+              backgroundColor: Colors.red,\r\n+            ),\r\n+            child: const Text('Supprimer'),\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744668854360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n                     style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n                   ),\r\n                   const SizedBox(height: 16),\r\n                   _buildDetailRow('Nom', widget.project['name']),\r\n-                  _buildDetailRow('Description', widget.project['description'] ?? 'Pas de description'),\r\n+                  _buildDetailRow('Description:', widget.project['description'] ?? 'Pas de description'),\r\n                   _buildDetailRow('Date de création:', widget.project['createdAt']),\r\n                   const SizedBox(height: 16),\r\n                   ElevatedButton(\r\n                     onPressed: () {},\r\n"
                },
                {
                    "date": 1744668921197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,10 +58,10 @@\n                     style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n                   ),\r\n                   const SizedBox(height: 16),\r\n                   _buildDetailRow('Nom', widget.project['name']),\r\n-                  _buildDetailRow('Description:', widget.project['description'] ?? 'Pas de description'),\r\n-                  _buildDetailRow('Date de création:', widget.project['createdAt']),\r\n+                  _buildDetailRow('Description', widget.project['description'] ?? 'Pas de description'),\r\n+                  _buildDetailRow('Date de création', widget.project['createdAt']),\r\n                   const SizedBox(height: 16),\r\n                   ElevatedButton(\r\n                     onPressed: () {},\r\n                     style: ElevatedButton.styleFrom(\r\n"
                },
                {
                    "date": 1744669095914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,9 +165,11 @@\n     );\r\n   }\r\n \r\n   Widget _buildPhasesTab() {\r\n-    final phases = widget.project['phases'] ?? [];\r\n+    final List<dynamic> phases = widget.project['phases'] is List \r\n+        ? widget.project['phases'] \r\n+        : [];\r\n     \r\n     return Column(\r\n       children: [\r\n         Padding(\r\n"
                },
                {
                    "date": 1744669103086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,11 +165,9 @@\n     );\r\n   }\r\n \r\n   Widget _buildPhasesTab() {\r\n-    final List<dynamic> phases = widget.project['phases'] is List \r\n-        ? widget.project['phases'] \r\n-        : [];\r\n+    final List<dynamic> phases = widget.project['phases'] is List ? widget.project['phases'] : [];\r\n     \r\n     return Column(\r\n       children: [\r\n         Padding(\r\n"
                },
                {
                    "date": 1744669126429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n \r\n   Widget _buildPhasesTab() {\r\n     final List<dynamic> phases = widget.project['phases'] is List ? widget.project['phases'] : [];\r\n     \r\n-    return Column(\r\n+   return Column(\r\n       children: [\r\n         Padding(\r\n           padding: const EdgeInsets.all(16.0),\r\n           child: Row(\r\n@@ -199,9 +199,19 @@\n               ? const Center(child: Text('Aucune phase disponible pour ce projet.'))\r\n               : ListView.builder(\r\n                   itemCount: phases.length,\r\n                   itemBuilder: (context, index) {\r\n-                    final phase = phases[index];\r\n+                    // Safely access the phase data\r\n+                    final phase = phases[index] is Map ? phases[index] as Map<String, dynamic> : {};\r\n+                    \r\n+                    // Safely get all values with defaults\r\n+                    final name = phase['name']?.toString() ?? 'Phase sans nom';\r\n+                    final description = phase['description']?.toString() ?? 'Pas de description';\r\n+                    final startDate = phase['startDate']?.toString() ?? 'Date inconnue';\r\n+                    final endDate = phase['endDate']?.toString() ?? 'Date inconnue';\r\n+                    final tasks = phase['tasks'] is List ? phase['tasks'] : [];\r\n+                    final members = phase['members'] is List ? phase['members'] : [];\r\n+\r\n                     return Card(\r\n                       margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n                       child: Padding(\r\n                         padding: const EdgeInsets.all(12.0),\r\n@@ -211,9 +221,9 @@\n                             Row(\r\n                               mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n                               children: [\r\n                                 Text(\r\n-                                  phase['name'] ?? 'Phase sans nom',\r\n+                                  name,\r\n                                   style: const TextStyle(\r\n                                     fontWeight: FontWeight.bold,\r\n                                     fontSize: 16,\r\n                                   ),\r\n@@ -232,27 +242,27 @@\n                                 ),\r\n                               ],\r\n                             ),\r\n                             const SizedBox(height: 8),\r\n-                            Text(phase['description'] ?? 'Pas de description'),\r\n+                            Text(description),\r\n                             const SizedBox(height: 8),\r\n                             Row(\r\n                               children: [\r\n                                 const Icon(Icons.calendar_today, size: 16),\r\n                                 const SizedBox(width: 4),\r\n-                                Text('${phase['startDate']} - ${phase['endDate']}'),\r\n+                                Text('$startDate - $endDate'),\r\n                               ],\r\n                             ),\r\n                             const SizedBox(height: 8),\r\n                             Row(\r\n                               children: [\r\n                                 const Icon(Icons.checklist, size: 16),\r\n                                 const SizedBox(width: 4),\r\n-                                Text('${phase['tasks']?.length ?? 0} tâches'),\r\n+                                Text('${tasks.length} tâches'),\r\n                               ],\r\n                             ),\r\n                             const SizedBox(height: 8),\r\n-                            if (phase['members'] != null && phase['members'].isNotEmpty)\r\n+                            if (members.isNotEmpty)\r\n                               Column(\r\n                                 crossAxisAlignment: CrossAxisAlignment.start,\r\n                                 children: [\r\n                                   const Text(\r\n@@ -262,15 +272,23 @@\n                                   const SizedBox(height: 4),\r\n                                   Wrap(\r\n                                     spacing: 8,\r\n                                     children: [\r\n-                                      for (var member in phase['members'])\r\n+                                      for (var member in members)\r\n+                                        if (member is Map)\r\n                                         Chip(\r\n                                           avatar: CircleAvatar(\r\n-                                            backgroundImage: AssetImage(member['image']),\r\n+                                            backgroundImage: member['image'] != null \r\n+                                                ? AssetImage(member['image'].toString())\r\n+                                                : null,\r\n                                             radius: 12,\r\n+                                            child: member['image'] == null \r\n+                                                ? Text(member['name']?.toString().isNotEmpty == true \r\n+                                                    ? member['name'].toString().substring(0, 1)\r\n+                                                    : '?')\r\n+                                                : null,\r\n                                           ),\r\n-                                          label: Text(member['name']),\r\n+                                          label: Text(member['name']?.toString() ?? 'Membre'),\r\n                                           backgroundColor: Colors.grey[200],\r\n                                           visualDensity: VisualDensity.compact,\r\n                                         ),\r\n                                     ],\r\n@@ -286,8 +304,9 @@\n         ),\r\n       ],\r\n     );\r\n   }\r\n+Key improvements made:\r\n \r\n   void _addPhase() {\r\n     showDialog(\r\n       context: context,\r\n"
                },
                {
                    "date": 1744669135665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n \r\n   Widget _buildPhasesTab() {\r\n     final List<dynamic> phases = widget.project['phases'] is List ? widget.project['phases'] : [];\r\n     \r\n-   return Column(\r\n+    return Column(\r\n       children: [\r\n         Padding(\r\n           padding: const EdgeInsets.all(16.0),\r\n           child: Row(\r\n@@ -199,19 +199,9 @@\n               ? const Center(child: Text('Aucune phase disponible pour ce projet.'))\r\n               : ListView.builder(\r\n                   itemCount: phases.length,\r\n                   itemBuilder: (context, index) {\r\n-                    // Safely access the phase data\r\n-                    final phase = phases[index] is Map ? phases[index] as Map<String, dynamic> : {};\r\n-                    \r\n-                    // Safely get all values with defaults\r\n-                    final name = phase['name']?.toString() ?? 'Phase sans nom';\r\n-                    final description = phase['description']?.toString() ?? 'Pas de description';\r\n-                    final startDate = phase['startDate']?.toString() ?? 'Date inconnue';\r\n-                    final endDate = phase['endDate']?.toString() ?? 'Date inconnue';\r\n-                    final tasks = phase['tasks'] is List ? phase['tasks'] : [];\r\n-                    final members = phase['members'] is List ? phase['members'] : [];\r\n-\r\n+                    final phase = phases[index];\r\n                     return Card(\r\n                       margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n                       child: Padding(\r\n                         padding: const EdgeInsets.all(12.0),\r\n@@ -221,9 +211,9 @@\n                             Row(\r\n                               mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n                               children: [\r\n                                 Text(\r\n-                                  name,\r\n+                                  phase['name'] ?? 'Phase sans nom',\r\n                                   style: const TextStyle(\r\n                                     fontWeight: FontWeight.bold,\r\n                                     fontSize: 16,\r\n                                   ),\r\n@@ -242,27 +232,27 @@\n                                 ),\r\n                               ],\r\n                             ),\r\n                             const SizedBox(height: 8),\r\n-                            Text(description),\r\n+                            Text(phase['description'] ?? 'Pas de description'),\r\n                             const SizedBox(height: 8),\r\n                             Row(\r\n                               children: [\r\n                                 const Icon(Icons.calendar_today, size: 16),\r\n                                 const SizedBox(width: 4),\r\n-                                Text('$startDate - $endDate'),\r\n+                                Text('${phase['startDate']} - ${phase['endDate']}'),\r\n                               ],\r\n                             ),\r\n                             const SizedBox(height: 8),\r\n                             Row(\r\n                               children: [\r\n                                 const Icon(Icons.checklist, size: 16),\r\n                                 const SizedBox(width: 4),\r\n-                                Text('${tasks.length} tâches'),\r\n+                                Text('${phase['tasks']?.length ?? 0} tâches'),\r\n                               ],\r\n                             ),\r\n                             const SizedBox(height: 8),\r\n-                            if (members.isNotEmpty)\r\n+                            if (phase['members'] != null && phase['members'].isNotEmpty)\r\n                               Column(\r\n                                 crossAxisAlignment: CrossAxisAlignment.start,\r\n                                 children: [\r\n                                   const Text(\r\n@@ -272,23 +262,15 @@\n                                   const SizedBox(height: 4),\r\n                                   Wrap(\r\n                                     spacing: 8,\r\n                                     children: [\r\n-                                      for (var member in members)\r\n-                                        if (member is Map)\r\n+                                      for (var member in phase['members'])\r\n                                         Chip(\r\n                                           avatar: CircleAvatar(\r\n-                                            backgroundImage: member['image'] != null \r\n-                                                ? AssetImage(member['image'].toString())\r\n-                                                : null,\r\n+                                            backgroundImage: AssetImage(member['image']),\r\n                                             radius: 12,\r\n-                                            child: member['image'] == null \r\n-                                                ? Text(member['name']?.toString().isNotEmpty == true \r\n-                                                    ? member['name'].toString().substring(0, 1)\r\n-                                                    : '?')\r\n-                                                : null,\r\n                                           ),\r\n-                                          label: Text(member['name']?.toString() ?? 'Membre'),\r\n+                                          label: Text(member['name']),\r\n                                           backgroundColor: Colors.grey[200],\r\n                                           visualDensity: VisualDensity.compact,\r\n                                         ),\r\n                                     ],\r\n@@ -304,9 +286,8 @@\n         ),\r\n       ],\r\n     );\r\n   }\r\n-Key improvements made:\r\n \r\n   void _addPhase() {\r\n     showDialog(\r\n       context: context,\r\n"
                },
                {
                    "date": 1744669149214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,131 +164,9 @@\n       ),\r\n     );\r\n   }\r\n \r\n-  Widget _buildPhasesTab() {\r\n-    final List<dynamic> phases = widget.project['phases'] is List ? widget.project['phases'] : [];\r\n-    \r\n-    return Column(\r\n-      children: [\r\n-        Padding(\r\n-          padding: const EdgeInsets.all(16.0),\r\n-          child: Row(\r\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-            children: [\r\n-              const Text(\r\n-                'Phases',\r\n-                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n-              ),\r\n-              ElevatedButton.icon(\r\n-                onPressed: _addPhase,\r\n-                icon: const Icon(Icons.add, size: 20),\r\n-                label: const Text('Ajouter une phase'),\r\n-                style: ElevatedButton.styleFrom(\r\n-                  backgroundColor: const Color(0xFFE27D60),\r\n-                  foregroundColor: Colors.white,\r\n-                  shape: RoundedRectangleBorder(\r\n-                    borderRadius: BorderRadius.circular(20),\r\n-                  ),\r\n-                ),\r\n-              ),\r\n-            ],\r\n-          ),\r\n-        ),\r\n-        Expanded(\r\n-          child: phases.isEmpty\r\n-              ? const Center(child: Text('Aucune phase disponible pour ce projet.'))\r\n-              : ListView.builder(\r\n-                  itemCount: phases.length,\r\n-                  itemBuilder: (context, index) {\r\n-                    final phase = phases[index];\r\n-                    return Card(\r\n-                      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n-                      child: Padding(\r\n-                        padding: const EdgeInsets.all(12.0),\r\n-                        child: Column(\r\n-                          crossAxisAlignment: CrossAxisAlignment.start,\r\n-                          children: [\r\n-                            Row(\r\n-                              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-                              children: [\r\n-                                Text(\r\n-                                  phase['name'] ?? 'Phase sans nom',\r\n-                                  style: const TextStyle(\r\n-                                    fontWeight: FontWeight.bold,\r\n-                                    fontSize: 16,\r\n-                                  ),\r\n-                                ),\r\n-                                Row(\r\n-                                  children: [\r\n-                                    IconButton(\r\n-                                      icon: const Icon(Icons.edit, size: 20),\r\n-                                      onPressed: () => _editPhase(phase),\r\n-                                    ),\r\n-                                    IconButton(\r\n-                                      icon: const Icon(Icons.delete, size: 20, color: Colors.red),\r\n-                                      onPressed: () => _deletePhase(phase),\r\n-                                    ),\r\n-                                  ],\r\n-                                ),\r\n-                              ],\r\n-                            ),\r\n-                            const SizedBox(height: 8),\r\n-                            Text(phase['description'] ?? 'Pas de description'),\r\n-                            const SizedBox(height: 8),\r\n-                            Row(\r\n-                              children: [\r\n-                                const Icon(Icons.calendar_today, size: 16),\r\n-                                const SizedBox(width: 4),\r\n-                                Text('${phase['startDate']} - ${phase['endDate']}'),\r\n-                              ],\r\n-                            ),\r\n-                            const SizedBox(height: 8),\r\n-                            Row(\r\n-                              children: [\r\n-                                const Icon(Icons.checklist, size: 16),\r\n-                                const SizedBox(width: 4),\r\n-                                Text('${phase['tasks']?.length ?? 0} tâches'),\r\n-                              ],\r\n-                            ),\r\n-                            const SizedBox(height: 8),\r\n-                            if (phase['members'] != null && phase['members'].isNotEmpty)\r\n-                              Column(\r\n-                                crossAxisAlignment: CrossAxisAlignment.start,\r\n-                                children: [\r\n-                                  const Text(\r\n-                                    'Membres:',\r\n-                                    style: TextStyle(fontWeight: FontWeight.bold),\r\n-                                  ),\r\n-                                  const SizedBox(height: 4),\r\n-                                  Wrap(\r\n-                                    spacing: 8,\r\n-                                    children: [\r\n-                                      for (var member in phase['members'])\r\n-                                        Chip(\r\n-                                          avatar: CircleAvatar(\r\n-                                            backgroundImage: AssetImage(member['image']),\r\n-                                            radius: 12,\r\n-                                          ),\r\n-                                          label: Text(member['name']),\r\n-                                          backgroundColor: Colors.grey[200],\r\n-                                          visualDensity: VisualDensity.compact,\r\n-                                        ),\r\n-                                    ],\r\n-                                  ),\r\n-                                ],\r\n-                              ),\r\n-                          ],\r\n-                        ),\r\n-                      ),\r\n-                    );\r\n-                  },\r\n-                ),\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n+ \r\n   void _addPhase() {\r\n     showDialog(\r\n       context: context,\r\n       builder: (context) => AlertDialog(\r\n"
                },
                {
                    "date": 1744669361555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,11 +163,153 @@\n         ],\r\n       ),\r\n     );\r\n   }\r\n+Widget _buildPhasesTab() {\r\n+    // Ensure phases is a List<Map<String, dynamic>> and not null\r\n+    final List<Map<String, dynamic>> phases = widget.project['phases'] is List \r\n+        ? List<Map<String, dynamic>>.from(widget.project['phases'].map((item) => \r\n+            item is Map ? Map<String, dynamic>.from(item) : <String, dynamic>{})\r\n+        : <Map<String, dynamic>>[];\r\n \r\n- \r\n-  void _addPhase() {\r\n+    return Column(\r\n+      children: [\r\n+        Padding(\r\n+          padding: const EdgeInsets.all(16.0),\r\n+          child: Row(\r\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+            children: [\r\n+              const Text(\r\n+                'Phases',\r\n+                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n+              ),\r\n+              ElevatedButton.icon(\r\n+                onPressed: _addPhase,\r\n+                icon: const Icon(Icons.add, size: 20),\r\n+                label: const Text('Ajouter une phase'),\r\n+                style: ElevatedButton.styleFrom(\r\n+                  backgroundColor: const Color(0xFFE27D60),\r\n+                  foregroundColor: Colors.white,\r\n+                  shape: RoundedRectangleBorder(\r\n+                    borderRadius: BorderRadius.circular(20),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+            ],\r\n+          ),\r\n+        ),\r\n+        Expanded(\r\n+          child: phases.isEmpty\r\n+              ? const Center(child: Text('Aucune phase disponible pour ce projet.'))\r\n+              : ListView.builder(\r\n+                  itemCount: phases.length,\r\n+                  itemBuilder: (context, index) {\r\n+                    final phase = phases[index];\r\n+                    \r\n+                    // Safely get all values with defaults\r\n+                    final name = phase['name']?.toString() ?? 'Phase sans nom';\r\n+                    final description = phase['description']?.toString() ?? 'Pas de description';\r\n+                    final startDate = phase['startDate']?.toString() ?? 'Date inconnue';\r\n+                    final endDate = phase['endDate']?.toString() ?? 'Date inconnue';\r\n+                    final tasks = phase['tasks'] is List ? phase['tasks'] as List : [];\r\n+                    final members = phase['members'] is List \r\n+                        ? List<Map<String, dynamic>>.from(phase['members'].map((m) => \r\n+                            m is Map ? Map<String, dynamic>.from(m) : <String, dynamic>{}))\r\n+                        : <Map<String, dynamic>>[];\r\n+\r\n+                    return Card(\r\n+                      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n+                      child: Padding(\r\n+                        padding: const EdgeInsets.all(12.0),\r\n+                        child: Column(\r\n+                          crossAxisAlignment: CrossAxisAlignment.start,\r\n+                          children: [\r\n+                            Row(\r\n+                              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+                              children: [\r\n+                                Text(\r\n+                                  name,\r\n+                                  style: const TextStyle(\r\n+                                    fontWeight: FontWeight.bold,\r\n+                                    fontSize: 16,\r\n+                                  ),\r\n+                                ),\r\n+                                Row(\r\n+                                  children: [\r\n+                                    IconButton(\r\n+                                      icon: const Icon(Icons.edit, size: 20),\r\n+                                      onPressed: () => _editPhase(phase),\r\n+                                    ),\r\n+                                    IconButton(\r\n+                                      icon: const Icon(Icons.delete, size: 20, color: Colors.red),\r\n+                                      onPressed: () => _deletePhase(phase),\r\n+                                    ),\r\n+                                  ],\r\n+                                ),\r\n+                              ],\r\n+                            ),\r\n+                            const SizedBox(height: 8),\r\n+                            Text(description),\r\n+                            const SizedBox(height: 8),\r\n+                            Row(\r\n+                              children: [\r\n+                                const Icon(Icons.calendar_today, size: 16),\r\n+                                const SizedBox(width: 4),\r\n+                                Text('$startDate - $endDate'),\r\n+                              ],\r\n+                            ),\r\n+                            const SizedBox(height: 8),\r\n+                            Row(\r\n+                              children: [\r\n+                                const Icon(Icons.checklist, size: 16),\r\n+                                const SizedBox(width: 4),\r\n+                                Text('${tasks.length} tâches'),\r\n+                              ],\r\n+                            ),\r\n+                            const SizedBox(height: 8),\r\n+                            if (members.isNotEmpty)\r\n+                              Column(\r\n+                                crossAxisAlignment: CrossAxisAlignment.start,\r\n+                                children: [\r\n+                                  const Text(\r\n+                                    'Membres:',\r\n+                                    style: TextStyle(fontWeight: FontWeight.bold),\r\n+                                  ),\r\n+                                  const SizedBox(height: 4),\r\n+                                  Wrap(\r\n+                                    spacing: 8,\r\n+                                    children: [\r\n+                                      for (final member in members)\r\n+                                        Chip(\r\n+                                          avatar: CircleAvatar(\r\n+                                            backgroundImage: member['image'] != null \r\n+                                                ? AssetImage(member['image'].toString())\r\n+                                                : null,\r\n+                                            radius: 12,\r\n+                                            child: member['image'] == null \r\n+                                                ? Text(member['name']?.toString().isNotEmpty == true \r\n+                                                    ? member['name'].toString().substring(0, 1)\r\n+                                                    : '?')\r\n+                                                : null,\r\n+                                          ),\r\n+                                          label: Text(member['name']?.toString() ?? 'Membre'),\r\n+                                          backgroundColor: Colors.grey[200],\r\n+                                          visualDensity: VisualDensity.compact,\r\n+                                        ),\r\n+                                    ],\r\n+                                  ),\r\n+                                ],\r\n+                              ),\r\n+                          ],\r\n+                        ),\r\n+                      ),\r\n+                    );\r\n+                  },\r\n+                ),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  } void _addPhase() {\r\n     showDialog(\r\n       context: context,\r\n       builder: (context) => AlertDialog(\r\n         title: const Text('Nouvelle Phase'),\r\n"
                },
                {
                    "date": 1744669381378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,10 +167,9 @@\n Widget _buildPhasesTab() {\r\n     // Ensure phases is a List<Map<String, dynamic>> and not null\r\n     final List<Map<String, dynamic>> phases = widget.project['phases'] is List \r\n         ? List<Map<String, dynamic>>.from(widget.project['phases'].map((item) => \r\n-            item is Map ? Map<String, dynamic>.from(item) : <String, dynamic>{})\r\n-        : <Map<String, dynamic>>[];\r\n+            item is Map ? Map<String, dynamic>.from(item) : <String, dynamic>{}): <Map<String, dynamic>>[];\r\n \r\n     return Column(\r\n       children: [\r\n         Padding(\r\n@@ -307,9 +306,10 @@\n                 ),\r\n         ),\r\n       ],\r\n     );\r\n-  } void _addPhase() {\r\n+  }\r\n+   void _addPhase() {\r\n     showDialog(\r\n       context: context,\r\n       builder: (context) => AlertDialog(\r\n         title: const Text('Nouvelle Phase'),\r\n"
                },
                {
                    "date": 1744669392881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,10 +166,9 @@\n   }\r\n Widget _buildPhasesTab() {\r\n     // Ensure phases is a List<Map<String, dynamic>> and not null\r\n     final List<Map<String, dynamic>> phases = widget.project['phases'] is List \r\n-        ? List<Map<String, dynamic>>.from(widget.project['phases'].map((item) => \r\n-            item is Map ? Map<String, dynamic>.from(item) : <String, dynamic>{}): <Map<String, dynamic>>[];\r\n+        ? List<Map<String, dynamic>>.from(widget.project['phases'].map((item) =>  item is Map ? Map<String, dynamic>.from(item) : <String, dynamic>{})): <Map<String, dynamic>>[];\r\n \r\n     return Column(\r\n       children: [\r\n         Padding(\r\n"
                }
            ],
            "date": 1744668186422,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\n\r\nclass ProjectDetailsScreen extends StatefulWidget {\r\n  final Map<String, dynamic> project;\r\n\r\n  const ProjectDetailsScreen({super.key, required this.project});\r\n\r\n  @override\r\n  State<ProjectDetailsScreen> createState() => _ProjectDetailsScreenState();\r\n}\r\n\r\nclass _ProjectDetailsScreenState extends State<ProjectDetailsScreen> {\r\n  String selectedTab = 'details';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return DefaultTabController(\r\n      length: 2,\r\n      child: Scaffold(\r\n        appBar: AppBar(\r\n          title: Text(widget.project['name']),\r\n          bottom: TabBar(\r\n            tabs: const [\r\n              Tab(text: 'Détails'),\r\n              Tab(text: 'Phases'),\r\n            ],\r\n            onTap: (index) {\r\n              setState(() {\r\n                selectedTab = index == 0 ? 'details' : 'phases';\r\n              });\r\n            },\r\n          ),\r\n        ),\r\n        body: TabBarView(\r\n          children: [\r\n            _buildDetailsTab(),\r\n            _buildPhasesTab(),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildDetailsTab() {\r\n    return SingleChildScrollView(\r\n      padding: const EdgeInsets.all(16.0),\r\n      child: Column(\r\n        crossAxisAlignment: CrossAxisAlignment.stretch,\r\n        children: [\r\n          Card(\r\n            child: Padding(\r\n              padding: const EdgeInsets.all(16.0),\r\n              child: Column(\r\n                crossAxisAlignment: CrossAxisAlignment.start,\r\n                children: [\r\n                  const Text(\r\n                    'Détails du projet',\r\n                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n                  ),\r\n                  const SizedBox(height: 16),\r\n                  _buildDetailRow('Nom', widget.project['name']),\r\n                  _buildDetailRow('Description', widget.project['description'] ?? 'Pas de description'),\r\n                  _buildDetailRow('Date de création', widget.project['createdAt']),\r\n                  const SizedBox(height: 16),\r\n                  ElevatedButton(\r\n                    onPressed: () {},\r\n                    style: ElevatedButton.styleFrom(\r\n                      backgroundColor: const Color(0xFFE27D60),\r\n                      shape: RoundedRectangleBorder(\r\n                        borderRadius: BorderRadius.circular(20),\r\n                      ),\r\n                    ),\r\n                    child: const Text('Modifier'),\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n          ),\r\n          const SizedBox(height: 16),\r\n          Card(\r\n            child: Padding(\r\n              padding: const EdgeInsets.all(16.0),\r\n              child: Column(\r\n                children: [\r\n                  const Text(\r\n                    'Statistiques',\r\n                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n                  ),\r\n                  const SizedBox(height: 16),\r\n                  SizedBox(\r\n                    width: 100,\r\n                    height: 100,\r\n                    child: Stack(\r\n                      alignment: Alignment.center,\r\n                      children: [\r\n                        CircularProgressIndicator(\r\n                          value: widget.project['progress'] / 100,\r\n                          strokeWidth: 8,\r\n                          color: const Color(0xFFE27D60),\r\n                        ),\r\n                        Text(\r\n                          '${widget.project['progress']}%',\r\n                          style: const TextStyle(\r\n                            fontSize: 18,\r\n                            fontWeight: FontWeight.bold,\r\n                          ),\r\n                        ),\r\n                      ],\r\n                    ),\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n          ),\r\n          const SizedBox(height: 16),\r\n          Card(\r\n            child: Padding(\r\n              padding: const EdgeInsets.all(16.0),\r\n              child: Column(\r\n                crossAxisAlignment: CrossAxisAlignment.start,\r\n                children: [\r\n                  const Text(\r\n                    'Membres du projet',\r\n                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n                  ),\r\n                  const SizedBox(height: 16),\r\n                  Wrap(\r\n                    spacing: 8,\r\n                    runSpacing: 8,\r\n                    children: [\r\n                      for (var member in widget.project['members'])\r\n                        Chip(\r\n                          avatar: CircleAvatar(\r\n                            backgroundImage: AssetImage(member['image']),\r\n                          ),\r\n                          label: Text(member['name']),\r\n                        ),\r\n                    ],\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildDetailRow(String label, String value) {\r\n    return Padding(\r\n      padding: const EdgeInsets.symmetric(vertical: 8.0),\r\n      child: Row(\r\n        crossAxisAlignment: CrossAxisAlignment.start,\r\n        children: [\r\n          SizedBox(\r\n            width: 120,\r\n            child: Text(\r\n              '$label :',\r\n              style: const TextStyle(fontWeight: FontWeight.bold),\r\n            ),\r\n          ),\r\n          Expanded(child: Text(value)),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildPhasesTab() {\r\n    final"
        }
    ]
}